/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 07:34:26 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.RescaleOp;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JFormattedTextField;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.SpinnerNumberModel;
import javax.swing.plaf.synth.SynthTextPaneUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.JTextComponent;
import javax.swing.text.MaskFormatter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CategoryLabelPosition;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickMarkPosition;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.axis.Timeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.text.TextBlockAnchor;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.MatrixSeries;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "UO~EL^p9T`reNvd&it7";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("UO~EL^p9T`reNvd&it7");
      Color color0 = Color.PINK;
      subCategoryAxis0.setTickMarkPaint(color0);
      Font font0 = subCategoryAxis0.getSubLabelFont();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("UO~EL^p9T`reNvd&it7", font0, piePlot3D0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, 424);
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (424) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("s~A'!Y`T");
      boolean boolean0 = numberAxis0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minute minute0 = new Minute();
      PeriodAxis periodAxis0 = new PeriodAxis("", minute0, minute0, minute0.DEFAULT_TIME_ZONE);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      int int0 = defaultStatisticalCategoryDataset0.getRowCount();
      defaultStatisticalCategoryDataset0.add(2662.8330336718, 1.0E-8, (Comparable) true, (Comparable) 1.0E-8);
      Object object0 = defaultStatisticalCategoryDataset0.clone();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultStatisticalCategoryDataset0, tableOrder0);
      Stroke stroke0 = spiderWebPlot0.getSeriesOutlineStroke(0);
      periodAxis0.setPlot(spiderWebPlot0);
      int int1 = defaultStatisticalCategoryDataset0.getColumnCount();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-212.0), 1.0F, "");
      cyclicNumberAxis0.setTickLabelFont(periodAxis0.DEFAULT_AXIS_LABEL_FONT);
      Paint paint0 = cyclicNumberAxis0.getAdvanceLinePaint();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      String[] stringArray1 = symbolAxis0.getSymbols();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-768.5158F);
      floatArray0[4] = (float) 500;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.0F;
      JFreeChart jFreeChart0 = new JFreeChart("__9j", periodAxis0.DEFAULT_TICK_LABEL_FONT, spiderWebPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      // Undeclared exception!
      try { 
        rescaleOp0.filter((BufferedImage) null, (BufferedImage) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.RescaleOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Font font0 = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
      categoryAxis0.setLabelFont(font0);
      Stroke stroke0 = categoryAxis0.getAxisLineStroke();
      String string0 = null;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        ZoneOffset.of("180");
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, plus/minus not found when expected: 180
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week();
      PeriodAxis periodAxis0 = new PeriodAxis((String) null, week0, week0);
      TimeZone timeZone0 = periodAxis0.getTimeZone();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.lookupSeriesPaint(2529);
      defaultPolarItemRenderer0.setAutoPopulateSeriesOutlinePaint(false);
      Stroke stroke0 = defaultPolarItemRenderer0.getBaseOutlineStroke();
      periodAxis0.setTickMarkStroke(stroke0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) defaultPolarItemRenderer0.ZERO, 2667.0978514644676, (String) null);
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      cyclicNumberAxis0.setDownArrow(rectangle0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      double double0 = cyclicNumberAxis0.java2DToValue(0.05, rectangle0, rectangleEdge0);
      String string0 = "XvU[5#EBom{X_w%mq";
      periodAxis0.setLabelURL("XvU[5#EBom{X_w%mq");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("vRz_e");
      double double1 = logarithmicAxis0.java2DToValue(0.05, rectangle0, rectangleEdge0);
      logarithmicAxis0.setAllowNegativesFlag(true);
      CategoryAxis categoryAxis0 = new CategoryAxis("]`G.");
      TextBlock textBlock0 = new TextBlock();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      CategoryLabelPosition categoryLabelPosition0 = null;
      try {
        categoryLabelPosition0 = new CategoryLabelPosition(rectangleAnchor0, (TextBlockAnchor) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'labelAnchor' argument.
         //
         verifyException("org.jfree.chart.axis.CategoryLabelPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'insets' argument.");
      periodAxis0.configure();
      TimeZone timeZone0 = periodAxis0.getTimeZone();
      boolean boolean0 = periodAxis0.isAxisLineVisible();
      DateAxis dateAxis0 = new DateAxis("U$D^j^NzS<1*jP|m%", timeZone0);
      boolean boolean1 = dateAxis0.equals(periodAxis0);
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      dateAxis0.setTimeline(segmentedTimeline0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s-(BW|%BF+(s'8";
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      float[][] floatArray0 = new float[7][6];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 2.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 2.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (float) 500;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[2];
      floatArray3[0] = 0.0F;
      floatArray3[1] = (float) 500;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 2.0F;
      floatArray4[2] = 2.0F;
      floatArray4[3] = (float) 500;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[8];
      floatArray5[0] = 2.0F;
      floatArray5[1] = (float) 500;
      floatArray5[2] = 0.0F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = 2.0F;
      floatArray5[5] = 2.0F;
      floatArray5[6] = (float) 500;
      floatArray5[7] = (float) 500;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[0];
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[2];
      floatArray7[0] = (float) 500;
      floatArray7[1] = 0.0F;
      floatArray0[6] = floatArray7;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, symbolAxis0, dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 0.0F, 1.0E-8, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryAxis categoryAxis0 = new CategoryAxis("wnERDf8=;yMC:");
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge0 = null;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5.0E7, "");
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.drawTickMarksAndLabels(graphics2D0, (-274.04741767), (Rectangle2D) null, (Rectangle2D) null, (RectangleEdge) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      SystemColor systemColor0 = SystemColor.menu;
      categoryAxis3D0.setAxisLinePaint(systemColor0);
      categoryAxis3D0.setLabel("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-71);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(16, (-465), byteArray0, byteArray0, byteArray0, 1);
      } catch(IllegalArgumentException e) {
         //
         // Map size (-465) must be >= 1
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "Q]auQD>b/P#OuhJ<W";
      DateAxis dateAxis0 = new DateAxis("Q]auQD>b/P#OuhJ<W");
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(500, 500, 500);
      dateAxis0.setTimeline(segmentedTimeline0);
      dateAxis0.setVisible(false);
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(500, 500, 1325, 1325);
      JSpinner jSpinner0 = new JSpinner(spinnerNumberModel0);
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0, (String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "org.jfree.chart.plot.CombinedRangeXYPlot";
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.plot.CombinedRangeXYPlot", zoneInfo0);
      Object object0 = dateAxis0.clone();
      SymbolAxis symbolAxis0 = null;
      try {
        symbolAxis0 = new SymbolAxis("org.jfree.chart.plot.CombinedRangeXYPlot", (String[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      DateAxis dateAxis0 = new DateAxis();
      DateTickUnit dateTickUnit0 = new DateTickUnit(0, (-141));
      TimeZone timeZone0 = TimeZone.getDefault();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(numberAxis0);
      JFreeChart jFreeChart0 = axisChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 3, 0, 570, 0, 500, 2220, true, false, false, true, true, false);
      Locale locale0 = chartPanel0.getLocale();
      String string0 = timeZone0.getDisplayName(true, 0, locale0);
      Date date0 = dateTickUnit0.rollDate(dateAxis0.DEFAULT_ANCHOR_DATE, timeZone0);
      dateAxis0.setTickUnit(dateTickUnit0);
      dateAxis0.setLabelInsets(numberAxis0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'paint' argument.");
      String string1 = logarithmicAxis0.makeTickLabel((-227.596578), false);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(", but the TimeSeries is expecting an instance of ", logarithmicAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, false);
      boolean boolean0 = logarithmicAxis0.hasListener(jFreeChart0);
      logarithmicAxis0.autoAdjustRange();
      DateAxis dateAxis0 = new DateAxis();
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("Null 'paint' argument.", (-2416), 500);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      boolean boolean0 = logarithmicAxis0.getStrictValuesFlag();
      DateAxis dateAxis0 = new DateAxis("");
      Object object0 = dateAxis0.clone();
      DateTickMarkPosition dateTickMarkPosition0 = DateTickMarkPosition.START;
      dateAxis0.setTickMarkPosition(dateTickMarkPosition0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", logarithmicAxis0.DEFAULT_RANGE);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      LegendTitle legendTitle0 = new LegendTitle(multiplePiePlot0);
      RectangleEdge rectangleEdge0 = legendTitle0.getLegendItemGraphicEdge();
      double double0 = moduloAxis0.java2DToValue((-1.7976931348623157E308), rectangle0, rectangleEdge0);
      Locale locale0 = Locale.forLanguageTag("ZOOM_IN_BOTH");
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      numberFormat0.setMaximumIntegerDigits(680);
      logarithmicAxis0.setNumberFormatOverride(numberFormat0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(300, 0.05, "ZOOM_RESET_DOMAIN");
      double double1 = cyclicNumberAxis0.getOffset();
      float float0 = moduloAxis0.getTickMarkOutsideLength();
      Font font0 = dateAxis0.getLabelFont();
      int int0 = 50;
      Hour hour0 = null;
      try {
        hour0 = new Hour(500, 50, 50, 600);
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setTickLabelPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("r:=KaOG=dR>KE");
      categoryAxis3D0.setUpperMargin(0.0);
      categoryAxis3D0.setMaximumCategoryLabelLines(193);
      categoryAxis3D0.removeCategoryLabelToolTip("|O[,%`0Jju");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "|O[,%`0Jju");
      simpleTimeZone0.setEndRule(0, 0, 0, 0, true);
      DateAxis dateAxis0 = new DateAxis("r:=KaOG=dR>KE", simpleTimeZone0);
      Timeline timeline0 = dateAxis0.getTimeline();
      RingPlot ringPlot0 = new RingPlot();
      categoryAxis3D0.removeChangeListener(ringPlot0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0, 2.0);
      double double0 = cyclicNumberAxis0.calculateHighestVisibleTickValue();
      boolean boolean0 = categoryAxis3D0.isTickLabelsVisible();
      TickUnitSource tickUnitSource0 = DateAxis.createStandardDateTickUnits();
      cyclicNumberAxis0.autoAdjustRange();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "|O[,%`0Jju";
      stringArray0[2] = "r:=KaOG=dR>KE";
      stringArray0[3] = "r:=KaOG=dR>KE";
      stringArray0[4] = "r:=KaOG=dR>KE";
      SymbolAxis symbolAxis0 = new SymbolAxis("r:=KaOG=dR>KE", stringArray0);
      symbolAxis0.setGridBandsVisible(true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("Os7r$b=.8?", (Range) null);
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits();
      RectangleInsets rectangleInsets0 = moduloAxis0.getLabelInsets();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&`2r(";
      SymbolAxis symbolAxis0 = new SymbolAxis("KJ>'K", stringArray0);
      byte[] byteArray0 = new byte[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(500, 17, byteArray0, byteArray0, byteArray0, byteArray0);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      double double0 = valueAxis0.getFixedDimension();
      String string0 = "";
      PeriodAxis periodAxis0 = new PeriodAxis("");
      boolean boolean0 = periodAxis0.equals("");
      ModuloAxis moduloAxis0 = new ModuloAxis("", periodAxis0.DEFAULT_RANGE);
      periodAxis0.setTickLabelPaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      // Undeclared exception!
      try { 
        moduloAxis0.valueToJava2D(0.0, (Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Eric Alexander");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logarithmicAxis0);
      logarithmicAxis0.notifyListeners(axisChangeEvent0);
      boolean boolean0 = logarithmicAxis0.getLog10TickLabelsFlag();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(":Jy]42EfZ]V;7a\"B");
      double double0 = categoryAxis3D0.getUpperMargin();
      TickUnitSource tickUnitSource0 = NumberAxis.createStandardTickUnits();
      Font font0 = logarithmicAxis0.getTickLabelFont();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis((String) null);
      DateTickUnit dateTickUnit0 = dateAxis1.getTickUnit();
      Date date0 = dateAxis1.calculateHighestVisibleTickValue(dateTickUnit0);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[0];
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[7];
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, "Wyh[\".\"2P");
      Object object0 = cyclicNumberAxis0.clone();
      objectArray2[0] = object0;
      objectArray2[1] = (Object) dateTickUnit0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) dateAxis1;
      objectArray2[4] = (Object) dateAxis1;
      objectArray2[5] = (Object) date0;
      objectArray2[6] = (Object) date0;
      objectArray0[1] = objectArray2;
      JTable jTable0 = new JTable(objectArray0, objectArray1);
      Rectangle rectangle0 = jTable0.getCellRect(500, 500, true);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      double double0 = dateAxis0.dateToJava2D(date0, rectangle0, rectangleEdge0);
      Range range0 = dateAxis0.getRange();
      float float0 = dateAxis0.getTickMarkInsideLength();
      Plot plot0 = dateAxis0.getPlot();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("\"b{)N*demYuyrr", stringArray0);
      String string0 = symbolAxis0.getLabelURL();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 2.0F, "Null 'insets' argument.");
      cyclicNumberAxis0.setPeriod(0.0);
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2.0F;
      floatArray0[1] = (float) 500;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2.0F;
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, (RenderingHints) null);
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'paint' argument.", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, piePlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
      DirectColorModel directColorModel0 = null;
      try {
        directColorModel0 = new DirectColorModel(15, 38, 38, 1948);
      } catch(IllegalArgumentException e) {
         //
         // Noncontiguous red mask (26
         //
         verifyException("java.awt.image.PackedColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxis0.setTickMarksVisible(false);
      String string0 = null;
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      String string1 = symbolAxis0.valueToString(1);
      Graphics2D graphics2D0 = null;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = defaultPolarItemRenderer0.getPlot();
      boolean boolean0 = standardEntityCollection0.equals((Object) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(1, 3);
      CategoryPlot categoryPlot0 = combinedDomainCategoryPlot0.findSubplot(plotRenderingInfo0, point0);
      JTextArea jTextArea0 = new JTextArea((String) null, 0, 632);
      MouseEvent mouseEvent0 = null;
      try {
        mouseEvent0 = new MouseEvent(jTextArea0, 10, 0L, 3, 2, 0, 0, true, 1067);
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "I`m");
      cyclicNumberAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickMarksVisible(false);
      categoryAxis0.setCategoryLabelPositionOffset(0);
      categoryAxis0.setMaximumCategoryLabelWidthRatio(0.0F);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(" and");
      boolean boolean0 = logarithmicAxis0.getAutoRangeIncludesZero();
      double double0 = logarithmicAxis0.adjustedLog10(0.2);
      boolean boolean1 = logarithmicAxis0.getAutoRangeNextLogFlag();
      int int0 = 2;
      MockDate mockDate0 = (MockDate)DateAxis.DEFAULT_ANCHOR_DATE;
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(2, minute0);
      PeriodAxis periodAxis0 = new PeriodAxis(" and", second0, second0, second0.DEFAULT_TIME_ZONE);
      Graphics2D graphics2D0 = null;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1142.289771258567), 30.0);
      double double1 = 0.0;
      Point point0 = null;
      try {
        point0 = new Point((Point) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.configure();
      categoryAxis0.setLabelAngle((-1096.043609826));
      NumberAxis numberAxis0 = new NumberAxis("7OB8C");
      NumberAxis numberAxis1 = null;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 0, chartRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "Requires 'lower' < 'upper'.";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Requires 'lower' < 'upper'.");
      Range range0 = Range.shift(logarithmicAxis0.DEFAULT_RANGE, (double) 500, false);
      logarithmicAxis0.setRangeWithMargins(range0, true, true);
      double double0 = logarithmicAxis0.switchedLog10(743.60753289063);
      logarithmicAxis0.setTickMarkOutsideLength(3383.1F);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Requires 'lower' < 'upper'.");
      int int0 = (-2625);
      int int1 = 93;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)39;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)20;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)39;
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte)39;
      byteArray1[6] = (byte)10;
      byteArray1[7] = (byte)12;
      byteArray1[8] = (byte)39;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(12, 45, byteArray0, byteArray1, byteArray1, (byte[]) null);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      PeriodAxis periodAxis0 = new PeriodAxis("nVHSX@p$o_8cx7");
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("&@Gu-8pF_FxY:");
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis0, numberAxis3D0, statisticalLineAndShapeRenderer0);
      periodAxis0.addChangeListener(categoryPlot0);
      boolean boolean0 = numberAxis3D0.equals(periodAxis0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "e$}GC-#o";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("e$}GC-#o");
      subCategoryAxis0.setLabel("SeriesRenderingOrder.FORWARD");
      subCategoryAxis0.setVisible(true);
      subCategoryAxis0.setTickMarkInsideLength(2.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1798.9697838, 27.61404214334214);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(1798.9697838);
      boolean boolean0 = false;
      int int0 = (-1918);
      int int1 = 0;
      int int2 = 1405;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(232, 1405, byteArray0, byteArray0, byteArray0, (-1918));
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-247.85714024839));
      Stroke stroke0 = cyclicNumberAxis0.getAdvanceLineStroke();
      DateAxis dateAxis0 = new DateAxis((String) null);
      dateAxis0.setLabelURL((String) null);
      dateAxis0.setAxisLineVisible(true);
      DateTickMarkPosition dateTickMarkPosition0 = DateTickMarkPosition.MIDDLE;
      dateAxis0.setTickMarkPosition(dateTickMarkPosition0);
      cyclicNumberAxis0.setAutoRangeIncludesZero(true);
      dateAxis0.setRange(cyclicNumberAxis0.DEFAULT_RANGE);
      RenderingHints renderingHints0 = null;
      RescaleOp rescaleOp0 = new RescaleOp((-1153.0F), 0.0F, (RenderingHints) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, thermometerPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(3, 0, chartRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Width (3) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Plot plot0 = numberAxis3D0.getPlot();
      numberAxis3D0.setLabelPaint(plot0.DEFAULT_BACKGROUND_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "Null 'font' argument.");
      numberAxis3D0.setDefaultAutoRange(cyclicNumberAxis0.DEFAULT_RANGE);
      cyclicNumberAxis0.setPeriod(1.0F);
      Stroke stroke0 = numberAxis3D0.getAxisLineStroke();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("G4$]Yr%)O^=Ullz]hiZ");
      Font font0 = subCategoryAxis0.getSubLabelFont();
      DateAxis dateAxis0 = new DateAxis();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4), 10, 0, (-4), (-4), 500);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      // Undeclared exception!
      try { 
        dateAxis0.setRange(date0, date0);
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Object object0 = categoryAxis0.clone();
      categoryAxis0.setUpperMargin((-1050.870199));
      Color color0 = Color.getColor((String) null, 0);
      categoryAxis0.setTickLabelPaint(color0);
      String string0 = "JdbcXYDataset: swallowing exception.";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("JdbcXYDataset: swallowing exception.");
      numberAxis3D0.setLabel((String) null);
      double double0 = numberAxis3D0.calculateHighestVisibleTickValue();
      Object object1 = categoryAxis0.clone();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(25, "JdbcXYDataset: swallowing exception.", 25, 55, 0, (-2239), (-1), 0, 0, 474, 0, 0, (-1879));
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 25
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1725.2654999481247, "W!>ysiZ~");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      Range range0 = combinedRangeCategoryPlot0.getDataRange(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("W!>ysiZ~", (Range) null);
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) 10;
      numberArray1[1] = (Number) 0.05;
      numberArray1[2] = (Number) 1.0E-8;
      numberArray1[3] = (Number) 0.05;
      numberArray1[4] = (Number) 500;
      numberArray1[5] = (Number) 1.0E-8;
      numberArray1[6] = (Number) 2.0F;
      numberArray1[7] = (Number) 1.0E-8;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = (Number) 1.0F;
      Float float0 = new Float((float) 10);
      numberArray2[1] = (Number) float0;
      numberArray2[2] = (Number) 0.05;
      numberArray2[3] = (Number) 1.0F;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      combinedRangeCategoryPlot0.setDataset(500, (CategoryDataset) defaultIntervalCategoryDataset0);
      NumberTickUnit numberTickUnit0 = moduloAxis0.getTickUnit();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("6}`!7<C9[.OjO");
      logarithmicAxis0.setLog10TickLabelsFlag(true);
      moduloAxis0.setLabelURL("");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      MockDate mockDate0 = new MockDate(2462, 2462, 500, 2462, 2756);
      Vector<CyclicNumberAxis> vector0 = new Vector<CyclicNumberAxis>();
      JList<CyclicNumberAxis> jList0 = new JList<CyclicNumberAxis>(vector0);
      Rectangle rectangle0 = jList0.getCellBounds(500, 2369);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      // Undeclared exception!
      try { 
        dateAxis0.dateToJava2D(mockDate0, (Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("q[]?%qS(N T\"Oet6\"T");
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.05, 0.2);
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, (RenderingHints) null);
      NumberAxis numberAxis0 = new NumberAxis("q[]?%qS(N T\"Oet6\"T");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("q[]?%qS(N T\"Oet6\"T", subCategoryAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      int int0 = 34;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 34, 0.05, (double) 0.0F, chartRenderingInfo0);
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(500);
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "qhV9!?_";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(")RO|kBY", symbolAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, false);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1063, (-299), (ChartRenderingInfo) null);
      } catch(IllegalArgumentException e) {
         //
         // Width (1063) and height (-299) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = null;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3.0, (String) null);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      rectangle0.setFrame(0.0, 4.0, (-5.0), 654.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      double double0 = categoryAxis0.getCategoryStart(12, 500, rectangle0, rectangleEdge0);
      DateAxis dateAxis0 = new DateAxis((String) null);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        DateFormat.getTimeInstance(1180, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1180
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "Lfm.,xh]r";
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("Lfm.,xh]r", stringArray0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Lfm.,xh]r");
      logarithmicAxis0.setNegativeArrowVisible(true);
      double double0 = (-1972.50905952);
      double double1 = logarithmicAxis0.switchedLog10((-1972.50905952));
      NumberTickUnit numberTickUnit0 = symbolAxis0.getTickUnit();
      String string1 = "y/N\\$";
      RegularTimePeriod regularTimePeriod0 = null;
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeZone.setDefault(simpleTimeZone0);
      ZoneId zoneId0 = simpleTimeZone0.toZoneId();
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = 10;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2.0F;
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 10;
      floatArray0[3] = (float) 10;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(10, (-1516), floatArray0);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      RectangleInsets rectangleInsets0 = PeriodAxisLabelInfo.DEFAULT_INSETS;
      moduloAxis0.setLabelInsets(rectangleInsets0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      int int0 = categoryAxis0.getMaximumCategoryLabelLines();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(moduloAxis0);
      JFreeChart jFreeChart0 = axisChangeEvent0.getChart();
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel((JFreeChart) null, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("series");
      logarithmicAxis0.resizeRange(0.0, 0.0);
      double double0 = logarithmicAxis0.calculateHighestVisibleTickValue();
      logarithmicAxis0.setTickLabelsVisible(false);
      logarithmicAxis0.setLabelToolTip("");
      logarithmicAxis0.setAutoRangeMinimumSize(3664.3, false);
      logarithmicAxis0.setStrictValuesFlag(false);
      logarithmicAxis0.zoomRange(4.0, 4.0);
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setFixedAutoRange(4.0);
      dateAxis0.setRangeAboutValue(4.0, 2.302585092994046);
      TickUnitSource tickUnitSource0 = DateAxis.createStandardDateTickUnits();
      dateAxis0.setRange(logarithmicAxis0.DEFAULT_RANGE);
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      dateAxis0.setTickUnit(dateTickUnit0, true, true);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3616.228986011), "series");
      cyclicNumberAxis0.setAutoTickUnitSelection(true);
      cyclicNumberAxis0.setRange(logarithmicAxis0.DEFAULT_RANGE, true, false);
      dateAxis0.setTickLabelFont(logarithmicAxis0.DEFAULT_AXIS_LABEL_FONT);
      DateFormat dateFormat0 = dateAxis0.getDateFormatOverride();
      cyclicNumberAxis0.setAdvanceLinePaint(logarithmicAxis0.DEFAULT_TICK_LABEL_PAINT);
      logarithmicAxis0.setAllowNegativesFlag(false);
      MockDate mockDate0 = (MockDate)DateAxis.DEFAULT_ANCHOR_DATE;
      Date date0 = dateAxis0.nextStandardDate(mockDate0, dateTickUnit0);
      ModuloAxis moduloAxis0 = new ModuloAxis("series", logarithmicAxis0.DEFAULT_RANGE);
      moduloAxis0.resizeRange((double) 500);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(0);
      LegendTitle legendTitle0 = new LegendTitle(xYAreaRenderer0);
      RectangleEdge rectangleEdge0 = legendTitle0.getPosition();
      // Undeclared exception!
      try { 
        categoryAxis3D0.calculateCategorySize(1, (Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "jv/<G%";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("jv/<G%");
      Stack<String> stack0 = new Stack<String>();
      Graphics2D graphics2D0 = null;
      Frame frame0 = null;
      try {
        frame0 = new Frame("jv/<G%");
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      String string1 = "+1]s]8<03RSa-B@";
      String string2 = "";
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      RingPlot ringPlot0 = new RingPlot(defaultKeyedValuesDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", (Font) null, ringPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2127);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SynthTextPaneUI synthTextPaneUI0 = new SynthTextPaneUI();
      MaskFormatter maskFormatter0 = new MaskFormatter();
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatter) maskFormatter0);
      // Undeclared exception!
      try { 
        synthTextPaneUI0.modelToView((JTextComponent) jFormattedTextField0, (-1313));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicTextUI", e);
      }
  }
}
