/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 10:03:40 GMT 2020
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferFloat;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.util.Hashtable;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JInternalFrame;
import javax.swing.JTabbedPane;
import javax.swing.JTree;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.plaf.metal.MetalTabbedPaneUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.tree.TreePath;
import javax.swing.tree.VariableHeightLayoutCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.AreaRendererEndType;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.BarPainter;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.time.Millisecond;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(5651.6118894, 5651.6118894);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      barRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      barRenderer3D0.setAutoPopulateSeriesOutlineStroke(true);
      barRenderer3D0.setAutoPopulateSeriesShape(true);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = barRenderer3D0.getBaseItemLabelGenerator();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      BarRenderer3D barRenderer3D1 = new BarRenderer3D((-5072.701), 2222.8922511913624);
      barRenderer3D1.setBaseLegendTextFont(statisticalLineAndShapeRenderer0.DEFAULT_VALUE_LABEL_FONT);
      boolean boolean0 = statisticalLineAndShapeRenderer0.equals(barRenderer3D1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      LogAxis logAxis0 = new LogAxis();
      NumberTickUnit numberTickUnit0 = logAxis0.getTickUnit();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(numberTickUnit0);
      groupedStackedBarRenderer0.setSeriesToGroupMap(keyToGroupMap0);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      Paint paint0 = xYBoxAndWhiskerRenderer0.getArtifactPaint();
      barRenderer3D0.setWallPaint(paint0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      boolean boolean0 = stackedBarRenderer3D0.getIgnoreZeroValues();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setUseSeriesOffset(false);
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer1.getBaseItemLabelGenerator();
      barRenderer3D0.setSeriesItemLabelGenerator(500, (CategoryItemLabelGenerator) null);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(customCategoryURLGenerator0);
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true);
      MetalTabbedPaneUI metalTabbedPaneUI0 = new MetalTabbedPaneUI();
      JTabbedPane jTabbedPane0 = new JTabbedPane(2);
      // Undeclared exception!
      try { 
        metalTabbedPaneUI0.getTabBounds(jTabbedPane0, 1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicTabbedPaneUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      barRenderer0.setAutoPopulateSeriesShape(true);
      BarRenderer.setDefaultShadowsVisible(true);
      int int0 = barRenderer0.hashCode();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setItemLabelAnchorOffset(2705.74819085223);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")Q.m8v7'}j";
      stringArray0[1] = "org.jfree.chart.ui.ProjectInfo";
      stringArray0[2] = "6<a2s";
      stringArray0[3] = "zym5A7D|:";
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      Range range0 = lineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      lineAndShapeRenderer0.setBaseShapesVisible(true);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LegendItemCollection legendItemCollection0 = minMaxCategoryRenderer0.getLegendItems();
      Paint paint0 = minMaxCategoryRenderer0.getGroupPaint();
      int int1 = minMaxCategoryRenderer0.hashCode();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, 0.0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(12.0, 0.2, 8.0, 4.0, barRenderer3D0.DEFAULT_VALUE_LABEL_PAINT, barRenderer3D0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      lineRenderer3D0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      lineRenderer3D0.setXOffset(0.0);
      int int0 = 1052;
      Boolean boolean0 = lineRenderer3D0.getSeriesShapesFilled(1052);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      int int1 = (-2464);
      int int2 = (-1561);
      int int3 = (-1445);
      int int4 = 0;
      DirectColorModel directColorModel0 = null;
      try {
        directColorModel0 = new DirectColorModel((-2464), (-1561), (-1445), 0);
      } catch(IllegalArgumentException e) {
         //
         // Noncontiguous red mask (fffff9e7
         //
         verifyException("java.awt.image.PackedColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      boolean boolean0 = lineAndShapeRenderer0.getUseOutlinePaint();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.2, 2000.0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.chart.renderer.category.ScatterRenderer");
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getURLGenerator(473, 473, true);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = levelRenderer0.getItemLabelGenerator(1353, 473, false);
      statisticalBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null);
      boxAndWhiskerRenderer0.setSeriesURLGenerator(473, (CategoryURLGenerator) null, true);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.renderer.category.ScatterRenderer");
      int int0 = combinedDomainCategoryPlot0.getRangeAxisIndex(numberAxis3D0);
      Paint paint0 = combinedDomainCategoryPlot0.getRangeCrosshairPaint();
      boxAndWhiskerRenderer0.setArtifactPaint(paint0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(0.0F, 10, renderingHints0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 1353;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.5F;
      floatArray0[5] = (float) 1353;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) 10;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(10, 473, floatArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 8 and should be 4730
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(3441.0, 3441.0, false);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 3.0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Paint paint0 = meterPlot0.getDialBackgroundPaint();
      stackedBarRenderer3D0.setLegendTextPaint(3071, paint0);
      int int0 = 3;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setItemLabelAnchorOffset(3441.0);
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getSeriesURLGenerator(2628);
      statisticalBarRenderer0.setItemLabelAnchorOffset(10);
      boolean boolean0 = false;
      stackedBarRenderer3D0.setSeriesURLGenerator(3, (CategoryURLGenerator) null, false);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      double double0 = levelRenderer0.getItemMargin();
      levelRenderer0.setMaximumItemWidth(0.2);
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(meterPlot0);
      meterPlot0.notifyListeners(plotChangeEvent0);
      CategoryTextAnnotation categoryTextAnnotation0 = null;
      try {
        categoryTextAnnotation0 = new CategoryTextAnnotation((String) null, millisecond0, 1.0F);
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.annotations.TextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = false;
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      boolean boolean1 = false;
      lineAndShapeRenderer0.setUseSeriesOffset(false);
      Shape shape0 = lineAndShapeRenderer0.getLegendShape(0);
      int int0 = lineAndShapeRenderer0.getColumnCount();
      lineAndShapeRenderer0.removeAnnotations();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      // Undeclared exception!
      try { 
        standardCategoryToolTipGenerator0.generateToolTip(jDBCCategoryDataset0, 0, 0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryDataset categoryDataset0 = null;
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) null);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesLinesVisible((-981), true);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      double double0 = barRenderer0.getItemMargin();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.setMinorTickMarkOutsideLength((-3.0F));
      barRenderer0.clearSeriesStrokes(true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("8", combinedRangeXYPlot0);
      int int0 = (-846);
      int int1 = 514;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-846), 10, 10, 10, 514, 0, false, true, false, true, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      plotRenderingInfo0.setPlotArea(rectangle2D0);
      CategoryItemRendererState categoryItemRendererState0 = barRenderer0.createState(plotRenderingInfo0);
      double double1 = barRenderer0.calculateSeriesWidth(2682.14060889, categoryAxis0, 1595, 1595);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(barRenderer0.DEFAULT_VALUE_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, categoryAxis0.DEFAULT_AXIS_LABEL_PAINT);
      boolean boolean0 = waterfallBarRenderer0.equals(rectangle2D0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      boolean boolean1 = stackedAreaRenderer0.equals(intervalCategoryToolTipGenerator0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      JFreeChart jFreeChart1 = new JFreeChart((String) null, waterfallBarRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeXYPlot0, false);
      // Undeclared exception!
      try { 
        jFreeChart1.createBufferedImage(420, 1595, (-798), chartRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -798
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("0@'", barRenderer0.ZERO, 3.0, (double) barRenderer0.ZERO);
      boolean boolean0 = barRenderer0.removeAnnotation(categoryPointerAnnotation0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      int int0 = ganttRenderer0.hashCode();
      ganttRenderer0.setStartPercent(5384.419569678152);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-103);
      byte byte0 = (byte)0;
      byteArray0[8] = (byte)0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1397, 1397, byteArray0, (byte) (-103), true);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = levelRenderer0.getItemLabelGenerator(5, (-904), false);
      categoryStepRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, false);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      boolean boolean0 = categoryStepRenderer0.equals(stackedAreaRenderer0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) categoryStepRenderer0.ZERO, (-7.0));
      stackedBarRenderer3D0.setItemLabelAnchorOffset((-7.0));
      stackedBarRenderer3D0.setRenderAsPercentages(false);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-904), 3970);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("%406");
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      Hashtable<String, StandardCategoryItemLabelGenerator> hashtable0 = new Hashtable<String, StandardCategoryItemLabelGenerator>();
      JTree jTree0 = new JTree(hashtable0);
      VariableHeightLayoutCache variableHeightLayoutCache0 = new VariableHeightLayoutCache();
      TreePath treePath0 = variableHeightLayoutCache0.getPathForRow(114);
      Rectangle rectangle0 = synthTreeUI0.getPathBounds(jTree0, (TreePath) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        ganttRenderer0.getItemMiddle((Comparable) null, stackedAreaRenderer0.ZERO, slidingGanttCategoryDataset0, categoryAxis3D0, (Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      AreaRendererEndType areaRendererEndType0 = stackedAreaRenderer0.getEndType();
      stackedAreaRenderer0.setEndType(areaRendererEndType0);
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addAnnotation((CategoryAnnotation) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      int int0 = 703;
      lineAndShapeRenderer0.setSeriesURLGenerator(703, (CategoryURLGenerator) null, true);
      int int1 = 0;
      boolean boolean0 = lineAndShapeRenderer0.getItemLineVisible(0, 0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(703, (double) lineAndShapeRenderer0.ZERO);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(0, (-4231), 0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("+J{O3\"jolXb/B:v6F", decimalFormat0);
      stackedBarRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0, true);
      boolean boolean0 = stackedBarRenderer3D0.isDrawBarOutline();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Icon icon0 = minMaxCategoryRenderer0.getObjectIcon();
      stackedBarRenderer3D0.setDrawBarOutline(true);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("|RcfMkWM{I&EUR<i", stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_FONT, multiplePiePlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 10, 10, 15, false, false, false, false, false, false);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int0 = scatterRenderer0.hashCode();
      scatterRenderer0.setUseOutlinePaint(true);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("Null 'orientation' argument.", "Null 'orientation' argument.", "Null 'orientation' argument.");
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("Null 'orientation' argument.", "Base item URL generator not cloneable.", "Null 'orientation' argument.", "");
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      double double0 = layeredBarRenderer0.getSeriesBarWidth(893);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        layeredBarRenderer0.getDomainAxis((CategoryPlot) null, (CategoryDataset) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getBaseURLGenerator();
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, true);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("Nicolas Brodu", dateFormat0);
      boxAndWhiskerRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      boolean boolean0 = boxAndWhiskerRenderer0.isMeanVisible();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      double double0 = (-2938.645);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.getDomainAxis(combinedDomainCategoryPlot0, defaultCategoryDataset0);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
      CategoryURLGenerator categoryURLGenerator0 = spiderWebPlot0.getURLGenerator();
      levelRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Paint paint0 = minMaxCategoryRenderer0.lookupSeriesPaint(3087);
      boolean boolean0 = true;
      Hashtable<RenderingHints.Key, LineAndShapeRenderer> hashtable0 = new Hashtable<RenderingHints.Key, LineAndShapeRenderer>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      RescaleOp rescaleOp0 = new RescaleOp(3087, 3087, renderingHints0);
      // Undeclared exception!
      try { 
        rescaleOp0.filter((BufferedImage) null, (BufferedImage) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.RescaleOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      Paint paint0 = barRenderer3D0.getWallPaint();
      double double0 = (-2914.2712);
      double double1 = 4.0;
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(barRenderer3D0, true);
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 80, 80, 80, 80, 80, 1861, false, false, false, false, false, false, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-1961.0), (-2.147483648E9), true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      Shape shape0 = xYDotRenderer0.getLegendShape();
      int int0 = 0;
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.addEntity(standardEntityCollection0, shape0, (CategoryDataset) null, 0, 0, false, (-1961.0), 226.38744395);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(99.6913, (-145.8));
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      ItemLabelPosition itemLabelPosition0 = defaultPolarItemRenderer0.getSeriesNegativeItemLabelPosition((-454));
      stackedBarRenderer3D0.setNegativeItemLabelPositionFallback(itemLabelPosition0);
      BarPainter barPainter0 = stackedBarRenderer0.getBarPainter();
      stackedBarRenderer3D0.setBarPainter(barPainter0);
      int int0 = stackedBarRenderer3D0.getPassCount();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setBaseLinesVisible(false);
      boolean boolean0 = stackedBarRenderer0.isDrawBarOutline();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-57);
      IndexColorModel indexColorModel0 = new IndexColorModel(1, 1, byteArray0, byteArray0, byteArray0, byteArray0);
      float[][] floatArray0 = new float[9][2];
      float[] floatArray1 = new float[8];
      floatArray1[0] = (float) (byte) (-57);
      floatArray1[1] = (float) (byte)119;
      floatArray1[2] = (float) (-454);
      floatArray1[3] = (float) (-454);
      floatArray1[4] = (float) (byte)0;
      floatArray1[5] = (float) (byte)119;
      floatArray1[6] = (float) (byte)0;
      floatArray1[7] = (float) 1;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = (float) (byte)0;
      floatArray2[1] = (float) (byte)0;
      floatArray2[2] = (float) (byte) (-125);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[1];
      floatArray3[0] = (float) (byte) (-23);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      floatArray4[0] = (float) (byte)32;
      floatArray4[1] = (float) (byte) (-57);
      floatArray4[2] = (float) (byte) (-57);
      floatArray4[3] = (float) (byte)0;
      floatArray4[4] = (float) (byte) (-23);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = (float) (byte)32;
      floatArray5[1] = (float) (byte) (-125);
      floatArray5[2] = (float) (byte) (-125);
      floatArray5[3] = (float) (byte) (-71);
      floatArray5[4] = 1599.99F;
      floatArray5[5] = (float) (byte)119;
      floatArray5[6] = 1021.29F;
      floatArray5[7] = (float) (-454);
      floatArray5[8] = (float) (byte) (-57);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      floatArray6[0] = (float) (byte) (-71);
      floatArray6[1] = 0.5F;
      floatArray6[2] = (float) (byte) (-71);
      floatArray6[3] = (float) (byte)0;
      floatArray6[4] = (float) (byte)32;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[8];
      floatArray7[0] = (float) 1;
      floatArray7[1] = (float) (byte)119;
      floatArray7[2] = (float) (byte)119;
      floatArray7[3] = (float) (byte) (-71);
      floatArray7[4] = (float) (byte)119;
      floatArray7[5] = (float) (byte)0;
      floatArray7[6] = (float) (byte)119;
      floatArray7[7] = (float) (byte) (-23);
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[6];
      floatArray8[0] = 0.0F;
      floatArray8[1] = (float) (byte) (-71);
      floatArray8[2] = (float) (byte)119;
      floatArray8[3] = (float) (byte) (-125);
      floatArray8[4] = (float) (byte) (-71);
      floatArray8[5] = (float) (byte) (-57);
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[8];
      floatArray9[0] = (float) (byte)0;
      floatArray9[1] = (float) (byte)0;
      floatArray9[2] = (float) (byte) (-57);
      floatArray9[3] = (-309.6179F);
      floatArray9[4] = 1021.29F;
      floatArray9[5] = (float) 1;
      floatArray9[6] = (float) (byte) (-57);
      floatArray9[7] = (float) (byte)32;
      floatArray0[8] = floatArray9;
      DataBufferFloat dataBufferFloat0 = new DataBufferFloat(floatArray0, 1);
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        Raster.createPackedRaster((DataBuffer) dataBufferFloat0, 189, (int) (byte)119, 2391, point0);
      } catch(IllegalArgumentException e) {
         //
         // Unsupported data type 4
         //
         verifyException("java.awt.image.Raster", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Border border0 = LineBorder.createGrayLineBorder();
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jInternalFrame0, border0, (-2962), (-2962), 0, (-2962));
      ganttRenderer0.setBaseLegendShape(rectangle0);
      ganttRenderer0.setItemLabelAnchorOffset(2.0);
      ganttRenderer0.setEndPercent(2241.25479057386);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      ganttRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      int int0 = stackedAreaRenderer0.getPassCount();
      boolean boolean0 = ganttRenderer0.equals(stackedAreaRenderer0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 2, 2);
      int int1 = (-1755);
      List list0 = slidingCategoryDataset0.getColumnKeys();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getColumnKey((-1755));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.08, 0.08);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      int int0 = (-3088);
      LegendItem legendItem0 = categoryStepRenderer0.getLegendItem((-1868), (-3088));
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(2861);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2861, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Paint paint0 = fastScatterPlot0.getPaint();
      stackedBarRenderer3D0.setShadowPaint(paint0);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer3D0.getLegendItemLabelGenerator();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = true;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-1930.48672), (-1.0), true);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null);
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }
}
