/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 12:46:25 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.event.TextListener;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.RescaleOp;
import java.math.BigInteger;
import java.text.NumberFormat;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.TemporalAdjuster;
import java.util.Date;
import java.util.EventListener;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JPasswordField;
import javax.swing.JTextArea;
import javax.swing.plaf.basic.BasicEditorPaneUI;
import javax.swing.plaf.synth.SynthListUI;
import javax.swing.plaf.synth.SynthMenuBarUI;
import javax.swing.plaf.synth.SynthTextPaneUI;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.text.JTextComponent;
import javax.swing.text.Position;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickMarkPosition;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.axis.Timeline;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.RangeType;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      NumberAxis numberAxis0 = new NumberAxis("");
      float float0 = numberAxis0.getTickMarkInsideLength();
      int int0 = numberAxis0.calculateVisibleTickCount();
      numberAxis0.setAutoRangeStickyZero(true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAnchor categoryAnchor0 = CategoryAnchor.END;
      int int1 = 2141;
      Paint paint0 = categoryAxis3D0.getTickLabelPaint((Comparable) 0.05);
      int[] intArray0 = new int[3];
      intArray0[0] = 12;
      intArray0[1] = 500;
      intArray0[2] = 2;
      Polygon polygon0 = null;
      try {
        polygon0 = new Polygon(intArray0, intArray0, (-2135));
      } catch(NegativeArraySizeException e) {
         //
         // npoints < 0
         //
         verifyException("java.awt.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.setLabel("org.jfree.chart.renderer.xy.XYAreaRenderer$XYAreaRendererState");
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "_f";
      stringArray0[4] = null;
      stringArray0[5] = "org.jfree.chart.renderer.xy.XYAreaRenderer$XYAreaRendererState";
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getDomainAxisEdge(0);
      // Undeclared exception!
      try { 
        symbolAxis0.selectAutoTickUnit((Graphics2D) null, rectangle2D0, rectangleEdge0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SymbolAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "PvW\\#\"J2Skb";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("PvW#\"J2Skb");
      logarithmicAxis0.setLog10TickLabelsFlag(true);
      double double0 = logarithmicAxis0.calculateLowestVisibleTickValue();
      RectangleInsets rectangleInsets0 = logarithmicAxis0.getLabelInsets();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      cyclicNumberAxis0.centerRange((-1829.2));
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Font font0 = areaRenderer0.getSeriesItemLabelFont(500);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      periodAxis0.setFixedAutoRange(1.0E-5);
      periodAxis0.setVerticalTickLabels(false);
      MeterPlot meterPlot0 = new MeterPlot();
      Font font0 = meterPlot0.getValueFont();
      periodAxis0.setTickLabelFont(font0);
      Color color0 = (Color)WaferMapPlot.DEFAULT_CROSSHAIR_PAINT;
      periodAxis0.setTickMarkPaint(color0);
      Class<CompassPlot> class0 = CompassPlot.class;
      periodAxis0.setMinorTickTimePeriodClass(class0);
      Class<CombinedRangeCategoryPlot> class1 = CombinedRangeCategoryPlot.class;
      periodAxis0.setMajorTickTimePeriodClass(class1);
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.autoAdjustRange();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "I,8HX@cQ1t{UA~";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "I,8HX@cQ1t{UA~";
      stringArray0[4] = "I,8HX@cQ1t{UA~";
      stringArray0[5] = null;
      stringArray0[6] = "I,8HX@cQ1t{UA~";
      stringArray0[7] = "I,8HX@cQ1t{UA~";
      SymbolAxis symbolAxis0 = new SymbolAxis("I,8HX@cQ1t{UA~", stringArray0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(10, 500, 0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1523.3459155));
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, cyclicNumberAxis0.DEFAULT_RANGE);
      double double0 = moduloAxis0.getDisplayStart();
      String string0 = moduloAxis0.getLabel();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.log10TickLabelsFlag = true;
      logarithmicAxis0.setStrictValuesFlag(true);
      int int0 = 0;
      int int1 = 2;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(722, 0, byteArray0, (-1688), true);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue((Comparable) 0.05, (Comparable) 1.0E-8);
      Range range0 = periodAxis0.getRange();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", mockSimpleDateFormat0, mockSimpleDateFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.05, false, standardXYToolTipGenerator0);
      StandardXYToolTipGenerator standardXYToolTipGenerator1 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      Paint paint0 = candlestickRenderer0.getItemPaint(2, 2);
      periodAxis0.setTickMarkPaint(paint0);
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      periodAxis0.setRange(range1, true, true);
      Range range2 = periodAxis0.getRange();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Layer.FOREGROUND");
      boolean boolean0 = numberAxis3D0.getAutoRangeStickyZero();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      int int0 = 0;
      categoryAxis3D0.setVisible(false);
      MockDate mockDate0 = new MockDate((-1571), (-1), (-1571), (-1571), (-1387), (-1));
      // Undeclared exception!
      try { 
        SerialDate.createInstance((Date) mockDate0);
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      Stroke stroke0 = dateAxis0.getTickMarkStroke();
      Plot plot0 = dateAxis0.getPlot();
      String[] stringArray0 = new String[2];
      dateAxis0.setAutoRange(false);
      stringArray0[0] = null;
      stringArray0[1] = "HibbV^s)+";
      SymbolAxis symbolAxis0 = new SymbolAxis("HibbV^s)+", stringArray0);
      boolean boolean0 = symbolAxis0.equals(stroke0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(500, "HibbV^s)+");
      TickUnitSource tickUnitSource0 = DateAxis.createStandardDateTickUnits((TimeZone) simpleTimeZone0);
      DateAxis dateAxis1 = new DateAxis((String) null, simpleTimeZone0);
      Date date0 = dateAxis1.getMinimumDate();
      Date date1 = dateAxis1.getMaximumDate();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(500, 2.0F, 3.0, 0.05);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(3018);
      BasicEditorPaneUI basicEditorPaneUI0 = new BasicEditorPaneUI();
      JPasswordField jPasswordField0 = new JPasswordField();
      // Undeclared exception!
      try { 
        basicEditorPaneUI0.modelToView((JTextComponent) jPasswordField0, 500);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicTextUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      boolean boolean0 = true;
      JFreeChart jFreeChart0 = new JFreeChart("", symbolAxis0.DEFAULT_AXIS_LABEL_FONT, spiderWebPlot0, true);
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      symbolAxis0.setLabelInsets(rectangleInsets0);
      String[] stringArray1 = symbolAxis0.getSymbols();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("A;uZ#py4x5P~-7/1=} ");
      int[] intArray0 = null;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1206, 0, (int[]) null, 0, true, 394, 0);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0, "%qaJfXEDh`");
      cyclicNumberAxis0.setTickMarkOutsideLength(0.0F);
      Range range0 = cyclicNumberAxis0.getDefaultAutoRange();
      ModuloAxis moduloAxis0 = new ModuloAxis("%qaJfXEDh`", range0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      Object object0 = categoryAxis3D0.clone();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      cyclicNumberAxis0.setVerticalTickLabels(true);
      Paint paint0 = cyclicNumberAxis0.getAxisLinePaint();
      RangeType rangeType0 = cyclicNumberAxis0.getRangeType();
      RangeType rangeType1 = cyclicNumberAxis0.getRangeType();
      CategoryAxis categoryAxis0 = new CategoryAxis("NMjq,");
      double double0 = categoryAxis0.getUpperMargin();
      cyclicNumberAxis0.setLabelPaint(categoryAxis0.DEFAULT_TICK_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      PiePlot3D piePlot3D0 = new PiePlot3D();
      subCategoryAxis0.addChangeListener(piePlot3D0);
      subCategoryAxis0.setVisible(true);
      Paint paint0 = subCategoryAxis0.getSubLabelPaint();
      CategoryLabelPositions categoryLabelPositions0 = new CategoryLabelPositions();
      subCategoryAxis0.setCategoryLabelPositions(categoryLabelPositions0);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(subCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("\"kDj3O>cg/A53i/wIyH", piePlot3D0);
      subCategoryAxis0.setUpperMargin(0.0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.handleClick(10, 0, chartRenderingInfo0);
      axisChangeEvent0.setChart(jFreeChart0);
      subCategoryAxis0.notifyListeners(axisChangeEvent0);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      boolean boolean0 = periodAxis0.equals(paint0);
      periodAxis0.setTickMarksVisible(false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      TextListener textListener0 = mock(TextListener.class, new ViolatedAssumptionAnswer());
      TextListener textListener1 = AWTEventMulticaster.remove(textListener0, textListener0);
      TextListener textListener2 = AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      boolean boolean0 = dateAxis0.hasListener((EventListener) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C} @:IU4L~'kH;T8";
      stringArray0[1] = "C} @:IU4L~'kH;T8";
      stringArray0[2] = "C} @:IU4L~'kH;T8";
      stringArray0[3] = "C} @:IU4L~'kH;T8";
      stringArray0[4] = "C} @:IU4L~'kH;T8";
      stringArray0[5] = "CH";
      stringArray0[6] = "";
      stringArray0[7] = "C} @:IU4L~'kH;T8";
      stringArray0[8] = "C} @:IU4L~'kH;T8";
      SymbolAxis symbolAxis0 = new SymbolAxis("C} @:IU4L~'kH;T8", stringArray0);
      Font font0 = symbolAxis0.getLabelFont();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("OO3;");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Font font0 = defaultPolarItemRenderer0.getItemLabelFont((-2252), 500);
      numberAxis0.setTickLabelFont(font0);
      float float0 = numberAxis0.getTickMarkInsideLength();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2252), 0.0, "OO3;");
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit(500, 500);
      } catch(IllegalArgumentException e) {
         //
         // DateTickUnit.getMillisecondCount() : unit must be one of the constants YEAR, MONTH, DAY, HOUR, MINUTE, SECOND or MILLISECOND defined in the DateTickUnit class. Do *not* use the constants defined in java.util.Calendar.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, 3.0, "y[^|'bygs8.pUKpS");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0);
      XYPlot xYPlot0 = candlestickRenderer0.getPlot();
      cyclicNumberAxis0.setPlot((Plot) null);
      boolean boolean0 = cyclicNumberAxis0.isBoundMappedToLastCycle();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.util.SortOrder");
      Object object0 = categoryAxis0.clone();
      DateAxis dateAxis0 = new DateAxis();
      Timeline timeline0 = dateAxis0.getTimeline();
      dateAxis0.setTimeline(timeline0);
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits();
      logarithmicAxis0.setFixedDimension(0.2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("/`<lK&$,");
      extendedCategoryAxis0.setLabel("/`<lK&$,");
      extendedCategoryAxis0.setLowerMargin(0.0);
      boolean boolean0 = extendedCategoryAxis0.isTickLabelsVisible();
      extendedCategoryAxis0.clearCategoryLabelToolTips();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("/`<lK&$,", simpleTimeZone0);
      SynthListUI synthListUI0 = new SynthListUI();
      Stack<ThermometerPlot> stack0 = new Stack<ThermometerPlot>();
      JList<ThermometerPlot> jList0 = new JList<ThermometerPlot>(stack0);
      // Undeclared exception!
      try { 
        synthListUI0.getCellBounds(jList0, 500, 500);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicListUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.axis.CategoryLabelPosition", simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(dateAxis0.DEFAULT_ANCHOR_DATE, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1524.58944399, 500);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(4.0, true);
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, dateAxis0, cyclicNumberAxis0, clusteredXYBarRenderer0);
      JTableHeader jTableHeader0 = new JTableHeader((TableColumnModel) null);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(12);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge((-479));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedRangeAxisSpace();
      // Undeclared exception!
      try { 
        dateAxis0.reserveSpace((Graphics2D) null, xYPlot0, rectangle0, rectangleEdge0, (AxisSpace) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("\"3|'");
      boolean boolean0 = dateAxis0.equals(extendedCategoryAxis0);
      Object object0 = dateAxis0.clone();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F);
      ConvolveOp convolveOp0 = new ConvolveOp((Kernel) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      int int0 = (-1545);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(500, (-1545), (double) 0.0F, 1562.90790041941, chartRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Width (500) and height (-1545) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 1.0E-7);
      RectangleInsets rectangleInsets0 = cyclicNumberAxis0.getLabelInsets();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Requires h > 0.");
      int int0 = (-2011);
      Line2D.Double line2D_Double0 = new Line2D.Double(0.0, 1.0E-7, 0.0, 4.0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge();
      double double0 = categoryAxis3D0.getCategoryMiddle(0, (-2011), rectangle2D0, rectangleEdge0);
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeCategoryPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(756.762F, 1.0F, renderingHints0);
      int int1 = 10;
      int int2 = 0;
      int[] intArray0 = new int[0];
      BigInteger bigInteger0 = BigInteger.TEN;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(15, 0, intArray0, 0, 0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // Map size (0) must be >= 1
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("T-[m=3?G");
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_OUTLINE_PAINT;
      logarithmicAxis0.setLabelPaint(color0);
      logarithmicAxis0.setAllowNegativesFlag(true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "X3s)iM~]EXsx_<";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("X3s)iM~]EXsx_<");
      Font font0 = subCategoryAxis0.DEFAULT_TICK_LABEL_FONT.deriveFont(1073.35F);
      subCategoryAxis0.setSubLabelFont(font0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("X3s)iM~]EXsx_<");
      double double0 = logarithmicAxis0.switchedLog10(1073.35F);
      subCategoryAxis0.setLabel("X3s)iM~]EXsx_<");
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAnchor categoryAnchor0 = combinedDomainCategoryPlot0.getDomainGridlinePosition();
      int int0 = 0;
      SynthMenuBarUI synthMenuBarUI0 = new SynthMenuBarUI();
      ImageIcon imageIcon0 = null;
      try {
        imageIcon0 = new ImageIcon((String) null, (String) null);
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
         verifyException("java.io.FilePermission", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.setAutoRangeStickyZero(false);
      Font font0 = numberAxis0.getTickLabelFont();
      DateAxis dateAxis0 = new DateAxis();
      String string0 = "Pg[=|9$t7HoVX5s";
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      // Undeclared exception!
      try { 
        ZoneId.ofOffset("Pg[=|9$t7HoVX5s", zoneOffset0);
      } catch(IllegalArgumentException e) {
         //
         // prefix should be GMT, UTC or UT, is: Pg[=|9$t7HoVX5s
         //
         verifyException("java.time.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      boolean boolean0 = symbolAxis0.isTickMarksVisible();
      int int0 = (-1725);
      int int1 = 110;
      symbolAxis0.setAutoRangeStickyZero(true);
      Second second0 = null;
      try {
        second0 = new Second((-1725), (-1725), 110, 2, 500, 110);
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Minute minute0 = new Minute();
      Hour hour0 = minute0.getHour();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      minute0.peg(mockGregorianCalendar0);
      RegularTimePeriod regularTimePeriod1 = minute0.next();
      long long0 = regularTimePeriod0.getSerialIndex();
      extendedCategoryAxis0.addSubLabel(regularTimePeriod0, "");
      boolean boolean0 = extendedCategoryAxis0.isTickMarksVisible();
      double double0 = extendedCategoryAxis0.getCategoryMargin();
      Font font0 = extendedCategoryAxis0.getSubLabelFont();
      minute0.peg(mockGregorianCalendar0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("/4{];n");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.setAutoTickUnitSelection(false);
      logarithmicAxis0.setAutoRangeIncludesZero(true);
      logarithmicAxis0.setTickMarksVisible(true);
      double double0 = logarithmicAxis0.adjustedPow10(0.0);
      String string0 = logarithmicAxis0.makeTickLabel(0.0);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      Class class0 = periodAxis0.getAutoRangeTimePeriodClass();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.configure();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1129.2042, "\"b`B|");
      NumberTickUnit numberTickUnit0 = cyclicNumberAxis0.getTickUnit();
      numberAxis3D0.setTickUnit(numberTickUnit0, true, false);
      numberAxis3D0.setTickLabelPaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      numberAxis3D0.setLowerBound(0.0);
      boolean boolean0 = numberAxis3D0.getAutoRangeStickyZero();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("1");
      Font font0 = SpiderWebPlot.DEFAULT_LABEL_FONT;
      categoryAxis3D0.setTickLabelFont(font0);
      categoryAxis3D0.setLabelURL("");
      categoryAxis3D0.setMaximumCategoryLabelLines((-2432));
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("", (RegularTimePeriod) null, (RegularTimePeriod) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("N|-fMme|[Dm>3D,oz");
      DateAxis dateAxis0 = new DateAxis();
      Range range0 = dateAxis0.getRange();
      dateAxis0.autoAdjustRange();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("/WG;}&");
      double double0 = numberAxis3D0.valueToJava2D(0.05, (Rectangle2D) null, (RectangleEdge) null);
      numberAxis3D0.setAutoRangeStickyZero(false);
      String string0 = numberAxis3D0.getLabel();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      boolean boolean0 = logarithmicAxis0.getExpTickLabelsFlag();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 1.5707963267948966;
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.5707963267948966, "");
      cyclicNumberAxis0.setTickLabelsVisible(true);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS.createInsetRectangle((Rectangle2D) null, true, false);
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-4, (-2119.1));
      Paint paint0 = cyclicNumberAxis0.getTickMarkPaint();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("%]UOHx8 YO{r1[Q>");
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Stroke stroke0 = minMaxCategoryRenderer0.getGroupStroke();
      extendedCategoryAxis0.setAxisLineStroke(stroke0);
      extendedCategoryAxis0.addSubLabel("%]UOHx8 YO{r1[Q>", ";a\u0006j)LcL");
      String string0 = "nbyWZ2A2Sat[t,)hll";
      int int0 = 57;
      int int1 = 1347;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(57, "dY`\"<3}^77fp~", 57, (-367), 57, 57, 57, 57, 1347, 57);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 57
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      boolean boolean0 = categoryAxis0.isAxisLineVisible();
      int int0 = (-1030);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(65);
      // Undeclared exception!
      try { 
        SerialDate.addYears((-2084), spreadsheetDate0);
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("uQ_j-[p*8A}/jDsvy", (Range) null);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("Ye1 (]b's 4b!U", numberFormat0);
      areaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
      CategoryPlot categoryPlot0 = areaRenderer0.getPlot();
      moduloAxis0.removeChangeListener((AxisChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      double double0 = categoryAxis3D0.getLabelAngle();
      String string0 = "SansSerif";
      Minute minute0 = null;
      try {
        minute0 = new Minute(0, (-1588), 0, (-4159), (-4159));
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      numberAxis0.addChangeListener((AxisChangeListener) null);
      Object object0 = numberAxis0.clone();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      RegularTimePeriod regularTimePeriod0 = periodAxis0.getFirst();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-1), 500, 0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.clearCategoryLabelToolTips();
      Font font0 = TextTitle.DEFAULT_FONT;
      categoryAxis3D0.setLabelFont(font0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("geHnjT'B0<^!C>s|-ps");
      double double0 = logarithmicAxis0.adjustedPow10(0.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.0F);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      NumberFormat numberFormat0 = meterPlot0.getTickLabelFormat();
      cyclicNumberAxis0.setNumberFormatOverride(numberFormat0);
      Paint paint0 = cyclicNumberAxis0.getAdvanceLinePaint();
      String string0 = cyclicNumberAxis0.getLabelToolTip();
      DateAxis dateAxis0 = new DateAxis((String) null);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(0, 500, 270);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 270
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = locale0.hasExtensions();
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits(locale0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("g@Q'TUqMR_\"ruY");
      RectangleInsets rectangleInsets0 = subCategoryAxis0.getTickLabelInsets();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("u");
      subCategoryAxis0.setLowerMargin(0.0);
      Font font0 = subCategoryAxis0.getTickLabelFont();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1202.265038), "PQWx#u#6*");
      boolean boolean0 = cyclicNumberAxis0.isAdvanceLineVisible();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3950.947463009631), (-3950.947463009631));
      cyclicNumberAxis0.setLabelToolTip("GbS8a:M");
      String string0 = "SansSerif";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("SansSerif");
      Font font0 = subCategoryAxis0.getSubLabelFont();
      DateAxis dateAxis0 = new DateAxis();
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 500;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2.0F;
      floatArray0[5] = 2.0F;
      floatArray0[6] = 2.0F;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      Color color0 = (Color)BarRenderer3D.DEFAULT_WALL_PAINT;
      categoryAxis0.setAxisLinePaint(color0);
      stringArray0[6] = null;
      stringArray0[7] = null;
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      String[] stringArray1 = symbolAxis0.getSymbols();
      boolean boolean0 = categoryAxis0.equals(symbolAxis0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("", multiplePiePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(800, 800);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "Null 'stroke' argument.";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'stroke' argument.");
      double double0 = logarithmicAxis0.computeLogFloor(0.0);
      Color color0 = (Color)Axis.DEFAULT_TICK_MARK_PAINT;
      logarithmicAxis0.setAxisLinePaint(color0);
      logarithmicAxis0.configure();
      // Undeclared exception!
      try { 
        MockInstant.with((Instant) null, (TemporalAdjuster) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getBaseStroke();
      dateAxis0.setTickMarkStroke(stroke0);
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      // Undeclared exception!
      try { 
        dateAxis0.setRangeWithMargins((Range) null, false, false);
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(" U");
      subCategoryAxis0.clearCategoryLabelToolTips();
      Paint paint0 = subCategoryAxis0.getSubLabelPaint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " U";
      stringArray0[1] = " U";
      stringArray0[2] = " U";
      stringArray0[3] = " U";
      stringArray0[4] = "org.jfree.data.time.Second";
      stringArray0[5] = " U";
      stringArray0[6] = " U";
      stringArray0[7] = " U";
      stringArray0[8] = " U";
      SymbolAxis symbolAxis0 = new SymbolAxis(" U", stringArray0);
      double double0 = 3.0;
      SynthTextPaneUI synthTextPaneUI0 = new SynthTextPaneUI();
      JTextArea jTextArea0 = new JTextArea(500, 500);
      Position.Bias position_Bias0 = Position.Bias.Forward;
      // Undeclared exception!
      try { 
        synthTextPaneUI0.modelToView((JTextComponent) jTextArea0, 1, position_Bias0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicTextUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Object object0 = categoryAxis3D0.clone();
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickMarkPosition((DateTickMarkPosition) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'position' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("WN:1J -LG2&'[q1?c");
      periodAxis0.setAxisLineVisible(true);
      String string0 = periodAxis0.getLabelURL();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setStrictValuesFlag(false);
      double double0 = logarithmicAxis0.adjustedPow10(0.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1730.8));
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("pPw1IC", thermometerPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(87, (-4455), 0, (ChartRenderingInfo) null);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.5707963267948966);
      double double0 = 3.141592653589793;
      cyclicNumberAxis0.setUpperBound(3.141592653589793);
      cyclicNumberAxis0.setAdvanceLineVisible(false);
      Stroke stroke0 = cyclicNumberAxis0.getTickMarkStroke();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, waferMapPlot0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }
}
