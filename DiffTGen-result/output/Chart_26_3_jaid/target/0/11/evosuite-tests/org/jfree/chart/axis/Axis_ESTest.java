/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 12:50:09 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.lang.reflect.Array;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.Date;
import java.util.EventListener;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.DebugGraphics;
import javax.swing.JTabbedPane;
import javax.swing.JViewport;
import javax.swing.plaf.multi.MultiTabbedPaneUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickMarkPosition;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PieLabelDistributor;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.RangeType;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.time.DateRange;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("SansSerif");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      extendedCategoryAxis0.removeChangeListener(thermometerPlot0);
      Font font0 = extendedCategoryAxis0.getTickLabelFont();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "E<ow;cL[i";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("E<ow;cL[i");
      Font font0 = TextFragment.DEFAULT_FONT;
      Font font1 = font0.deriveFont(751);
      subCategoryAxis0.setTickLabelsVisible(false);
      subCategoryAxis0.setTickLabelFont(font0);
      subCategoryAxis0.setAxisLineVisible(false);
      SymbolAxis symbolAxis0 = null;
      try {
        symbolAxis0 = new SymbolAxis("E<ow;cL[i", (String[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      RangeType rangeType0 = RangeType.POSITIVE;
      cyclicNumberAxis0.setRangeType(rangeType0);
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits();
      double double1 = cyclicNumberAxis0.getOffset();
      int int0 = cyclicNumberAxis0.calculateVisibleTickCount();
      boolean boolean0 = cyclicNumberAxis0.isAxisLineVisible();
      String string0 = "Null 'paint' argument.";
      DateAxis dateAxis0 = new DateAxis("A`=p%/+QyXu0N(7+R");
      MockDate mockDate0 = new MockDate();
      DateFormat dateFormat0 = dateAxis0.getDateFormatOverride();
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit((-279), 500, (DateFormat) null);
      } catch(IllegalArgumentException e) {
         //
         // DateTickUnit.getMillisecondCount() : unit must be one of the constants YEAR, MONTH, DAY, HOUR, MINUTE, SECOND or MILLISECOND defined in the DateTickUnit class. Do *not* use the constants defined in java.util.Calendar.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("?GY6H");
      logarithmicAxis0.setTickLabelsVisible(true);
      String string0 = logarithmicAxis0.makeTickLabel(0.0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.lookupSeriesStroke(2880);
      Stroke stroke1 = defaultPolarItemRenderer0.getBaseStroke();
      logarithmicAxis0.setAxisLineStroke(stroke1);
      logarithmicAxis0.setRangeWithMargins(1000.0, 2828.1);
      logarithmicAxis0.setAutoRangeNextLogFlag(true);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.chart.renderer.xy.XYLineAndShapeRenderer");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-100, (-1584.562), "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer");
      cyclicNumberAxis0.setAdvanceLineStroke(subCategoryAxis0.DEFAULT_AXIS_LINE_STROKE);
      logarithmicAxis0.setTickUnit(cyclicNumberAxis0.DEFAULT_TICK_UNIT, true, true);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      PeriodAxisLabelInfo[] periodAxisLabelInfoArray0 = periodAxis0.getLabelInfo();
      DateAxis dateAxis0 = new DateAxis();
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Date date0 = dateAxis0.getMaximumDate();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("2(39Dh<W#&7F#");
      subCategoryAxis0.setVisible(true);
      Object object0 = subCategoryAxis0.clone();
      PeriodAxis periodAxis0 = new PeriodAxis("2(39Dh<W#&7F#");
      periodAxis0.setAxisLineVisible(true);
      Class<CompassPlot> class0 = CompassPlot.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      boolean boolean0 = periodAxis0.isMinorTickMarksVisible();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("2(39Dh<W#&7F#");
      int int0 = 0;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(500, 0, (float[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("2Mh.EuN7o/Y_VF,W$");
      Paint paint0 = extendedCategoryAxis0.getTickLabelPaint();
      PeriodAxis periodAxis0 = new PeriodAxis("2Mh.EuN7o/Y_VF,W$");
      Font font0 = PiePlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((String) null, font0, (Plot) null, true);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      PiePlot3D piePlot3D0 = new PiePlot3D();
      extendedCategoryAxis0.setTickMarkInsideLength(10);
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor((-4110));
      DateAxis dateAxis0 = new DateAxis("");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      defaultValueDataset0.addChangeListener(piePlot3D0);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(dateAxis0, defaultValueDataset0);
      piePlot3D0.datasetChanged(datasetChangeEvent0);
      piePlot3D0.setLabelDistributor(pieLabelDistributor0);
      Paint paint0 = piePlot3D0.getLabelShadowPaint();
      extendedCategoryAxis0.setSubLabelPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.log10TickLabelsFlag = true;
      boolean boolean0 = logarithmicAxis0.getLog10TickLabelsFlag();
      Range range0 = logarithmicAxis0.getRange();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(177.78738829, (String) null);
      cyclicNumberAxis0.setAdvanceLineVisible(true);
      cyclicNumberAxis0.offset = 40.2339421839;
      cyclicNumberAxis0.setAdvanceLineStroke(logarithmicAxis0.DEFAULT_TICK_MARK_STROKE);
      Object object0 = logarithmicAxis0.clone();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickMarkOutsideLength(2.0F);
      String string0 = categoryAxis0.getCategoryLabelToolTip(500);
      int int0 = categoryAxis0.getMaximumCategoryLabelLines();
      categoryAxis0.addCategoryLabelToolTip(true, (String) null);
      Graphics2D graphics2D0 = null;
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, "&$VIjJsRL.i8+Y*}*", "");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-933.2951425));
      cyclicNumberAxis0.setAutoRangeStickyZero(true);
      String string0 = "u9JIa$q";
      boolean boolean0 = cyclicNumberAxis0.equals("u9JIa$q");
      TextBox textBox0 = new TextBox("u9JIa$q");
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      cyclicNumberAxis0.setTickLabelInsets(rectangleInsets0);
      cyclicNumberAxis0.setAutoRange(false);
      DateAxis dateAxis0 = null;
      try {
        dateAxis0 = new DateAxis("\"EwBaU0Ad7y|", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Color color0 = Color.BLUE;
      Color color1 = Color.getColor("", 1436);
      numberAxis3D0.setTickMarkPaint(color0);
      String string0 = numberAxis3D0.getLabelURL();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.setAutoRangeNextLogFlag(true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setTickMarksVisible(true);
      Font font0 = extendedCategoryAxis0.getSubLabelFont();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      // Undeclared exception!
      try { 
        periodAxis0.setLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(455.98, (-1192.69788), "Null 'state' argument.");
      cyclicNumberAxis0.setAxisLineVisible(true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.data.time.TimePeriodFormatException");
      periodAxis0.configure();
      Stroke stroke0 = periodAxis0.getAxisLineStroke();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.data.time.TimePeriodFormatException");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      RectangleInsets rectangleInsets0 = combinedDomainCategoryPlot0.getInsets();
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      Rectangle2D rectangle2D0 = rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0, true, true);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      double double0 = extendedCategoryAxis0.getCategoryMiddle(0, 506, rectangle2D0, rectangleEdge0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 0.0);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setAutoRangeMinimumSize(0.0, true);
      } catch(IllegalArgumentException e) {
         //
         // NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'stroke' argument.");
      logarithmicAxis0.configure();
      logarithmicAxis0.setLabel("Null 'stroke' argument.");
      logarithmicAxis0.setTickLabelsVisible(false);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 1.0E-100, ":l[9SDLP?");
      Color color0 = Color.getColor(":l[9SDLP?", 500);
      cyclicNumberAxis0.setAdvanceLinePaint(color0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(periodAxis0);
      periodAxis0.notifyListeners(axisChangeEvent0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, "Null 'font' argument.");
      Shape shape0 = cyclicNumberAxis0.getUpArrow();
      periodAxis0.setLeftArrow(shape0);
      periodAxis0.setLabelURL("?@.0{jUX'b=gr\u0001c");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("5HuT\"v*1%n");
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(0, 500, 6015);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 6015
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setLabelURL((String) null);
      // Undeclared exception!
      try { 
        categoryAxis0.getCategoryLabelToolTip((Comparable) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0, 1.0);
      cyclicNumberAxis0.setAutoRangeIncludesZero(true);
      cyclicNumberAxis0.setVisible(false);
      NumberFormat numberFormat0 = cyclicNumberAxis0.getNumberFormatOverride();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("%@.iM-vq$");
      double double0 = subCategoryAxis0.getCategoryMargin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3156.0298249), "Jeremy Bowman");
      cyclicNumberAxis0.setFixedAutoRange((-3156.0298249));
      cyclicNumberAxis0.setLowerBound((-3156.0298249));
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Paint paint0 = defaultDrawingSupplier0.getNextFillPaint();
      cyclicNumberAxis0.advanceLinePaint = paint0;
      Paint paint1 = defaultDrawingSupplier0.getNextPaint();
      Object object0 = cyclicNumberAxis0.clone();
      String string0 = cyclicNumberAxis0.getLabelToolTip();
      cyclicNumberAxis0.setLowerMargin((-3156.0298249));
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      Font font0 = extendedCategoryAxis0.getSubLabelFont();
      MockDate mockDate0 = new MockDate(500, 500, (-385), 244, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Millisecond millisecond0 = new Millisecond(mockDate0, zoneInfo0);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null, millisecond0, millisecond0);
      Stroke stroke0 = periodAxis0.getMinorTickMarkStroke();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("<");
      numberAxis3D0.setFixedDimension(2.0);
      String string0 = numberAxis3D0.getLabelURL();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
      categoryAxis0.setLabelInsets(rectangleInsets0);
      DateRange dateRange0 = new DateRange(0.2, 0.2);
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, dateRange0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      moduloAxis0.setNumberFormatOverride(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      numberAxis3D0.addChangeListener(multiplePiePlot0);
      String string0 = "";
      numberAxis3D0.setLabelToolTip("");
      String string1 = "w;?c\\MH1#";
      int int0 = 0;
      int int1 = (-621);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(500, "w;?cMH1#", 2, 2, 2, 0, 4538, (-621), 10, 500, 4538);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 4538
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("Krzysztof Paz");
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedAreaRenderer0.getBaseToolTipGenerator();
      stackedAreaRenderer0.setSeriesToolTipGenerator(500, (CategoryToolTipGenerator) null);
      Stroke stroke0 = stackedAreaRenderer0.getSeriesStroke(10);
      // Undeclared exception!
      try { 
        dateAxis0.setTickMarkStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis((String) null, zoneInfo0);
      boolean boolean0 = zoneInfo0.observesDaylightTime();
      CompassPlot compassPlot0 = new CompassPlot();
      boolean boolean1 = dateAxis0.equals(compassPlot0);
      Paint paint0 = dateAxis0.getTickLabelPaint();
      dateAxis0.setTickLabelPaint(compassPlot0.DEFAULT_OUTLINE_PAINT);
      Hour hour0 = new Hour();
      PeriodAxis periodAxis0 = new PeriodAxis("wS03gIaag", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
      periodAxis0.setMinorTickMarkPaint(dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 500;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 10, intArray0, (-322), true, 1921, (-322));
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Object object0 = dateAxis0.clone();
      String string0 = null;
      dateAxis0.setLabelToolTip((String) null);
      long long0 = 0L;
      boolean boolean0 = dateAxis0.isHiddenValue(0L);
      boolean boolean1 = dateAxis0.isTickMarksVisible();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'transformer' attribute.");
      String string1 = "";
      Graphics2D graphics2D0 = null;
      MultiTabbedPaneUI multiTabbedPaneUI0 = new MultiTabbedPaneUI();
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      // Undeclared exception!
      try { 
        multiTabbedPaneUI0.getTabBounds(jTabbedPane0, 500);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      NumberFormat numberFormat0 = numberAxis0.getNumberFormatOverride();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      numberAxis0.setPlot(piePlot3D0);
      ModuloAxis moduloAxis0 = new ModuloAxis("!x8M", numberAxis0.DEFAULT_RANGE);
      Line2D.Double line2D_Double0 = new Line2D.Double(0.25, 0.0F, 1.0, 1.0F);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      double double0 = moduloAxis0.java2DToValue(0.0F, rectangle0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'font' argument.", combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2575, 10, 0.0, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 10, 10, 68, 68, 0, true, true, true, false, true, true);
      Rectangle rectangle0 = chartPanel0.getBounds();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = categoryPlot0.getDomainAxisLocation(25);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      numberAxis0.selectAutoTickUnit(graphics2D0, rectangle0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      boolean boolean0 = numberAxis3D0.isTickMarksVisible();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setupNumberFmtObj();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("N9");
      DateTickMarkPosition dateTickMarkPosition0 = dateAxis0.getTickMarkPosition();
      dateAxis0.setTickMarkOutsideLength((-833.7F));
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 2.0);
      cyclicNumberAxis0.period = 1210.27172628;
      cyclicNumberAxis0.setBoundMappedToLastCycle(false);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      boolean boolean0 = zoneInfo0.observesDaylightTime();
      dateAxis0.setTimeZone(zoneInfo0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setupSmallLogFlag();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("N9", logarithmicAxis0.DEFAULT_AXIS_LABEL_FONT, thermometerPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 12, 1, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      BorderArrangement borderArrangement0 = new BorderArrangement();
      LegendTitle legendTitle0 = new LegendTitle(thermometerPlot0, borderArrangement0, (Arrangement) null);
      RectangleEdge rectangleEdge0 = legendTitle0.getPosition();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        categoryAxis3D0.draw(graphics2D0, 0.05, rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2414.445155), "UV*[tA%1{P2Q>x*t$j");
      cyclicNumberAxis0.setBoundMappedToLastCycle(false);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("UV*[tA%1{P2Q>x*t$j");
      // Undeclared exception!
      try { 
        NumberAxis.createStandardTickUnits((Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits();
      String string0 = null;
      Minute minute0 = new Minute();
      Date date0 = minute0.getStart();
      PeriodAxis periodAxis0 = new PeriodAxis((String) null, minute0, minute0, minute0.DEFAULT_TIME_ZONE);
      boolean boolean0 = periodAxis0.hasListener((EventListener) null);
      periodAxis0.resizeRange(388.86611073741);
      Object object0 = periodAxis0.clone();
      DateAxis dateAxis0 = new DateAxis();
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      dateAxis0.setTimeline(segmentedTimeline0);
      dateAxis0.setMinimumDate(date0);
      dateAxis0.autoAdjustRange();
      periodAxis0.setFirst(minute0);
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, dateAxis0.DEFAULT_RANGE);
      // Undeclared exception!
      try { 
        moduloAxis0.setRange(242.27023, 2.5E-7);
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (242.27023) <= upper (2.5E-7).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "mkXW-";
      TimeZone timeZone0 = null;
      DateAxis dateAxis0 = null;
      try {
        dateAxis0 = new DateAxis("mkXW-", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      Locale locale0 = new Locale("~e", "", "~e");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      String string0 = numberTickUnit0.valueToString(0.0F);
      NumberFormat numberFormat1 = NumberFormat.getNumberInstance();
      numberAxis3D0.setNumberFormatOverride(numberFormat0);
      String string1 = numberTickUnit0.valueToString(0.0);
      numberAxis3D0.setTickUnit(numberTickUnit0, true, true);
      NumberFormat numberFormat2 = numberAxis3D0.getNumberFormatOverride();
      boolean boolean0 = numberAxis3D0.equals(numberTickUnit0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(500);
      PeriodAxis periodAxis0 = new PeriodAxis("0", fixedMillisecond0, fixedMillisecond0);
      boolean boolean1 = false;
      DebugGraphics debugGraphics0 = new DebugGraphics();
      int[] intArray0 = new int[9];
      intArray0[0] = 500;
      intArray0[1] = 500;
      intArray0[2] = 500;
      intArray0[3] = 500;
      intArray0[4] = 500;
      intArray0[5] = 500;
      intArray0[6] = 500;
      intArray0[7] = 500;
      intArray0[8] = 500;
      Polygon polygon0 = null;
      try {
        polygon0 = new Polygon(intArray0, intArray0, 1773);
      } catch(IndexOutOfBoundsException e) {
         //
         // npoints > xpoints.length || npoints > ypoints.length
         //
         verifyException("java.awt.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Date date0 = dateAxis0.getMaximumDate();
      int int0 = (-2144);
      // Undeclared exception!
      try { 
        MockDateFormat.getDateInstance((-1556), (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1556
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Shape shape0 = null;
      // Undeclared exception!
      try { 
        dateAxis0.setLeftArrow((Shape) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'arrow' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 1219.9;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 1219.9);
      Range range0 = cyclicNumberAxis0.getRange();
      cyclicNumberAxis0.setFixedAutoRange(1219.9);
      boolean boolean0 = cyclicNumberAxis0.isAdvanceLineVisible();
      Button button0 = null;
      try {
        button0 = new Button();
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("dialog");
      Comparable<NumberAxis>[] comparableArray0 = (Comparable<NumberAxis>[]) Array.newInstance(Comparable.class, 9);
      int int0 = 19;
      MockDate mockDate0 = new MockDate((-739), (-2158), 0, (-2158), 19, (-739));
      Minute minute0 = null;
      try {
        minute0 = new Minute(mockDate0);
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }
}
