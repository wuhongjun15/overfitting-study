/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:00:08 GMT 2020
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.IllegalComponentStateException;
import java.awt.Paint;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.awt.image.LookupOp;
import java.awt.image.ShortLookupTable;
import java.io.IOException;
import java.text.DateFormatSymbols;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.JList;
import javax.swing.plaf.multi.MultiListUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.util.GradientPaintTransformType;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.data.Range;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYPlot_ESTest extends XYPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      int int0 = 255;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)4;
      byte byte2 = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)113;
      byteArray0[8] = (byte) (-89);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(500, 255, byteArray0, byteArray0, byteArray0);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("^d");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(dateAxis0.DEFAULT_TICK_MARK_PAINT);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      combinedRangeXYPlot0.setDataset((XYDataset) xYTaskDataset0);
      combinedRangeXYPlot0.setWeight(500);
      short[][] shortArray0 = new short[8][4];
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)0;
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[1];
      shortArray2[0] = (short)0;
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[5];
      shortArray3[0] = (short)0;
      shortArray3[1] = (short)0;
      shortArray3[2] = (short)0;
      shortArray3[3] = (short)0;
      shortArray3[4] = (short)0;
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[6];
      shortArray4[0] = (short)0;
      shortArray4[1] = (short)0;
      shortArray4[2] = (short)0;
      shortArray4[3] = (short)0;
      shortArray4[4] = (short)0;
      shortArray4[5] = (short)0;
      shortArray0[3] = shortArray4;
      short[] shortArray5 = new short[6];
      shortArray5[0] = (short)0;
      shortArray5[1] = (short)6;
      shortArray5[2] = (short)0;
      shortArray5[3] = (short)0;
      shortArray5[4] = (short)0;
      shortArray5[5] = (short)0;
      shortArray0[4] = shortArray5;
      short[] shortArray6 = new short[8];
      shortArray6[0] = (short)6;
      shortArray6[1] = (short)0;
      shortArray6[2] = (short)0;
      shortArray6[3] = (short)0;
      shortArray6[4] = (short)6;
      shortArray6[5] = (short)6;
      shortArray6[6] = (short)0;
      shortArray6[7] = (short)0;
      shortArray0[5] = shortArray6;
      short[] shortArray7 = new short[1];
      shortArray7[0] = (short)0;
      shortArray0[6] = shortArray7;
      short[] shortArray8 = new short[5];
      shortArray8[0] = (short)6;
      shortArray8[1] = (short)6;
      shortArray8[2] = (short)0;
      shortArray8[3] = (short)0;
      shortArray8[4] = (short)0;
      shortArray0[7] = shortArray8;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(10, shortArray0);
      JFreeChart jFreeChart0 = new JFreeChart("^d", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, false);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try { 
        ICC_Profile.getInstance("^d");
      } catch(IOException e) {
         //
         // Cannot open file ^d
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer xYItemRenderer0 = combinedDomainXYPlot0.getRenderer((-4219));
      Font font0 = TextTitle.DEFAULT_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("XYY5", font0, combinedDomainXYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      MultiListUI multiListUI0 = new MultiListUI();
      StandardGradientPaintTransformer[] standardGradientPaintTransformerArray0 = new StandardGradientPaintTransformer[4];
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      standardGradientPaintTransformerArray0[0] = standardGradientPaintTransformer0;
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.VERTICAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer1 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      standardGradientPaintTransformerArray0[1] = standardGradientPaintTransformer1;
      StandardGradientPaintTransformer standardGradientPaintTransformer2 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      standardGradientPaintTransformerArray0[2] = standardGradientPaintTransformer2;
      StandardGradientPaintTransformer standardGradientPaintTransformer3 = new StandardGradientPaintTransformer();
      standardGradientPaintTransformerArray0[3] = standardGradientPaintTransformer3;
      JList<StandardGradientPaintTransformer> jList0 = new JList<StandardGradientPaintTransformer>(standardGradientPaintTransformerArray0);
      // Undeclared exception!
      try { 
        multiListUI0.getCellBounds(jList0, 1, 2958465);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.mapDatasetToRangeAxis(2640, 2640);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      Locale locale0 = Locale.PRC;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("F", dateFormatSymbols0);
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("F", mockSimpleDateFormat0, mockSimpleDateFormat0, mockSimpleDateFormat0);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(4, standardXYZToolTipGenerator0, standardXYURLGenerator0);
      xYItemRendererArray0[0] = (XYItemRenderer) xYAreaRenderer0;
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer(5);
      xYItemRendererArray0[1] = (XYItemRenderer) xYBarRenderer0;
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      xYItemRendererArray0[2] = (XYItemRenderer) yIntervalRenderer0;
      yIntervalRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(4, standardXYZToolTipGenerator0, standardXYURLGenerator0);
      xYItemRendererArray0[3] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYPlot0.setRenderers(xYItemRendererArray0);
      Stroke stroke0 = xYPlot0.getDomainCrosshairStroke();
      xYPlot0.setRangeZeroBaselineStroke(stroke0);
      xYPlot0.configureRangeAxes();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      int int0 = xYPlot0.getDatasetCount();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-267.2528), "c4re|OCiVq:c=MC");
      Range range0 = xYPlot0.getDataRange(cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis(") should be in the range 0 to 3.", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) symbolAxis0);
      Paint paint0 = combinedDomainXYPlot0.getRangeTickBandPaint();
      combinedDomainXYPlot0.setDomainCrosshairVisible(true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-246.35587929), "-");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      int int0 = combinedRangeXYPlot0.getRangeAxisIndex(cyclicNumberAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, (-2625.852706));
      Layer layer0 = Layer.FOREGROUND;
      boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker((-164), (Marker) intervalMarker0, layer0, true);
      combinedRangeXYPlot0.setRangePannable(true);
      boolean boolean1 = combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
      boolean boolean2 = combinedRangeXYPlot0.removeDomainMarker((-4), (Marker) intervalMarker0, layer0);
      double double0 = combinedRangeXYPlot0.getRangeCrosshairValue();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      ArrayList<CategoryAxis> arrayList0 = new ArrayList<CategoryAxis>();
      jFreeChart0.setSubtitles(arrayList0);
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer0 = Layer.BACKGROUND;
      boolean boolean0 = xYPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'values' argument.");
      boolean boolean0 = categoryAxis0.equals("Null 'values' argument.");
      categoryAxis0.setTickMarkStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Paint paint0 = categoryAxis0.getAxisLinePaint();
      combinedDomainXYPlot0.setRangeTickBandPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Font font0 = TextFragment.DEFAULT_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("`;&8c", font0, combinedDomainXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.handleClick(6, 6, plotRenderingInfo0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      combinedDomainXYPlot0.mapDatasetToDomainAxis(1654, 1654);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      int int0 = 795;
      Stroke stroke0 = stackedAreaRenderer0.getSeriesOutlineStroke(795);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainMinorGridlineStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.001);
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, xYStepAreaRenderer0);
      Paint paint0 = xYPlot0.getRangeTickBandPaint();
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker((Comparable) null, (Paint) null, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(Double.POSITIVE_INFINITY, false, highLowItemLabelGenerator0);
      XYPlot xYPlot0 = candlestickRenderer0.getPlot();
      double double0 = (-1212.7227034758);
      boolean boolean0 = true;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("", candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, (Plot) null, true);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "0.0000";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 500, 180.0, 2951.73101093046, (double) 1.0F);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      // Undeclared exception!
      try { 
        chartPanel0.getLocationOnScreen();
      } catch(IllegalComponentStateException e) {
         //
         // component must be showing on the screen to determine its location
         //
         verifyException("java.awt.Component", e);
      }
  }
}
