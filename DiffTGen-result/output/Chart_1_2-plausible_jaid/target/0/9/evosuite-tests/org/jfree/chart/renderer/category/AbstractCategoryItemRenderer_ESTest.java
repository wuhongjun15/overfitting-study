/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 08:04:17 GMT 2020
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.RasterFormatException;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.math.BigInteger;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.Date;
import javax.swing.JEditorPane;
import javax.swing.JLayeredPane;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.annotations.TextAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.StandardTickUnitSource;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.TickUnit;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.renderer.AreaRendererEndType;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.jfree.chart.util.GradientPaintTransformer;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getSeriesToolTipGenerator(365);
      boolean boolean0 = false;
      stackedBarRenderer3D0.setSeriesToolTipGenerator(365, (CategoryToolTipGenerator) null, false);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      lineAndShapeRenderer0.setBaseShapesVisible(true);
      lineAndShapeRenderer0.setLegendTextFont(365, stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_FONT);
      statisticalBarRenderer0.setNegativeItemLabelPositionFallback((ItemLabelPosition) null);
      boolean boolean1 = lineAndShapeRenderer0.equals((Object) null);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      int[] intArray0 = new int[6];
      intArray0[0] = 6261;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 365;
      intArray0[5] = 0;
      int int0 = (-772);
      BigInteger bigInteger0 = BigInteger.TEN;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 0, intArray0, (-772), 365, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int0 = 38;
      boolean boolean0 = scatterRenderer0.getSeriesShapesFilled(38);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      boolean boolean1 = lineAndShapeRenderer0.equals(integer0);
      CategoryURLGenerator categoryURLGenerator0 = scatterRenderer0.getURLGenerator(38, 38, true);
      scatterRenderer0.setSeriesURLGenerator(38, (CategoryURLGenerator) null);
      CategoryPlot categoryPlot0 = null;
      // Undeclared exception!
      try { 
        scatterRenderer0.setPlot((CategoryPlot) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Shape shape0 = areaRenderer0.lookupSeriesShape(125);
      int int0 = (-1920);
      Paint paint0 = areaRenderer0.getLegendTextPaint((-1920));
      BarRenderer barRenderer0 = new BarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(125, 125, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      int int1 = 165;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-1920), 165);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.initialise(graphics2D0, (Rectangle2D) null, combinedDomainCategoryPlot0, slidingCategoryDataset0, plotRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      Collection collection0 = standardEntityCollection0.getEntities();
      Shape shape0 = defaultXYItemRenderer0.getLegendLine();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      int int0 = 4720;
      // Undeclared exception!
      try { 
        levelRenderer0.addEntity(standardEntityCollection0, shape0, defaultBoxAndWhiskerCategoryDataset0, 4720, 4720, false, (double) defaultXYItemRenderer0.ZERO, 4720);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4720, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis3D0, cyclicNumberAxis0, areaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 5, (-1441), 5, true, true, true, false, true, true, true);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea();
      groupedStackedBarRenderer0.calculateBarWidth(categoryPlot0, rectangle2D0, 636, (CategoryItemRendererState) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategoryToolTipGenerator categoryToolTipGenerator0 = categoryStepRenderer0.getToolTipGenerator(1381, 0, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      int int0 = 1800;
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, logAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      // Undeclared exception!
      try { 
        areaRenderer0.updateCrosshairValues(categoryCrosshairState0, (Comparable) null, (Comparable) null, 1800, 1800, 1800, 0.0, plotOrientation0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean0 = false;
      lineRenderer3D0.setAutoPopulateSeriesFillPaint(false);
      boolean boolean1 = lineRenderer3D0.getBaseLinesVisible();
      Shape shape0 = lineRenderer3D0.getLegendShape((-1993));
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      GanttCategoryDataset ganttCategoryDataset0 = null;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1072, 1072);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = ganttRenderer0.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      int int0 = 657;
      LegendItem legendItem0 = ganttRenderer0.getLegendItem(24, 657);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = ganttRenderer0.getLegendItemLabelGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Stroke stroke0 = scatterRenderer0.lookupSeriesStroke((-1777));
      boolean boolean0 = true;
      scatterRenderer0.setDrawOutlines(true);
      TimeSeriesTableModel timeSeriesTableModel0 = null;
      try {
        timeSeriesTableModel0 = new TimeSeriesTableModel((TimeSeries) null, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = false;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0, false);
      int int0 = Integer.MAX_VALUE;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("Cr", dateFormat0);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesItemLabelGenerator(Integer.MAX_VALUE, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, scatterRenderer0.ZERO, (-1426.854136856), scatterRenderer0.DEFAULT_VALUE_LABEL_PAINT, scatterRenderer0.DEFAULT_STROKE);
      categoryLineAnnotation0.setValue1((-871.4004462173098));
      categoryLineAnnotation0.setPaint(scatterRenderer0.DEFAULT_PAINT);
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      boolean boolean0 = scatterRenderer0.getBaseShapesFilled();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setXOffset(0.0);
      int int0 = 0;
      Paint paint0 = lineRenderer3D0.getLegendTextPaint(0);
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      scatterRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, true);
      scatterRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, true);
      double double0 = lineRenderer3D0.getYOffset();
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineRenderer3D0.getBaseToolTipGenerator();
      lineRenderer3D0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null, true);
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      int int1 = 0;
      byte[] byteArray0 = new byte[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 320, byteArray0, byteArray0, byteArray0, byteArray0);
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getBaseToolTipGenerator();
      lineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null);
      int int0 = lineAndShapeRenderer0.getPassCount();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      boolean boolean0 = stackedBarRenderer3D0.equals(stackedBarRenderer0);
      Paint paint0 = stackedBarRenderer3D0.getWallPaint();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      int int0 = (-3811);
      int int1 = 0;
      int int2 = (-5329);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-3811), 0, (-5329));
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -5329
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 0.65;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.65, (-2096.172942), false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(3.0, (-2096.172942), stackedBarRenderer3D0.ZERO, 1450.6999, stackedBarRenderer3D0.DEFAULT_OUTLINE_PAINT, stackedBarRenderer3D0.DEFAULT_STROKE);
      categoryLineAnnotation0.setPaint(stackedBarRenderer3D0.DEFAULT_OUTLINE_PAINT);
      boolean boolean0 = stackedBarRenderer3D0.equals(categoryLineAnnotation0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = minMaxCategoryRenderer0.hashCode();
      Object object0 = minMaxCategoryRenderer0.clone();
      minMaxCategoryRenderer0.setGroupPaint(stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_PAINT);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      int int1 = (-770);
      short[][] shortArray0 = new short[3][8];
      short[] shortArray1 = new short[0];
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[6];
      shortArray2[0] = (short)0;
      short short0 = (short) (-1);
      shortArray2[1] = (short) (-1);
      short short1 = (short)0;
      shortArray2[2] = (short)0;
      shortArray2[3] = (short) (-3098);
      shortArray2[4] = (short) (-1371);
      short short2 = (short) (-2275);
      shortArray2[5] = (short) (-2275);
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[5];
      shortArray3[0] = (short) (-3098);
      shortArray3[1] = (short) (-2275);
      shortArray3[2] = (short)0;
      shortArray3[3] = (short)723;
      shortArray3[4] = (short)0;
      shortArray0[2] = shortArray3;
      ShortLookupTable shortLookupTable0 = null;
      try {
        shortLookupTable0 = new ShortLookupTable((-770), shortArray0);
      } catch(IllegalArgumentException e) {
         //
         // Offset must be greater than 0
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-1228.67), (-1228.67));
      stackedBarRenderer3D0.setIgnoreZeroValues(false);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      Shape shape0 = stackedBarRenderer3D0.lookupSeriesShape(3417);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("k{", "k{", (double) lineAndShapeRenderer0.ZERO);
      boolean boolean0 = stackedBarRenderer3D0.removeAnnotation(categoryTextAnnotation0);
      boolean boolean1 = lineAndShapeRenderer0.getUseSeriesOffset();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 127, 772, 127, 10, 127, (-790), false, false, false, false, false, false, false);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      statisticalLineAndShapeRenderer0.setUseOutlinePaint(true);
      statisticalLineAndShapeRenderer0.removeAnnotations();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Object object0 = scatterRenderer0.clone();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      int int0 = 1;
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity((EntityCollection) null, statisticalLineAndShapeRenderer0.DEFAULT_SHAPE, defaultMultiValueCategoryDataset0, 3, 1, true);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getItemLabelGenerator(0, 0, false);
      stackedBarRenderer3D0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null, false);
      CategoryItemLabelGenerator categoryItemLabelGenerator1 = stackedBarRenderer3D0.getBaseItemLabelGenerator();
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'hotspot' argument.");
      double double0 = stackedBarRenderer3D0.calculateSeriesWidth((double) statisticalBarRenderer0.ZERO, categoryAxis0, 1591, 150);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(stackedBarRenderer3D0, false);
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 0, 1591, 150, 1591, 150, 819, false, false, false, true, true, false, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      int int0 = 0;
      Paint paint0 = barRenderer3D0.lookupSeriesPaint(0);
      int int1 = barRenderer3D0.hashCode();
      ItemLabelPosition itemLabelPosition0 = barRenderer3D0.getNegativeItemLabelPositionFallback();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getBaseItemLabelGenerator();
      boolean boolean0 = true;
      stackedBarRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, true);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 0, 0);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.createStackedValueList(slidingCategoryDataset0, 3.0, (int[]) null, 0.0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.DataUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Paint paint0 = boxAndWhiskerRenderer0.getArtifactPaint();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(8.0, 5.0E8);
      stackedBarRenderer3D0.setNegativeItemLabelPositionFallback((ItemLabelPosition) null);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = lineRenderer3D0.getBaseItemLabelGenerator();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesItemLabelGenerator((-875), (CategoryItemLabelGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = barRenderer3D0.getLegendItemToolTipGenerator();
      barRenderer3D0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      ColorModel colorModel0 = ColorModel.getRGBdefault();
      boolean boolean0 = false;
      int int0 = 1535;
      int int1 = (-43);
      ComponentColorModel componentColorModel0 = null;
      try {
        componentColorModel0 = new ComponentColorModel((ColorSpace) null, false, false, 1535, (-43));
      } catch(IllegalArgumentException e) {
         //
         // Unknown data type -43
         //
         verifyException("java.awt.image.DataBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.isMedianVisible();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean1 = scatterRenderer0.getUseFillPaint();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = scatterRenderer0.getSeriesItemLabelGenerator((-156));
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, false);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      String string0 = "nb';y^4GVw_";
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("nb';y^4GVw_", numberFormat0);
      lineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      LegendItemCollection legendItemCollection0 = lineAndShapeRenderer0.getLegendItems();
      int int0 = 1617;
      int int1 = 189;
      boolean boolean0 = lineAndShapeRenderer0.getItemShapeFilled(1617, 189);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(189);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 189, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = false;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      Stroke stroke0 = statisticalLineAndShapeRenderer0.getErrorIndicatorStroke();
      CategoryToolTipGenerator categoryToolTipGenerator0 = null;
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator((-216), (CategoryToolTipGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalLineAndShapeRenderer0.getLegendItemLabelGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setUseSeriesOffset(true);
      scatterRenderer0.setBaseLegendShape(statisticalLineAndShapeRenderer0.DEFAULT_SHAPE);
      Boolean boolean0 = statisticalLineAndShapeRenderer0.getSeriesVisibleInLegend(0);
      int int0 = Boolean.compare(true, false);
      boolean boolean1 = Boolean.logicalAnd(false, false);
      scatterRenderer0.setSeriesShapesFilled(59, (Boolean) null);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getSeriesToolTipGenerator(59);
      statisticalBarRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null);
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      statisticalBarRenderer0.setGradientPaintTransformer(standardGradientPaintTransformer0);
      statisticalLineAndShapeRenderer0.setUseSeriesOffset(false);
      scatterRenderer0.setDrawOutlines(false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Paint paint0 = lineRenderer3D0.getWallPaint();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setUseSeriesOffset(false);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(2.5E-9, (double) scatterRenderer0.ZERO);
      CategoryPlot categoryPlot0 = scatterRenderer0.getPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      // Undeclared exception!
      try { 
        barRenderer3D0.drawBackground((Graphics2D) null, (CategoryPlot) null, rectangle2D0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) 0.2;
      numberArray1[1] = (Number) 0.2;
      numberArray1[2] = (Number) 0.2;
      numberArray1[3] = (Number) 0.2;
      numberArray1[4] = (Number) 0.2;
      numberArray1[5] = (Number) levelRenderer0.ZERO;
      numberArray1[6] = (Number) levelRenderer0.ZERO;
      numberArray1[7] = (Number) levelRenderer0.ZERO;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      numberArray2[0] = (Number) 0.2;
      numberArray2[1] = (Number) 0.2;
      numberArray2[2] = (Number) 0.2;
      numberArray2[3] = (Number) 0.2;
      numberArray2[4] = (Number) 0.2;
      numberArray2[5] = (Number) 0.2;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      numberArray3[0] = (Number) levelRenderer0.ZERO;
      numberArray3[1] = (Number) 0.2;
      numberArray3[2] = (Number) 0.2;
      numberArray3[3] = (Number) levelRenderer0.ZERO;
      numberArray3[4] = (Number) 0.2;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        levelRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "d]hLwm#nLO L";
      Number[][] numberArray0 = new Number[3][5];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = (Number) 3.0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      numberArray3[0] = (Number) 3.0;
      numberArray3[1] = (Number) 3.0;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      Range range0 = barRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = false;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalLineAndShapeRenderer0.getLegendItemURLGenerator();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer0.getUseOutlinePaint();
      boolean boolean1 = scatterRenderer0.getSeriesShapesFilled(1);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = scatterRenderer0.getSeriesItemLabelGenerator(1);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      GradientPaintTransformer gradientPaintTransformer0 = stackedBarRenderer3D0.getGradientPaintTransformer();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      int int0 = 2097;
      StackedBarRenderer stackedBarRenderer1 = new StackedBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer1.getSeriesURLGenerator(978);
      stackedBarRenderer0.setSeriesURLGenerator(2097, (CategoryURLGenerator) null, true);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer0.getLegendItemURLGenerator();
      // Undeclared exception!
      try { 
        stackedBarRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      stackedBarRenderer0.setPlot(categoryPlot0);
      int int0 = stackedBarRenderer0.getPassCount();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean0 = lineRenderer3D0.getUseSeriesOffset();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      BasicTreeUI.NodeDimensionsHandler basicTreeUI_NodeDimensionsHandler0 = basicTreeUI0.new NodeDimensionsHandler();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect((-1023));
      Rectangle rectangle1 = basicTreeUI_NodeDimensionsHandler0.getNodeDimensions(basicTreeUI0, (-1023), (-1023), false, rectangle0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultKeyedValues2DDataset0, 100, (-3508), false);
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      boxAndWhiskerRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      boxAndWhiskerRenderer0.setArtifactPaint(color0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = lineRenderer3D0.createState(plotRenderingInfo0);
      lineRenderer3D0.setBaseShapesFilled(false);
      double double0 = lineRenderer3D0.getYOffset();
      int int0 = lineRenderer3D0.getRowCount();
      boolean boolean0 = lineRenderer3D0.getBaseShapesVisible();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getSeriesURLGenerator(0);
      lineRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) null, false);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-2300.119), 0.0);
      Day day0 = Day.parseDay("Null 'orientation' argument.");
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("&q<sk#H");
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.05, 4.0, 0.05, (-1013.422), 0.2, 3.0);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis("Unrecognised columnKey: ");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(500);
      // Undeclared exception!
      try { 
        barRenderer3D0.getItemMiddle((Comparable) null, (Comparable) null, (CategoryDataset) null, subCategoryAxis0, rectangle2D0, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      MockDate mockDate0 = (MockDate)DateAxis.DEFAULT_ANCHOR_DATE;
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      Day day0 = new Day(serialDate0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("ItemLabelGenerator not cloneable.");
      JEditorPane jEditorPane0 = new JEditorPane("ItemLabelGenerator not cloneable.", "ItemLabelGenerator not cloneable.");
      Rectangle rectangle0 = jEditorPane0.modelToView(617);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.getItemMiddle(day0, serialDate0, defaultMultiValueCategoryDataset0, categoryAxis0, (Rectangle2D) null, (RectangleEdge) null);
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(statisticalLineAndShapeRenderer0.ZERO, 0.0, statisticalLineAndShapeRenderer0.ZERO, 0.0, statisticalLineAndShapeRenderer0.DEFAULT_PAINT, statisticalLineAndShapeRenderer0.DEFAULT_STROKE);
      Object object0 = categoryLineAnnotation0.clone();
      statisticalLineAndShapeRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      SystemColor systemColor0 = SystemColor.desktop;
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesShapesVisible((-1197), false);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setSeriesItemLabelGenerator(2228, (CategoryItemLabelGenerator) null);
      ganttRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null);
      double double0 = ganttRenderer0.getStartPercent();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      int int0 = 3737;
      double double0 = layeredBarRenderer0.getSeriesBarWidth(3737);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getDomainAxis((CategoryPlot) null, (CategoryDataset) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = layeredBarRenderer0.getLegendItemToolTipGenerator();
      layeredBarRenderer0.setLegendItemToolTipGenerator((CategorySeriesLabelGenerator) null);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Paint paint0 = waterfallBarRenderer0.getFirstBarPaint();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      boolean boolean0 = statisticalLineAndShapeRenderer0.getUseSeriesOffset();
      DrawingSupplier drawingSupplier0 = statisticalLineAndShapeRenderer0.getDrawingSupplier();
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getURLGenerator((-1572), (-1572), false);
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.getDomainAxis(combinedRangeCategoryPlot0, defaultStatisticalCategoryDataset0);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getSeriesURLGenerator((-1305));
      statisticalLineAndShapeRenderer0.setSeriesURLGenerator(250, (CategoryURLGenerator) null);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator1 = statisticalBarRenderer0.getURLGenerator(250, 250, false);
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      statisticalLineAndShapeRenderer0.setDrawOutlines(false);
      statisticalLineAndShapeRenderer0.setSeriesShapesVisible(250, true);
      statisticalLineAndShapeRenderer0.removeAnnotations();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2883.66966032, false, customXYToolTipGenerator0);
      Boolean boolean0 = candlestickRenderer0.getSeriesVisible((-1305));
      statisticalLineAndShapeRenderer0.setSeriesShapesVisible(250, (Boolean) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Object object0 = scatterRenderer0.clone();
      boolean boolean0 = scatterRenderer0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Paint paint0 = waterfallBarRenderer0.getPositiveBarPaint();
      boolean boolean0 = waterfallBarRenderer0.equals(paint0);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      Number[][] numberArray0 = new Number[5][7];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 0.2;
      numberArray1[1] = (Number) waterfallBarRenderer0.ZERO;
      Double double0 = new Double(0.2);
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) 3.0;
      numberArray1[4] = (Number) barRenderer3D0.ZERO;
      numberArray1[5] = (Number) 0.2;
      numberArray1[6] = (Number) 3.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray2[0] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      numberArray3[0] = (Number) double0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[7];
      numberArray4[0] = (Number) double0;
      numberArray4[1] = (Number) barRenderer3D0.ZERO;
      numberArray4[2] = (Number) 3.0;
      numberArray4[3] = (Number) double0;
      numberArray4[4] = (Number) 3.0;
      numberArray4[5] = (Number) 3.0;
      numberArray4[6] = (Number) double0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[6];
      numberArray5[0] = (Number) bigInteger0;
      numberArray5[1] = (Number) 0.2;
      numberArray5[2] = (Number) 8.0;
      numberArray5[3] = (Number) 12.0;
      numberArray5[4] = (Number) 0.2;
      numberArray5[5] = (Number) 12.0;
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(multiplePiePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, true, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.setRenderAsPercentages(true);
      AreaRendererEndType areaRendererEndType0 = stackedAreaRenderer0.getEndType();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean0 = lineRenderer3D0.equals(stackedAreaRenderer0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", lineRenderer3D0.DEFAULT_VALUE_LABEL_FONT, spiderWebPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", fastScatterPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(1337.7F, (-1298.0F), renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 180);
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 15, 0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(349.88276, 10);
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingGanttCategoryDataset0, categoryAxis3D0, cyclicNumberAxis0, ganttRenderer0);
      // Undeclared exception!
      try { 
        bufferedImage0.getSubimage(10, 270, 10, 0);
      } catch(RasterFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      stackedBarRenderer0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
      ItemLabelPosition itemLabelPosition0 = stackedBarRenderer0.getPositiveItemLabelPositionFallback();
      stackedBarRenderer0.setNegativeItemLabelPositionFallback((ItemLabelPosition) null);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      LegendItem legendItem0 = boxAndWhiskerRenderer0.getLegendItem(0, 0);
      double double0 = boxAndWhiskerRenderer0.getMaximumBarWidth();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setSeriesShapesFilled(0, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      double double0 = 0.0;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Stroke stroke0 = combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      float float0 = 0.0F;
      StandardTickUnitSource standardTickUnitSource0 = new StandardTickUnitSource();
      TickUnit tickUnit0 = null;
      // Undeclared exception!
      try { 
        standardTickUnitSource0.getCeilingTickUnit((TickUnit) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.StandardTickUnitSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Paint paint0 = statisticalLineAndShapeRenderer0.lookupLegendTextPaint(2658);
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      Paint paint1 = meterPlot0.getTickLabelPaint();
      statisticalLineAndShapeRenderer0.setErrorIndicatorPaint(paint1);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(1.0F, (-6.30151368), 270, 0.0, levelRenderer0.DEFAULT_PAINT, levelRenderer0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      levelRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      // Undeclared exception!
      try { 
        levelRenderer0.calculateSeriesWidth(10, (CategoryAxis) null, 2190, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.LevelRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Color color0 = (Color)TextAnnotation.DEFAULT_PAINT;
      lineRenderer3D0.setWallPaint(color0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryURLGenerator categoryURLGenerator0 = stackedAreaRenderer0.getBaseURLGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean0 = true;
      int int0 = (-955);
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      boolean boolean1 = boxAndWhiskerToolTipGenerator0.equals(stackedAreaRenderer0);
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      Paint paint0 = lineRenderer3D0.lookupSeriesOutlinePaint((-955));
      Object object0 = boxAndWhiskerToolTipGenerator0.clone();
      Paint paint1 = lineRenderer3D0.lookupSeriesPaint((-955));
      lineRenderer3D0.setBaseLegendTextFont(stackedAreaRenderer0.DEFAULT_VALUE_LABEL_FONT);
      lineRenderer3D0.setBaseLegendShape(stackedAreaRenderer0.DEFAULT_SHAPE);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState((PlotRenderingInfo) null);
      EntityCollection entityCollection0 = categoryItemRendererState0.getEntityCollection();
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity((EntityCollection) null, stackedAreaRenderer0.DEFAULT_SHAPE, (CategoryDataset) null, (-955), (-955), false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }
}
