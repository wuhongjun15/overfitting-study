/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 23 08:48:42 GMT 2020
 */

package org.apache.commons.math.stat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Iterator;
import org.apache.commons.math.stat.Frequency;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Frequency_ESTest extends Frequency_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 85 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.clear()V: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch
   * Goal 6. org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch
   * Goal 7. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 8. org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 10. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 11. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 12. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - true
   * Goal 13. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 16. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 17. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - false
   * Goal 18. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:zero
   * Goal 19. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 20. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 22. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 23. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 25. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 26. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 27. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:250 - ReplaceComparisonOperator = null -> != null
   * Goal 28. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 29. Weak Mutation 66: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 67: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC 1
   * Goal 31. Weak Mutation 68: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC -1
   * Goal 32. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 33. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 34. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 35. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 36. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 37. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 38. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> -1
   * Goal 39. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 0.0
   * Goal 40. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 1.0
   * Goal 41. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> -1.0
   * Goal 42. Weak Mutation 132: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> NaN
   * Goal 43. Weak Mutation 65: org.apache.commons.math.stat.Frequency.getCount(J)J:276 - InsertUnaryOp Negation
   * Goal 44. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 45. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 46. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 47. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 48. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 49. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 50. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 51. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 52. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 53. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 54. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 55. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 56. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 57. Weak Mutation 41: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp Negation
   * Goal 58. Weak Mutation 42: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC 1
   * Goal 59. Weak Mutation 43: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC -1
   * Goal 60. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 0
   * Goal 61. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 1
   * Goal 62. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> -2
   * Goal 63. org.apache.commons.math.stat.Frequency.getCount(C)J:zero
   * Goal 64. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:positive
   * Goal 65. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 66. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 67. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 68. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 69. org.apache.commons.math.stat.Frequency.clear()V
   * Goal 70. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 71. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 72. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 73. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 74. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 75. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 76. org.apache.commons.math.stat.Frequency.clear()V
   * Goal 77. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 78. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 79. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 80. Branch org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(C)J
   * Goal 81. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Object;)D
   * Goal 82. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 83. Branch org.apache.commons.math.stat.Frequency.clear()V: root-Branch in context: org.apache.commons.math.stat.Frequency:clear()V
   * Goal 84. Branch org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(I)V
   * Goal 85. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D
   */

  @Test
  public void test00()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      Integer integer0 = new Integer(1981);
      Integer integer1 = Integer.getInteger("I*eIlhVC9%B{Ix!1I-*", integer0);
      frequency0.addValue(integer1);
      frequency0.clear();
      frequency0.addValue(1763);
      Frequency frequency1 = new Frequency((Comparator<?>) null);
      long long0 = frequency1.getCount('+');
      double double0 = frequency1.getCumPct((Object) "I*eIlhVC9%B{Ix!1I-*");
      double double1 = frequency0.getPct((Object) integer1);
  }

  //Test case number: 1
  /*
   * 189 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch
   * Goal 7. org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch
   * Goal 9. org.apache.commons.math.stat.Frequency.getCount(I)J: root-Branch
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch
   * Goal 11. org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 13. org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - true
   * Goal 16. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 17. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 18. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - true
   * Goal 19. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 21. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 22. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - true
   * Goal 23. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 25. org.apache.commons.math.stat.Frequency.hashCode()I: I11 Branch 18 IFNONNULL L573 - true
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 27. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 28. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - false
   * Goal 29. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - false
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - false
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 35. org.apache.commons.math.stat.Frequency.getCount(I)J:positive
   * Goal 36. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 37. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 38. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 39. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 40. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 41. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 42. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 43. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> -1
   * Goal 44. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> 1
   * Goal 45. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> -1
   * Goal 46. Weak Mutation 116: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp Negation
   * Goal 47. Weak Mutation 117: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp IINC 1
   * Goal 48. Weak Mutation 118: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp IINC -1
   * Goal 49. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 50. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 51. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 52. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:250 - ReplaceComparisonOperator = null -> != null
   * Goal 53. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 54. Weak Mutation 66: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp Negation
   * Goal 55. Weak Mutation 67: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC 1
   * Goal 56. Weak Mutation 68: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC -1
   * Goal 57. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 58. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 59. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 60. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 61. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 62. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 63. Weak Mutation 65: org.apache.commons.math.stat.Frequency.getCount(J)J:276 - InsertUnaryOp Negation
   * Goal 64. Weak Mutation 141: org.apache.commons.math.stat.Frequency.getCumPct(J)D:524 - InsertUnaryOp Negation
   * Goal 65. Weak Mutation 145: org.apache.commons.math.stat.Frequency.hashCode()I:572 - ReplaceConstant - 1 -> 0
   * Goal 66. Weak Mutation 146: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 0
   * Goal 67. Weak Mutation 147: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 1
   * Goal 68. Weak Mutation 148: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> -1
   * Goal 69. Weak Mutation 149: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 30
   * Goal 70. Weak Mutation 150: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 32
   * Goal 71. Weak Mutation 151: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp Negation
   * Goal 72. Weak Mutation 152: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp IINC 1
   * Goal 73. Weak Mutation 153: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp IINC -1
   * Goal 74. Weak Mutation 154: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> +
   * Goal 75. Weak Mutation 155: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> %
   * Goal 76. Weak Mutation 156: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> -
   * Goal 77. Weak Mutation 158: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceComparisonOperator != null -> = null
   * Goal 78. Weak Mutation 160: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> %
   * Goal 79. Weak Mutation 163: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> /
   * Goal 80. Weak Mutation 164: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp Negation
   * Goal 81. Weak Mutation 165: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp IINC 1
   * Goal 82. Weak Mutation 166: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp IINC -1
   * Goal 83. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 84. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 85. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 86. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 87. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 88. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 89. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 90. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 91. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 92. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp Negation
   * Goal 93. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC 1
   * Goal 94. Weak Mutation 93: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC -1
   * Goal 95. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 96. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 97. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 98. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 99. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 100. Weak Mutation 106: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:403 - InsertUnaryOp Negation
   * Goal 101. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 102. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - InsertUnaryOp Negation
   * Goal 103. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> +
   * Goal 104. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> -
   * Goal 105. Weak Mutation 142: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp Negation
   * Goal 106. Weak Mutation 143: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC 1
   * Goal 107. Weak Mutation 144: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC -1
   * Goal 108. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 109. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 110. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 111. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 112. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 113. Weak Mutation 41: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp Negation
   * Goal 114. Weak Mutation 42: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC 1
   * Goal 115. Weak Mutation 43: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC -1
   * Goal 116. Weak Mutation 84: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> %
   * Goal 117. Weak Mutation 109: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> >
   * Goal 118. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> <=
   * Goal 119. Weak Mutation 62: org.apache.commons.math.stat.Frequency.getCount(I)J:266 - InsertUnaryOp Negation
   * Goal 120. Weak Mutation 63: org.apache.commons.math.stat.Frequency.getCount(I)J:266 - InsertUnaryOp IINC 1
   * Goal 121. Weak Mutation 64: org.apache.commons.math.stat.Frequency.getCount(I)J:266 - InsertUnaryOp IINC -1
   * Goal 122. Weak Mutation 86: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> *
   * Goal 123. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceConstant - 1 -> 0
   * Goal 124. Weak Mutation 32: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceConstant - 1 -> -1
   * Goal 125. Weak Mutation 33: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceConstant - 1 -> 2
   * Goal 126. Weak Mutation 34: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> %
   * Goal 127. Weak Mutation 35: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> -
   * Goal 128. Weak Mutation 36: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> *
   * Goal 129. Weak Mutation 37: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> /
   * Goal 130. Weak Mutation 161: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> -
   * Goal 131. Weak Mutation 162: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> *
   * Goal 132. Weak Mutation 107: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> -1
   * Goal 133. Weak Mutation 110: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:407 - ReplaceConstant - 0 -> 1
   * Goal 134. Weak Mutation 111: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:407 - ReplaceConstant - 0 -> -1
   * Goal 135. org.apache.commons.math.stat.Frequency.getCount(C)J:zero
   * Goal 136. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:zero
   * Goal 137. org.apache.commons.math.stat.Frequency.getCount(J)J:zero
   * Goal 138. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:positive
   * Goal 139. org.apache.commons.math.stat.Frequency.getCumPct(C)D:zero
   * Goal 140. org.apache.commons.math.stat.Frequency.getCumFreq(I)J:positive
   * Goal 141. org.apache.commons.math.stat.Frequency.getPct(C)D:zero
   * Goal 142. org.apache.commons.math.stat.Frequency.getCount(I)J:zero
   * Goal 143. org.apache.commons.math.stat.Frequency.getCumPct(J)D:zero
   * Goal 144. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 145. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 146. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 147. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 148. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 149. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 150. org.apache.commons.math.stat.Frequency.getCount(J)J
   * Goal 151. org.apache.commons.math.stat.Frequency.hashCode()I
   * Goal 152. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 153. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D
   * Goal 154. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 155. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 156. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 157. org.apache.commons.math.stat.Frequency.getCount(I)J
   * Goal 158. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 159. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 160. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 161. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 162. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 163. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 164. org.apache.commons.math.stat.Frequency.getCount(J)J
   * Goal 165. org.apache.commons.math.stat.Frequency.hashCode()I
   * Goal 166. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 167. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D
   * Goal 168. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 169. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 170. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 171. org.apache.commons.math.stat.Frequency.getCount(I)J
   * Goal 172. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 173. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 174. Branch org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(I)J
   * Goal 175. Branch org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(C)J
   * Goal 176. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 177. Branch org.apache.commons.math.stat.Frequency.hashCode()I: I11 Branch 18 IFNONNULL L573 - true in context: org.apache.commons.math.stat.Frequency:hashCode()I
   * Goal 178. Branch org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(J)J
   * Goal 179. Branch org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(J)D
   * Goal 180. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 181. Branch org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(C)D
   * Goal 182. Branch org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(C)D
   * Goal 183. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 184. Branch org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(I)V
   * Goal 185. Branch org.apache.commons.math.stat.Frequency.getCount(I)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(I)J
   * Goal 186. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Comparable;)D
   * Goal 187. getCumFreq(Ljava/lang/Object;)J_java.lang.ClassCastException_IMPLICIT
   * Goal 188. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 253
   * Goal 189. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 402
   */

  @Test
  public void test01()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      long long0 = frequency0.getCount(1011);
      int int0 = frequency0.hashCode();
      long long1 = frequency0.getCumFreq((Object) null);
      frequency0.addValue(1011);
      long long2 = frequency0.getCumFreq(1011);
      frequency0.addValue(149);
      int int1 = frequency0.hashCode();
      double double0 = frequency0.getCumPct((-633L));
      frequency0.addValue(1011);
      long long3 = frequency0.getCount('E');
      double double1 = frequency0.getPct('E');
      long long4 = frequency0.getCount('E');
      long long5 = frequency0.getCount(1011);
      int int2 = frequency0.hashCode();
      long long6 = frequency0.getCount(1L);
      Integer integer0 = new Integer(1011);
      frequency0.addValue(integer0);
      double double2 = frequency0.getCumPct('E');
      double double3 = frequency0.getPct((Comparable<?>) integer0);
      Frequency frequency1 = new Frequency((Comparator<?>) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        frequency1.getCumFreq(object0);
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 2
  /*
   * 61 covered goals:
   * Goal 1. getCumPct(Ljava/lang/Object;)D_java.lang.NullPointerException_IMPLICIT
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 13. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch
   * Goal 15. org.apache.commons.math.stat.Frequency.getCount(I)J: root-Branch
   * Goal 16. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 17. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 18. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 19. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 20. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 21. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 23. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 24. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 26. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:250 - ReplaceComparisonOperator = null -> != null
   * Goal 27. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 28. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 29. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 30. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 31. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 32. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 33. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 34. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 35. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 36. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 37. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 38. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 39. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 40. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 41. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 42. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 43. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 44. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 45. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 46. Weak Mutation 44: org.apache.commons.math.stat.Frequency.addValue(J)V:177 - InsertUnaryOp Negation
   * Goal 47. Weak Mutation 62: org.apache.commons.math.stat.Frequency.getCount(I)J:266 - InsertUnaryOp Negation
   * Goal 48. Weak Mutation 63: org.apache.commons.math.stat.Frequency.getCount(I)J:266 - InsertUnaryOp IINC 1
   * Goal 49. Weak Mutation 64: org.apache.commons.math.stat.Frequency.getCount(I)J:266 - InsertUnaryOp IINC -1
   * Goal 50. org.apache.commons.math.stat.Frequency.getCount(I)J:zero
   * Goal 51. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 52. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 53. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 54. org.apache.commons.math.stat.Frequency.getCount(I)J
   * Goal 55. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 56. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 57. org.apache.commons.math.stat.Frequency.getCount(I)J
   * Goal 58. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 59. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Object;)D
   * Goal 60. Branch org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(J)V
   * Goal 61. Branch org.apache.commons.math.stat.Frequency.getCount(I)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(I)J
   */

  @Test
  public void test02()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      long long0 = frequency0.getCount((-116));
      frequency0.addValue((-3281L));
      // Undeclared exception!
      try { 
        frequency0.getCumPct((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 3
  /*
   * 155 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch
   * Goal 7. org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch
   * Goal 8. org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch
   * Goal 9. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - true
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 13. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 14. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 19. org.apache.commons.math.stat.Frequency.hashCode()I: I11 Branch 18 IFNONNULL L573 - true
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 21. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 22. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 23. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 25. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 26. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 27. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 28. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 29. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 30. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 31. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 32. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 33. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 34. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 35. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 36. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 37. Weak Mutation 66: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp Negation
   * Goal 38. Weak Mutation 67: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC 1
   * Goal 39. Weak Mutation 68: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC -1
   * Goal 40. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 41. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 42. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 43. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 44. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 45. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 46. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp Negation
   * Goal 47. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC 1
   * Goal 48. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC -1
   * Goal 49. Weak Mutation 145: org.apache.commons.math.stat.Frequency.hashCode()I:572 - ReplaceConstant - 1 -> 0
   * Goal 50. Weak Mutation 146: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 0
   * Goal 51. Weak Mutation 147: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 1
   * Goal 52. Weak Mutation 148: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> -1
   * Goal 53. Weak Mutation 149: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 30
   * Goal 54. Weak Mutation 150: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 32
   * Goal 55. Weak Mutation 151: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp Negation
   * Goal 56. Weak Mutation 152: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp IINC 1
   * Goal 57. Weak Mutation 153: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp IINC -1
   * Goal 58. Weak Mutation 154: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> +
   * Goal 59. Weak Mutation 155: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> %
   * Goal 60. Weak Mutation 156: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> -
   * Goal 61. Weak Mutation 158: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceComparisonOperator != null -> = null
   * Goal 62. Weak Mutation 160: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> %
   * Goal 63. Weak Mutation 163: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> /
   * Goal 64. Weak Mutation 164: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp Negation
   * Goal 65. Weak Mutation 165: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp IINC 1
   * Goal 66. Weak Mutation 166: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp IINC -1
   * Goal 67. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 68. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 69. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 70. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 71. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 72. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 73. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 74. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 75. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 76. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp Negation
   * Goal 77. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC 1
   * Goal 78. Weak Mutation 93: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC -1
   * Goal 79. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 80. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 81. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 82. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 83. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 84. Weak Mutation 106: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:403 - InsertUnaryOp Negation
   * Goal 85. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 86. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - InsertUnaryOp Negation
   * Goal 87. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> +
   * Goal 88. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> -
   * Goal 89. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 90. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 91. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 92. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 93. Weak Mutation 90: org.apache.commons.math.stat.Frequency.getPct(J)D:345 - InsertUnaryOp Negation
   * Goal 94. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 95. Weak Mutation 0: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:83 - ReplaceConstant - Value 	 Freq. 	 Pct. 	 Cum Pct. 
 -> 
   * Goal 96. Weak Mutation 1: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceComparisonOperator == -> !=
   * Goal 97. Weak Mutation 109: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> >
   * Goal 98. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> <=
   * Goal 99. Weak Mutation 135: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> %
   * Goal 100. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceConstant - 1 -> 0
   * Goal 101. Weak Mutation 32: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceConstant - 1 -> -1
   * Goal 102. Weak Mutation 33: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceConstant - 1 -> 2
   * Goal 103. Weak Mutation 34: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> %
   * Goal 104. Weak Mutation 35: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> -
   * Goal 105. Weak Mutation 36: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> *
   * Goal 106. Weak Mutation 37: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> /
   * Goal 107. org.apache.commons.math.stat.Frequency.getCount(C)J:zero
   * Goal 108. org.apache.commons.math.stat.Frequency.getCumFreq(C)J:zero
   * Goal 109. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:positive
   * Goal 110. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:positive
   * Goal 111. org.apache.commons.math.stat.Frequency.getPct(J)D:zero
   * Goal 112. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:nonnull
   * Goal 113. org.apache.commons.math.stat.Frequency.getPct(C)D:zero
   * Goal 114. org.apache.commons.math.stat.Frequency.getSumFreq()J:positive
   * Goal 115. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 116. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 117. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 118. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 119. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 120. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 121. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D
   * Goal 122. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 123. org.apache.commons.math.stat.Frequency.hashCode()I
   * Goal 124. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 125. org.apache.commons.math.stat.Frequency.getPct(J)D
   * Goal 126. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 127. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 128. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 129. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 130. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 131. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D
   * Goal 132. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 133. org.apache.commons.math.stat.Frequency.hashCode()I
   * Goal 134. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 135. org.apache.commons.math.stat.Frequency.getPct(J)D
   * Goal 136. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 137. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 138. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 139. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 140. Branch org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(C)J
   * Goal 141. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 142. Branch org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true in context: org.apache.commons.math.stat.Frequency:getSumFreq()J
   * Goal 143. Branch org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(C)J
   * Goal 144. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Object;)D
   * Goal 145. Branch org.apache.commons.math.stat.Frequency.hashCode()I: I11 Branch 18 IFNONNULL L573 - true in context: org.apache.commons.math.stat.Frequency:hashCode()I
   * Goal 146. Branch org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(C)D
   * Goal 147. Branch org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(J)D
   * Goal 148. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 149. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 150. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 151. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Comparable;)D
   * Goal 152. Branch org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false in context: org.apache.commons.math.stat.Frequency:getSumFreq()J
   * Goal 153. getCumFreq(Ljava/lang/Object;)J_java.lang.ClassCastException_IMPLICIT
   * Goal 154. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 253
   * Goal 155. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 402
   */

  @Test
  public void test03()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      String string0 = frequency0.toString();
      int int0 = frequency0.hashCode();
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double0 = frequency0.getPct(0L);
      double double1 = frequency0.getCumPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double2 = frequency0.getCumPct((Object) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      long long0 = frequency0.getSumFreq();
      long long1 = frequency0.getSumFreq();
      double double3 = frequency0.getPct('>');
      long long2 = frequency0.getCumFreq('\\');
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      long long3 = frequency0.getCount('m');
      // Undeclared exception!
      try { 
        frequency0.getCumFreq((Object) frequency0);
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 4
  /*
   * 234 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 256
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 13. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 399
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 144
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 400
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 146
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 148
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 404
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 22. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 406
   * Goal 23. org.apache.commons.math.stat.Frequency.getCumPct(C)D: Line 537
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 410
   * Goal 25. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 411
   * Goal 26. org.apache.commons.math.stat.Frequency.getCount(C)J: Line 286
   * Goal 27. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 168
   * Goal 28. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: Line 564
   * Goal 29. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 186
   * Goal 30. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 187
   * Goal 31. org.apache.commons.math.stat.Frequency.hashCode()I: Line 572
   * Goal 32. org.apache.commons.math.stat.Frequency.hashCode()I: Line 573
   * Goal 33. org.apache.commons.math.stat.Frequency.hashCode()I: Line 574
   * Goal 34. org.apache.commons.math.stat.Frequency.hashCode()I: Line 575
   * Goal 35. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 36. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 37. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 323
   * Goal 38. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 39. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 40. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: Line 204
   * Goal 41. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 81
   * Goal 42. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 82
   * Goal 43. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 83
   * Goal 44. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 84
   * Goal 45. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 85
   * Goal 46. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 86
   * Goal 47. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 87
   * Goal 48. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 49. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 88
   * Goal 50. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 51. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 89
   * Goal 52. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 53. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 90
   * Goal 54. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 55. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 91
   * Goal 56. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 92
   * Goal 57. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 58. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 93
   * Goal 59. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 94
   * Goal 60. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 95
   * Goal 61. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 96
   * Goal 62. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 494
   * Goal 63. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 495
   * Goal 64. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 496
   * Goal 65. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 498
   * Goal 66. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 67. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 68. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 69. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 250
   * Goal 70. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 251
   * Goal 71. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 255
   * Goal 72. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 73. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 74. org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch
   * Goal 75. org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch
   * Goal 76. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 77. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 78. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 79. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 80. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 81. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 82. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 83. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - true
   * Goal 84. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 85. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 86. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 87. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 88. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 89. org.apache.commons.math.stat.Frequency.hashCode()I: I11 Branch 18 IFNONNULL L573 - true
   * Goal 90. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - false
   * Goal 91. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 92. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 93. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - false
   * Goal 94. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 95. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 96. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 97. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false
   * Goal 98. Weak Mutation 0: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:83 - ReplaceConstant - Value 	 Freq. 	 Pct. 	 Cum Pct. 
 -> 
   * Goal 99. Weak Mutation 1: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceComparisonOperator == -> !=
   * Goal 100. Weak Mutation 2: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 0
   * Goal 101. Weak Mutation 3: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 1
   * Goal 102. Weak Mutation 4: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> -1
   * Goal 103. Weak Mutation 5: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 8
   * Goal 104. Weak Mutation 6: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 10
   * Goal 105. Weak Mutation 7: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 0
   * Goal 106. Weak Mutation 8: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 1
   * Goal 107. Weak Mutation 9: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> -1
   * Goal 108. Weak Mutation 10: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 8
   * Goal 109. Weak Mutation 11: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 10
   * Goal 110. Weak Mutation 12: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 0
   * Goal 111. Weak Mutation 13: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 1
   * Goal 112. Weak Mutation 14: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> -1
   * Goal 113. Weak Mutation 15: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 8
   * Goal 114. Weak Mutation 16: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 10
   * Goal 115. Weak Mutation 17: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 0
   * Goal 116. Weak Mutation 18: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 1
   * Goal 117. Weak Mutation 19: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> -1
   * Goal 118. Weak Mutation 20: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 9
   * Goal 119. Weak Mutation 21: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 11
   * Goal 120. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 121. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 122. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 123. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 124. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 125. Weak Mutation 38: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - instance of class {0} not comparable to existing values -> 
   * Goal 126. Weak Mutation 39: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 1 -> 0
   * Goal 127. Weak Mutation 40: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 0 -> 1
   * Goal 128. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp Negation
   * Goal 129. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC 1
   * Goal 130. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC -1
   * Goal 131. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 132. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 133. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 134. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 135. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 136. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 137. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 138. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 139. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 140. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 141. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 142. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 143. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:250 - ReplaceComparisonOperator = null -> != null
   * Goal 144. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 145. Weak Mutation 66: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp Negation
   * Goal 146. Weak Mutation 67: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC 1
   * Goal 147. Weak Mutation 68: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC -1
   * Goal 148. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 149. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 150. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 151. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 152. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 153. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 154. Weak Mutation 84: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> %
   * Goal 155. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 156. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 157. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 158. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 159. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 160. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 161. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 162. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 163. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 164. Weak Mutation 109: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> >
   * Goal 165. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> <=
   * Goal 166. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 167. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 168. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 169. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> -1
   * Goal 170. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 171. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 0.0
   * Goal 172. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 1.0
   * Goal 173. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> -1.0
   * Goal 174. Weak Mutation 132: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> NaN
   * Goal 175. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - InsertUnaryOp Negation
   * Goal 176. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> +
   * Goal 177. Weak Mutation 135: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> %
   * Goal 178. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> -
   * Goal 179. Weak Mutation 142: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp Negation
   * Goal 180. Weak Mutation 143: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC 1
   * Goal 181. Weak Mutation 144: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC -1
   * Goal 182. Weak Mutation 145: org.apache.commons.math.stat.Frequency.hashCode()I:572 - ReplaceConstant - 1 -> 0
   * Goal 183. Weak Mutation 146: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 0
   * Goal 184. Weak Mutation 147: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 1
   * Goal 185. Weak Mutation 148: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> -1
   * Goal 186. Weak Mutation 149: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 30
   * Goal 187. Weak Mutation 150: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 32
   * Goal 188. Weak Mutation 151: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp Negation
   * Goal 189. Weak Mutation 152: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp IINC 1
   * Goal 190. Weak Mutation 153: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp IINC -1
   * Goal 191. Weak Mutation 154: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> +
   * Goal 192. Weak Mutation 155: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> %
   * Goal 193. Weak Mutation 156: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> -
   * Goal 194. Weak Mutation 158: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceComparisonOperator != null -> = null
   * Goal 195. Weak Mutation 160: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> %
   * Goal 196. Weak Mutation 163: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> /
   * Goal 197. Weak Mutation 164: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp Negation
   * Goal 198. Weak Mutation 165: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp IINC 1
   * Goal 199. Weak Mutation 166: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp IINC -1
   * Goal 200. org.apache.commons.math.stat.Frequency.getSumFreq()J:zero
   * Goal 201. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;:nonnull
   * Goal 202. org.apache.commons.math.stat.Frequency.getCount(C)J:positive
   * Goal 203. org.apache.commons.math.stat.Frequency.getCount(C)J:zero
   * Goal 204. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:nonnull
   * Goal 205. org.apache.commons.math.stat.Frequency.getCumPct(C)D:positive
   * Goal 206. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 207. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 208. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 209. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 210. org.apache.commons.math.stat.Frequency.hashCode()I
   * Goal 211. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 212. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 213. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 214. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 215. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 216. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 217. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 218. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 219. org.apache.commons.math.stat.Frequency.hashCode()I
   * Goal 220. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 221. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 222. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 223. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 224. Branch org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch in context: org.apache.commons.math.stat.Frequency:valuesIterator()Ljava/util/Iterator;
   * Goal 225. Branch org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(C)J
   * Goal 226. Branch org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true in context: org.apache.commons.math.stat.Frequency:getSumFreq()J
   * Goal 227. Branch org.apache.commons.math.stat.Frequency.hashCode()I: I11 Branch 18 IFNONNULL L573 - true in context: org.apache.commons.math.stat.Frequency:hashCode()I
   * Goal 228. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 229. Branch org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(C)D
   * Goal 230. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 231. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 232. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - false in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 233. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 234. addValue(Ljava/lang/Integer;)V_org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException_EXPLICIT
   */

  @Test
  public void test04()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      long long0 = frequency0.getSumFreq();
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      int int0 = frequency0.hashCode();
      long long1 = frequency0.getCount('G');
      double double0 = frequency0.getCumPct('G');
      frequency0.addValue('y');
      long long2 = frequency0.getCount('y');
      String string0 = frequency0.toString();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        frequency0.addValue(integer0);
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Long not comparable to existing values
         //
         assertThrownBy("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  //Test case number: 5
  /*
   * 185 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 256
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 399
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 400
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 402
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 403
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 404
   * Goal 20. org.apache.commons.math.stat.Frequency.getCount(J)J: Line 276
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 23. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 406
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 410
   * Goal 25. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 411
   * Goal 26. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: Line 564
   * Goal 27. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 186
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 187
   * Goal 29. org.apache.commons.math.stat.Frequency.<init>()V: Line 60
   * Goal 30. org.apache.commons.math.stat.Frequency.<init>()V: Line 61
   * Goal 31. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 32. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 33. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 321
   * Goal 34. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 323
   * Goal 35. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 36. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 37. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: Line 459
   * Goal 38. org.apache.commons.math.stat.Frequency.getPct(I)D: Line 334
   * Goal 39. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 81
   * Goal 40. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 82
   * Goal 41. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 83
   * Goal 42. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 84
   * Goal 43. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 85
   * Goal 44. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 45. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 46. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 47. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 48. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 49. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 478
   * Goal 50. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 96
   * Goal 51. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 494
   * Goal 52. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 495
   * Goal 53. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 498
   * Goal 54. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 55. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 56. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 57. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 253
   * Goal 58. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 59. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 60. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch
   * Goal 61. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 62. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch
   * Goal 63. org.apache.commons.math.stat.Frequency.getPct(I)D: root-Branch
   * Goal 64. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 65. org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch
   * Goal 66. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 67. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 68. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - true
   * Goal 69. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 70. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 71. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 72. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 73. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 74. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 75. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 76. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 77. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 78. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - false
   * Goal 79. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 80. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 81. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 82. Weak Mutation 0: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:83 - ReplaceConstant - Value 	 Freq. 	 Pct. 	 Cum Pct. 
 -> 
   * Goal 83. Weak Mutation 1: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceComparisonOperator == -> !=
   * Goal 84. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - InsertUnaryOp Negation
   * Goal 85. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> +
   * Goal 86. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> -
   * Goal 87. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 88. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 89. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 90. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 91. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 92. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceConstant - 1 -> 0
   * Goal 93. Weak Mutation 32: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceConstant - 1 -> -1
   * Goal 94. Weak Mutation 33: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceConstant - 1 -> 2
   * Goal 95. Weak Mutation 34: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> %
   * Goal 96. Weak Mutation 35: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> -
   * Goal 97. Weak Mutation 36: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> *
   * Goal 98. Weak Mutation 37: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> /
   * Goal 99. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp Negation
   * Goal 100. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC 1
   * Goal 101. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC -1
   * Goal 102. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 103. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 104. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 105. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 106. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 107. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 108. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 109. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 110. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 111. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 112. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 113. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 114. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 115. Weak Mutation 65: org.apache.commons.math.stat.Frequency.getCount(J)J:276 - InsertUnaryOp Negation
   * Goal 116. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 117. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 118. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 119. Weak Mutation 75: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> -1
   * Goal 120. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 121. Weak Mutation 78: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 0.0
   * Goal 122. Weak Mutation 79: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 1.0
   * Goal 123. Weak Mutation 80: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> -1.0
   * Goal 124. Weak Mutation 81: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> NaN
   * Goal 125. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 126. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 127. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 128. Weak Mutation 87: org.apache.commons.math.stat.Frequency.getPct(I)D:334 - InsertUnaryOp Negation
   * Goal 129. Weak Mutation 88: org.apache.commons.math.stat.Frequency.getPct(I)D:334 - InsertUnaryOp IINC 1
   * Goal 130. Weak Mutation 89: org.apache.commons.math.stat.Frequency.getPct(I)D:334 - InsertUnaryOp IINC -1
   * Goal 131. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 132. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 133. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 134. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 135. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 136. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 137. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 138. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 139. Weak Mutation 106: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:403 - InsertUnaryOp Negation
   * Goal 140. Weak Mutation 109: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> >
   * Goal 141. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> <=
   * Goal 142. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp Negation
   * Goal 143. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC 1
   * Goal 144. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC -1
   * Goal 145. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 146. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 147. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 148. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 149. org.apache.commons.math.stat.Frequency.getPct(I)D:zero
   * Goal 150. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:positive
   * Goal 151. org.apache.commons.math.stat.Frequency.getCumFreq(C)J:positive
   * Goal 152. org.apache.commons.math.stat.Frequency.getCount(J)J:zero
   * Goal 153. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:zero
   * Goal 154. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:nonnull
   * Goal 155. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 156. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 157. org.apache.commons.math.stat.Frequency.getPct(I)D
   * Goal 158. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 159. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D
   * Goal 160. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 161. org.apache.commons.math.stat.Frequency.getCount(J)J
   * Goal 162. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D
   * Goal 163. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 164. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 165. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 166. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 167. org.apache.commons.math.stat.Frequency.getPct(I)D
   * Goal 168. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 169. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D
   * Goal 170. org.apache.commons.math.stat.Frequency.getCount(J)J
   * Goal 171. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D
   * Goal 172. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 173. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 174. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 175. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 176. Branch org.apache.commons.math.stat.Frequency.getPct(I)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(I)D
   * Goal 177. Branch org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(C)J
   * Goal 178. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Object;)D
   * Goal 179. Branch org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(J)J
   * Goal 180. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - false in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Comparable;)D
   * Goal 181. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 182. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 183. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 184. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Comparable;)D
   * Goal 185. getCumPct(Ljava/lang/Object;)D_java.lang.ClassCastException_IMPLICIT
   */

  @Test
  public void test05()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      String string0 = frequency0.toString();
      double double0 = frequency0.getPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      frequency0.addValue('J');
      long long0 = frequency0.getCumFreq('J');
      long long1 = frequency0.getCount(656L);
      double double1 = frequency0.getPct(0);
      Frequency frequency1 = new Frequency((Comparator<?>) null);
      frequency0.addValue('J');
      String string1 = frequency1.toString();
      double double2 = frequency0.getCumPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      // Undeclared exception!
      try { 
        frequency1.getCumPct((Object) frequency1);
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 6
  /*
   * 84 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 386
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 5. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: Line 459
   * Goal 13. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 19. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 20. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 21. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 22. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 23. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 168
   * Goal 25. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 169
   * Goal 26. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 372
   * Goal 27. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch
   * Goal 28. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch
   * Goal 30. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 31. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 32. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 35. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 36. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 37. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 38. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 39. getCumFreq(Ljava/lang/Comparable;)J_java.lang.NullPointerException_IMPLICIT
   * Goal 40. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 41. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 42. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 43. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 44. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 45. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 47. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> -1
   * Goal 48. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> 1
   * Goal 49. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> -1
   * Goal 50. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp Negation
   * Goal 51. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC 1
   * Goal 52. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC -1
   * Goal 53. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 54. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 55. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 56. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 57. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 58. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 59. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 60. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 61. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 62. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 63. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 64. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 65. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 66. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 67. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:zero
   * Goal 68. org.apache.commons.math.stat.Frequency.getCumFreq(C)J:zero
   * Goal 69. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 70. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 71. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 72. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 73. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J
   * Goal 74. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 75. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 76. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 77. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 78. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 79. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 80. Branch org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(C)J
   * Goal 81. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 82. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 83. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 84. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   */

  @Test
  public void test06()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      Integer integer0 = new Integer(0);
      long long0 = frequency0.getCumFreq((Object) null);
      long long1 = frequency0.getCumFreq('w');
      int int0 = Integer.sum(0, 0);
      int int1 = Integer.min(0, 0);
      frequency0.addValue(integer0);
      // Undeclared exception!
      try { 
        frequency0.getCumFreq((Comparable<?>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 7
  /*
   * 37 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I12 Branch 20 IFNONNULL L583 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFNE L585 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I35 Branch 22 IFNONNULL L588 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 9. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I52 Branch 24 IFNE L591 - false
   * Goal 10. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 11. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 12. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 13. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 14. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 15. Weak Mutation 167: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:581 - ReplaceComparisonOperator != -> ==
   * Goal 16. Weak Mutation 169: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:583 - ReplaceComparisonOperator != null -> = null
   * Goal 17. Weak Mutation 171: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:585 - ReplaceComparisonOperator != -> ==
   * Goal 18. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp Negation
   * Goal 19. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC 1
   * Goal 20. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC -1
   * Goal 21. Weak Mutation 173: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:588 - ReplaceComparisonOperator != null -> = null
   * Goal 22. Weak Mutation 176: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:591 - ReplaceComparisonOperator != -> ==
   * Goal 23. Weak Mutation 177: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:592 - ReplaceConstant - 0 -> 1
   * Goal 24. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:false
   * Goal 25. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 26. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z
   * Goal 27. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 28. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 29. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z
   * Goal 30. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 31. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 32. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I12 Branch 20 IFNONNULL L583 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 33. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 34. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 35. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I35 Branch 22 IFNONNULL L588 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 36. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFNE L585 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 37. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I52 Branch 24 IFNE L591 - false in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   */

  @Test
  public void test07()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      Frequency frequency1 = new Frequency((Comparator<?>) null);
      frequency0.addValue('e');
      boolean boolean0 = frequency0.equals(frequency1);
  }

  //Test case number: 8
  /*
   * 118 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 2. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 256
   * Goal 3. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 321
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 5. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 386
   * Goal 6. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 323
   * Goal 7. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 10. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 144
   * Goal 15. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 81
   * Goal 16. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 82
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 146
   * Goal 18. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 83
   * Goal 19. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 84
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 148
   * Goal 21. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 85
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 24. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 25. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 26. org.apache.commons.math.stat.Frequency.getPct(J)D: Line 345
   * Goal 27. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 28. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 29. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 30. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 158
   * Goal 31. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 96
   * Goal 32. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 33. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 34. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 35. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 253
   * Goal 36. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 37. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: Line 447
   * Goal 38. org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch
   * Goal 39. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 40. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 41. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch
   * Goal 42. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 43. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 44. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 45. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 46. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 47. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 48. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 49. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - false
   * Goal 50. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 51. addValue(I)V_org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException_EXPLICIT
   * Goal 52. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 53. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 54. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 55. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 56. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 57. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 58. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 59. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> -1
   * Goal 60. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> 1
   * Goal 61. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> -1
   * Goal 62. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 63. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 64. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 65. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 66. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 67. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 68. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 69. Weak Mutation 75: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> -1
   * Goal 70. Weak Mutation 78: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 0.0
   * Goal 71. Weak Mutation 79: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 1.0
   * Goal 72. Weak Mutation 80: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> -1.0
   * Goal 73. Weak Mutation 81: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> NaN
   * Goal 74. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 75. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 76. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 77. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 78. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 79. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 80. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 81. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 82. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 83. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 84. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 85. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 86. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 87. Weak Mutation 90: org.apache.commons.math.stat.Frequency.getPct(J)D:345 - InsertUnaryOp Negation
   * Goal 88. Weak Mutation 0: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:83 - ReplaceConstant - Value 	 Freq. 	 Pct. 	 Cum Pct. 
 -> 
   * Goal 89. Weak Mutation 1: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceComparisonOperator == -> !=
   * Goal 90. Weak Mutation 41: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp Negation
   * Goal 91. Weak Mutation 42: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC 1
   * Goal 92. Weak Mutation 43: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC -1
   * Goal 93. Weak Mutation 38: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - instance of class {0} not comparable to existing values -> 
   * Goal 94. Weak Mutation 39: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 1 -> 0
   * Goal 95. Weak Mutation 40: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 0 -> 1
   * Goal 96. Weak Mutation 119: org.apache.commons.math.stat.Frequency.getCumFreq(J)J:447 - InsertUnaryOp Negation
   * Goal 97. org.apache.commons.math.stat.Frequency.getPct(J)D:zero
   * Goal 98. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:nonnull
   * Goal 99. org.apache.commons.math.stat.Frequency.getPct(J)D:positive
   * Goal 100. org.apache.commons.math.stat.Frequency.getCumFreq(J)J:zero
   * Goal 101. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 102. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 103. org.apache.commons.math.stat.Frequency.getPct(J)D
   * Goal 104. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 105. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 106. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 107. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 108. org.apache.commons.math.stat.Frequency.getPct(J)D
   * Goal 109. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 110. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 111. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 112. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 113. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 114. Branch org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(J)D
   * Goal 115. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 116. Branch org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(I)V
   * Goal 117. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 118. Branch org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(J)J
   */

  @Test
  public void test08()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      double double0 = frequency0.getPct(1L);
      long long0 = frequency0.getCumFreq(1L);
      String string0 = frequency0.toString();
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double1 = frequency0.getPct(0L);
      // Undeclared exception!
      try { 
        frequency0.addValue(1209);
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Long not comparable to existing values
         //
         assertThrownBy("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  //Test case number: 9
  /*
   * 259 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 256
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 13. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 399
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 144
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 400
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 146
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 402
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 403
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 148
   * Goal 21. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 404
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 406
   * Goal 25. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 410
   * Goal 26. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 411
   * Goal 27. org.apache.commons.math.stat.Frequency.getCount(C)J: Line 286
   * Goal 28. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: Line 564
   * Goal 29. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 186
   * Goal 30. org.apache.commons.math.stat.Frequency.hashCode()I: Line 572
   * Goal 31. org.apache.commons.math.stat.Frequency.<init>()V: Line 60
   * Goal 32. org.apache.commons.math.stat.Frequency.hashCode()I: Line 573
   * Goal 33. org.apache.commons.math.stat.Frequency.<init>()V: Line 61
   * Goal 34. org.apache.commons.math.stat.Frequency.hashCode()I: Line 574
   * Goal 35. org.apache.commons.math.stat.Frequency.hashCode()I: Line 575
   * Goal 36. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 37. org.apache.commons.math.stat.Frequency.clear()V: Line 191
   * Goal 38. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 39. org.apache.commons.math.stat.Frequency.clear()V: Line 192
   * Goal 40. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 323
   * Goal 41. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 81
   * Goal 42. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 82
   * Goal 43. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 83
   * Goal 44. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 84
   * Goal 45. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 85
   * Goal 46. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 86
   * Goal 47. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 87
   * Goal 48. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 49. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 88
   * Goal 50. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 51. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 89
   * Goal 52. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 53. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 90
   * Goal 54. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 55. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 91
   * Goal 56. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 92
   * Goal 57. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 58. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 93
   * Goal 59. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 94
   * Goal 60. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 95
   * Goal 61. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 96
   * Goal 62. org.apache.commons.math.stat.Frequency.getPct(C)D: Line 356
   * Goal 63. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 494
   * Goal 64. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 495
   * Goal 65. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 496
   * Goal 66. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 498
   * Goal 67. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 68. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 69. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 70. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 250
   * Goal 71. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 251
   * Goal 72. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 253
   * Goal 73. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 255
   * Goal 74. org.apache.commons.math.stat.Frequency.getCumPct(I)D: Line 511
   * Goal 75. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 76. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 77. org.apache.commons.math.stat.Frequency.clear()V: root-Branch
   * Goal 78. org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch
   * Goal 79. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 80. org.apache.commons.math.stat.Frequency.getCumPct(I)D: root-Branch
   * Goal 81. org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch
   * Goal 82. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 83. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 84. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 85. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 86. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 87. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 88. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 89. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - true
   * Goal 90. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 91. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 92. org.apache.commons.math.stat.Frequency.hashCode()I: I11 Branch 18 IFNONNULL L573 - true
   * Goal 93. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - false
   * Goal 94. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 95. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 96. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - false
   * Goal 97. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 98. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 99. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 100. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false
   * Goal 101. Weak Mutation 0: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:83 - ReplaceConstant - Value 	 Freq. 	 Pct. 	 Cum Pct. 
 -> 
   * Goal 102. Weak Mutation 1: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceComparisonOperator == -> !=
   * Goal 103. Weak Mutation 2: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 0
   * Goal 104. Weak Mutation 3: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 1
   * Goal 105. Weak Mutation 4: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> -1
   * Goal 106. Weak Mutation 5: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 8
   * Goal 107. Weak Mutation 6: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 10
   * Goal 108. Weak Mutation 7: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 0
   * Goal 109. Weak Mutation 8: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 1
   * Goal 110. Weak Mutation 9: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> -1
   * Goal 111. Weak Mutation 10: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 8
   * Goal 112. Weak Mutation 11: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 10
   * Goal 113. Weak Mutation 12: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 0
   * Goal 114. Weak Mutation 13: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 1
   * Goal 115. Weak Mutation 14: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> -1
   * Goal 116. Weak Mutation 15: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 8
   * Goal 117. Weak Mutation 16: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 10
   * Goal 118. Weak Mutation 17: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 0
   * Goal 119. Weak Mutation 18: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 1
   * Goal 120. Weak Mutation 19: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> -1
   * Goal 121. Weak Mutation 20: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 9
   * Goal 122. Weak Mutation 21: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 11
   * Goal 123. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 124. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 125. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 126. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 127. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 128. Weak Mutation 38: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - instance of class {0} not comparable to existing values -> 
   * Goal 129. Weak Mutation 39: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 1 -> 0
   * Goal 130. Weak Mutation 40: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 0 -> 1
   * Goal 131. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp Negation
   * Goal 132. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC 1
   * Goal 133. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC -1
   * Goal 134. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 135. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 136. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 137. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 138. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 139. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 140. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 141. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 142. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 143. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 144. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 145. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 146. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:250 - ReplaceComparisonOperator = null -> != null
   * Goal 147. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 148. Weak Mutation 66: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp Negation
   * Goal 149. Weak Mutation 67: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC 1
   * Goal 150. Weak Mutation 68: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC -1
   * Goal 151. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 152. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 153. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 154. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 155. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 156. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 157. Weak Mutation 84: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> %
   * Goal 158. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 159. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp Negation
   * Goal 160. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC 1
   * Goal 161. Weak Mutation 93: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC -1
   * Goal 162. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 163. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 164. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 165. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 166. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 167. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 168. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 169. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 170. Weak Mutation 106: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:403 - InsertUnaryOp Negation
   * Goal 171. Weak Mutation 108: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> ==
   * Goal 172. Weak Mutation 109: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> >
   * Goal 173. Weak Mutation 113: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> !=
   * Goal 174. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> <=
   * Goal 175. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 176. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 177. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 178. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> -1
   * Goal 179. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 180. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 0.0
   * Goal 181. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 1.0
   * Goal 182. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> -1.0
   * Goal 183. Weak Mutation 132: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> NaN
   * Goal 184. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - InsertUnaryOp Negation
   * Goal 185. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> +
   * Goal 186. Weak Mutation 135: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> %
   * Goal 187. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> -
   * Goal 188. Weak Mutation 138: org.apache.commons.math.stat.Frequency.getCumPct(I)D:511 - InsertUnaryOp Negation
   * Goal 189. Weak Mutation 139: org.apache.commons.math.stat.Frequency.getCumPct(I)D:511 - InsertUnaryOp IINC 1
   * Goal 190. Weak Mutation 140: org.apache.commons.math.stat.Frequency.getCumPct(I)D:511 - InsertUnaryOp IINC -1
   * Goal 191. Weak Mutation 145: org.apache.commons.math.stat.Frequency.hashCode()I:572 - ReplaceConstant - 1 -> 0
   * Goal 192. Weak Mutation 146: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 0
   * Goal 193. Weak Mutation 147: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 1
   * Goal 194. Weak Mutation 148: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> -1
   * Goal 195. Weak Mutation 149: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 30
   * Goal 196. Weak Mutation 150: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 32
   * Goal 197. Weak Mutation 151: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp Negation
   * Goal 198. Weak Mutation 152: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp IINC 1
   * Goal 199. Weak Mutation 153: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp IINC -1
   * Goal 200. Weak Mutation 154: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> +
   * Goal 201. Weak Mutation 155: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> %
   * Goal 202. Weak Mutation 156: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> -
   * Goal 203. Weak Mutation 158: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceComparisonOperator != null -> = null
   * Goal 204. Weak Mutation 160: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> %
   * Goal 205. Weak Mutation 161: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> -
   * Goal 206. Weak Mutation 162: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> *
   * Goal 207. Weak Mutation 163: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> /
   * Goal 208. Weak Mutation 164: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp Negation
   * Goal 209. Weak Mutation 165: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp IINC 1
   * Goal 210. Weak Mutation 166: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp IINC -1
   * Goal 211. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:positive
   * Goal 212. org.apache.commons.math.stat.Frequency.getCumPct(I)D:positive
   * Goal 213. org.apache.commons.math.stat.Frequency.getCount(C)J:zero
   * Goal 214. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:nonnull
   * Goal 215. org.apache.commons.math.stat.Frequency.getPct(C)D:zero
   * Goal 216. org.apache.commons.math.stat.Frequency.getCumPct(I)D:zero
   * Goal 217. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 218. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 219. org.apache.commons.math.stat.Frequency.getCumPct(I)D
   * Goal 220. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 221. org.apache.commons.math.stat.Frequency.hashCode()I
   * Goal 222. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 223. org.apache.commons.math.stat.Frequency.clear()V
   * Goal 224. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 225. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J
   * Goal 226. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 227. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J
   * Goal 228. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 229. org.apache.commons.math.stat.Frequency.getCumPct(I)D
   * Goal 230. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 231. org.apache.commons.math.stat.Frequency.hashCode()I
   * Goal 232. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 233. org.apache.commons.math.stat.Frequency.clear()V
   * Goal 234. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 235. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J
   * Goal 236. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 237. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J
   * Goal 238. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 239. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 240. Branch org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(C)J
   * Goal 241. Branch org.apache.commons.math.stat.Frequency.getCumPct(I)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(I)D
   * Goal 242. Branch org.apache.commons.math.stat.Frequency.hashCode()I: I11 Branch 18 IFNONNULL L573 - true in context: org.apache.commons.math.stat.Frequency:hashCode()I
   * Goal 243. Branch org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(C)D
   * Goal 244. Branch org.apache.commons.math.stat.Frequency.clear()V: root-Branch in context: org.apache.commons.math.stat.Frequency:clear()V
   * Goal 245. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 246. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 247. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - false in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 248. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 249. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 250. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Comparable;)J
   * Goal 251. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 252. addValue(C)V_org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException_EXPLICIT
   * Goal 253. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:positive
   * Goal 254. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 255. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 256. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - false in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Comparable;)J
   * Goal 257. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 258. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 259. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   */

  @Test
  public void test09()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      String string0 = frequency0.toString();
      frequency0.clear();
      double double0 = frequency0.getCumPct(1);
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double1 = frequency0.getCumPct(157);
      long long0 = frequency0.getCount((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      int int0 = frequency0.hashCode();
      double double2 = frequency0.getPct('v');
      String string1 = frequency0.toString();
      long long1 = frequency0.getCumFreq((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
      long long2 = frequency0.getCount('v');
      // Undeclared exception!
      try { 
        frequency0.addValue('v');
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Character not comparable to existing values
         //
         assertThrownBy("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  //Test case number: 10
  /*
   * 98 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 2. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 256
   * Goal 3. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 323
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 5. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 10. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: Line 204
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 144
   * Goal 13. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 81
   * Goal 14. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 82
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 146
   * Goal 16. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 83
   * Goal 17. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 84
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 148
   * Goal 19. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 85
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 22. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 23. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 24. org.apache.commons.math.stat.Frequency.getPct(J)D: Line 345
   * Goal 25. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 26. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 27. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 28. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 96
   * Goal 29. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 168
   * Goal 30. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 31. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 32. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 33. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 253
   * Goal 34. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 35. org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch
   * Goal 36. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 37. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 38. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 39. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 40. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 41. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 42. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 43. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 44. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 45. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 46. addValue(Ljava/lang/Integer;)V_org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException_EXPLICIT
   * Goal 47. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 48. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 49. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 50. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 51. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 52. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 53. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 54. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 55. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 56. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 57. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 58. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 59. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 60. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 61. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 62. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 63. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 64. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 65. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 66. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 67. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 68. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 69. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 70. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 71. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 72. Weak Mutation 90: org.apache.commons.math.stat.Frequency.getPct(J)D:345 - InsertUnaryOp Negation
   * Goal 73. Weak Mutation 0: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:83 - ReplaceConstant - Value 	 Freq. 	 Pct. 	 Cum Pct. 
 -> 
   * Goal 74. Weak Mutation 1: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceComparisonOperator == -> !=
   * Goal 75. Weak Mutation 38: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - instance of class {0} not comparable to existing values -> 
   * Goal 76. Weak Mutation 39: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 1 -> 0
   * Goal 77. Weak Mutation 40: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 0 -> 1
   * Goal 78. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;:nonnull
   * Goal 79. org.apache.commons.math.stat.Frequency.getPct(J)D:zero
   * Goal 80. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:nonnull
   * Goal 81. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 82. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 83. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 84. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 85. org.apache.commons.math.stat.Frequency.getPct(J)D
   * Goal 86. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 87. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 88. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 89. org.apache.commons.math.stat.Frequency.getPct(J)D
   * Goal 90. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 91. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 92. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 93. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 94. Branch org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch in context: org.apache.commons.math.stat.Frequency:valuesIterator()Ljava/util/Iterator;
   * Goal 95. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 96. Branch org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(J)D
   * Goal 97. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 98. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   */

  @Test
  public void test10()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      String string0 = frequency0.toString();
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double0 = frequency0.getPct((-827L));
      Integer integer0 = new Integer(0);
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      // Undeclared exception!
      try { 
        frequency0.addValue(integer0);
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Long not comparable to existing values
         //
         assertThrownBy("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  //Test case number: 11
  /*
   * 206 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 386
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 389
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 399
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 144
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 146
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 404
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 148
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 22. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 406
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumPct(C)D: Line 537
   * Goal 25. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 410
   * Goal 26. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 411
   * Goal 27. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 304
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 177
   * Goal 29. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 306
   * Goal 30. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 178
   * Goal 31. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: Line 564
   * Goal 32. org.apache.commons.math.stat.Frequency.<init>()V: Line 60
   * Goal 33. org.apache.commons.math.stat.Frequency.<init>()V: Line 61
   * Goal 34. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 35. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: Line 447
   * Goal 36. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 37. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 321
   * Goal 38. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 581
   * Goal 39. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 582
   * Goal 40. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 41. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 583
   * Goal 42. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 43. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 585
   * Goal 44. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 587
   * Goal 45. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 588
   * Goal 46. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 591
   * Goal 47. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 593
   * Goal 48. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 49. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 50. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 51. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 52. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 53. org.apache.commons.math.stat.Frequency.getPct(C)D: Line 356
   * Goal 54. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 494
   * Goal 55. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 495
   * Goal 56. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 496
   * Goal 57. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 113
   * Goal 58. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 114
   * Goal 59. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 120
   * Goal 60. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 61. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 62. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 63. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 64. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 65. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - false
   * Goal 66. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false
   * Goal 67. org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch
   * Goal 68. org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch
   * Goal 69. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I12 Branch 20 IFNONNULL L583 - true
   * Goal 70. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 71. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 72. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 73. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 74. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 75. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 76. org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch
   * Goal 77. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - true
   * Goal 78. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 79. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 80. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch
   * Goal 81. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - false
   * Goal 82. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - false
   * Goal 83. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch
   * Goal 84. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - false
   * Goal 85. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFEQ L113 - false
   * Goal 86. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFNE L585 - true
   * Goal 87. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I35 Branch 22 IFNONNULL L588 - true
   * Goal 88. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I52 Branch 24 IFNE L591 - true
   * Goal 89. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 90. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 91. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 92. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 93. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 94. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 95. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 96. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> -1
   * Goal 97. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> 1
   * Goal 98. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> -1
   * Goal 99. Weak Mutation 22: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:113 - ReplaceComparisonOperator == -> !=
   * Goal 100. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 101. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 102. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 103. Weak Mutation 75: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> -1
   * Goal 104. Weak Mutation 78: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 0.0
   * Goal 105. Weak Mutation 79: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 1.0
   * Goal 106. Weak Mutation 80: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> -1.0
   * Goal 107. Weak Mutation 81: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> NaN
   * Goal 108. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 109. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 110. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 111. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> -1
   * Goal 112. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 0.0
   * Goal 113. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 1.0
   * Goal 114. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> -1.0
   * Goal 115. Weak Mutation 132: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> NaN
   * Goal 116. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 117. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 118. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 119. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 120. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 121. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 122. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 123. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 124. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 125. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp Negation
   * Goal 126. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC 1
   * Goal 127. Weak Mutation 93: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC -1
   * Goal 128. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 129. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 130. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 131. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 132. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 133. Weak Mutation 142: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp Negation
   * Goal 134. Weak Mutation 143: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC 1
   * Goal 135. Weak Mutation 144: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC -1
   * Goal 136. Weak Mutation 167: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:581 - ReplaceComparisonOperator != -> ==
   * Goal 137. Weak Mutation 169: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:583 - ReplaceComparisonOperator != null -> = null
   * Goal 138. Weak Mutation 171: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:585 - ReplaceComparisonOperator != -> ==
   * Goal 139. Weak Mutation 44: org.apache.commons.math.stat.Frequency.addValue(J)V:177 - InsertUnaryOp Negation
   * Goal 140. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 141. Weak Mutation 108: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> ==
   * Goal 142. Weak Mutation 113: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> !=
   * Goal 143. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 0
   * Goal 144. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 1
   * Goal 145. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> -2
   * Goal 146. Weak Mutation 168: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:582 - ReplaceConstant - 1 -> 0
   * Goal 147. Weak Mutation 38: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - instance of class {0} not comparable to existing values -> 
   * Goal 148. Weak Mutation 39: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 1 -> 0
   * Goal 149. Weak Mutation 40: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 0 -> 1
   * Goal 150. Weak Mutation 119: org.apache.commons.math.stat.Frequency.getCumFreq(J)J:447 - InsertUnaryOp Negation
   * Goal 151. Weak Mutation 173: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:588 - ReplaceComparisonOperator != null -> = null
   * Goal 152. Weak Mutation 176: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:591 - ReplaceComparisonOperator != -> ==
   * Goal 153. Weak Mutation 178: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:593 - ReplaceConstant - 1 -> 0
   * Goal 154. org.apache.commons.math.stat.Frequency.getSumFreq()J:zero
   * Goal 155. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:positive
   * Goal 156. org.apache.commons.math.stat.Frequency.getPct(C)D:positive
   * Goal 157. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:zero
   * Goal 158. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:true
   * Goal 159. org.apache.commons.math.stat.Frequency.getCumPct(C)D:positive
   * Goal 160. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:positive
   * Goal 161. org.apache.commons.math.stat.Frequency.getCumFreq(J)J:zero
   * Goal 162. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 163. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 164. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V
   * Goal 165. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 166. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D
   * Goal 167. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 168. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 169. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z
   * Goal 170. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 171. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J
   * Goal 172. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 173. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 174. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 175. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 176. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 177. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D
   * Goal 178. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 179. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 180. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z
   * Goal 181. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 182. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J
   * Goal 183. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 184. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 185. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 186. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 187. Branch org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true in context: org.apache.commons.math.stat.Frequency:getSumFreq()J
   * Goal 188. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Comparable;)D
   * Goal 189. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I12 Branch 20 IFNONNULL L583 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 190. Branch org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(C)D
   * Goal 191. Branch org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(C)D
   * Goal 192. Branch org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(J)V
   * Goal 193. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 194. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 195. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D
   * Goal 196. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - false in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 197. Branch org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(J)J
   * Goal 198. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFEQ L113 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V
   * Goal 199. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I52 Branch 24 IFNE L591 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 200. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I35 Branch 22 IFNONNULL L588 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 201. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFNE L585 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 202. addValue(Ljava/lang/Object;)V_org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException_EXPLICIT
   * Goal 203. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:positive
   * Goal 204. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V
   * Goal 205. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 206. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   */

  @Test
  public void test11()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Long long0 = Long.getLong("", (-1L));
      Long long1 = Long.getLong("", long0);
      int int0 = Long.compare((-1L), 3287L);
      Long long2 = Long.getLong("", (-1L));
      double double0 = frequency0.getPct('H');
      double double1 = frequency0.getPct((Object) long1);
      long long3 = frequency0.getCumFreq((Comparable<?>) long0);
      Frequency frequency1 = new Frequency((Comparator<?>) null);
      boolean boolean0 = frequency0.equals(frequency1);
      long long4 = frequency1.getSumFreq();
      double double2 = frequency1.getCumPct('{');
      long long5 = frequency1.getCumFreq((-1L));
      double double3 = frequency1.getCumPct((Comparable<?>) "");
      frequency0.addValue(3287L);
      long long6 = frequency1.getCumFreq(0L);
      Integer integer0 = new Integer(0);
      int int1 = Integer.sum(0, 0);
      long long7 = Integer.toUnsignedLong(1);
      frequency1.addValue((Object) integer0);
      int int2 = Long.BYTES;
      long long8 = frequency1.getCumFreq((Comparable<?>) 8);
      boolean boolean1 = frequency0.equals(frequency0);
      // Undeclared exception!
      try { 
        frequency0.addValue((Object) "");
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.String not comparable to existing values
         //
         assertThrownBy("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  //Test case number: 12
  /*
   * 140 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 6. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 10. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 13. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 14. org.apache.commons.math.stat.Frequency.hashCode()I: I11 Branch 18 IFNONNULL L573 - true
   * Goal 15. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - true
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 17. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 18. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - false
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 21. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 22. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 23. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I12 Branch 20 IFNONNULL L583 - false
   * Goal 24. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 25. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 26. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 27. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 28. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 29. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 31. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 32. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> -1
   * Goal 33. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> 1
   * Goal 34. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> -1
   * Goal 35. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 36. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 37. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 38. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:250 - ReplaceComparisonOperator = null -> != null
   * Goal 39. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 40. Weak Mutation 66: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp Negation
   * Goal 41. Weak Mutation 67: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC 1
   * Goal 42. Weak Mutation 68: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC -1
   * Goal 43. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 44. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 45. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 46. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp Negation
   * Goal 47. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC 1
   * Goal 48. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC -1
   * Goal 49. Weak Mutation 145: org.apache.commons.math.stat.Frequency.hashCode()I:572 - ReplaceConstant - 1 -> 0
   * Goal 50. Weak Mutation 146: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 0
   * Goal 51. Weak Mutation 147: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 1
   * Goal 52. Weak Mutation 148: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> -1
   * Goal 53. Weak Mutation 149: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 30
   * Goal 54. Weak Mutation 150: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 32
   * Goal 55. Weak Mutation 151: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp Negation
   * Goal 56. Weak Mutation 152: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp IINC 1
   * Goal 57. Weak Mutation 153: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp IINC -1
   * Goal 58. Weak Mutation 154: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> +
   * Goal 59. Weak Mutation 155: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> %
   * Goal 60. Weak Mutation 156: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> -
   * Goal 61. Weak Mutation 158: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceComparisonOperator != null -> = null
   * Goal 62. Weak Mutation 160: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> %
   * Goal 63. Weak Mutation 163: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> /
   * Goal 64. Weak Mutation 164: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp Negation
   * Goal 65. Weak Mutation 165: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp IINC 1
   * Goal 66. Weak Mutation 166: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp IINC -1
   * Goal 67. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 68. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 69. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 70. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 71. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 72. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 73. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 74. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 75. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 76. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 77. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 78. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 79. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 80. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 81. Weak Mutation 167: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:581 - ReplaceComparisonOperator != -> ==
   * Goal 82. Weak Mutation 169: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:583 - ReplaceComparisonOperator != null -> = null
   * Goal 83. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 84. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 85. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 86. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 87. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 88. Weak Mutation 0: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:83 - ReplaceConstant - Value 	 Freq. 	 Pct. 	 Cum Pct. 
 -> 
   * Goal 89. Weak Mutation 1: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceComparisonOperator == -> !=
   * Goal 90. Weak Mutation 84: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> %
   * Goal 91. Weak Mutation 109: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> >
   * Goal 92. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> <=
   * Goal 93. Weak Mutation 170: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:584 - ReplaceConstant - 0 -> 1
   * Goal 94. Weak Mutation 161: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> -
   * Goal 95. Weak Mutation 162: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> *
   * Goal 96. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;:nonnull
   * Goal 97. org.apache.commons.math.stat.Frequency.getCount(C)J:zero
   * Goal 98. org.apache.commons.math.stat.Frequency.getCumFreq(C)J:zero
   * Goal 99. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:positive
   * Goal 100. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:false
   * Goal 101. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:nonnull
   * Goal 102. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:positive
   * Goal 103. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 104. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 105. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 106. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 107. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 108. org.apache.commons.math.stat.Frequency.hashCode()I
   * Goal 109. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D
   * Goal 110. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z
   * Goal 111. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 112. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J
   * Goal 113. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 114. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 115. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 116. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 117. org.apache.commons.math.stat.Frequency.hashCode()I
   * Goal 118. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D
   * Goal 119. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z
   * Goal 120. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 121. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J
   * Goal 122. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 123. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 124. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 125. Branch org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch in context: org.apache.commons.math.stat.Frequency:valuesIterator()Ljava/util/Iterator;
   * Goal 126. Branch org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(C)J
   * Goal 127. Branch org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(C)J
   * Goal 128. Branch org.apache.commons.math.stat.Frequency.hashCode()I: I11 Branch 18 IFNONNULL L573 - true in context: org.apache.commons.math.stat.Frequency:hashCode()I
   * Goal 129. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 130. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 131. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 132. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 133. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I12 Branch 20 IFNONNULL L583 - false in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 134. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Comparable;)D
   * Goal 135. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 136. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 137. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 138. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 139. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 140. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 253
   */

  @Test
  public void test12()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      boolean boolean0 = frequency0.equals((Object) null);
      long long0 = frequency0.getCumFreq('T');
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      long long1 = frequency0.getCumFreq('.');
      String string0 = frequency0.toString();
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double0 = frequency0.getPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      long long2 = frequency0.getCount('Z');
      int int0 = frequency0.hashCode();
      long long3 = frequency0.getCumFreq((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
  }

  //Test case number: 13
  /*
   * 18 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 113
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 114
   * Goal 3. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFEQ L113 - false
   * Goal 7. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 8. Weak Mutation 22: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:113 - ReplaceComparisonOperator == -> !=
   * Goal 9. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 10. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 11. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 12. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 13. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V
   * Goal 15. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V
   * Goal 17. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 18. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFEQ L113 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V
   */

  @Test
  public void test13()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      Long long0 = new Long(0L);
      frequency0.addValue((Object) long0);
  }

  //Test case number: 14
  /*
   * 138 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 2. org.apache.commons.math.stat.Frequency.clear()V: Line 192
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 4. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 321
   * Goal 5. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 386
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 7. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 9. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 13. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: Line 459
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 19. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: Line 204
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 21. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 402
   * Goal 22. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 403
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 25. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 26. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 27. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 28. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 29. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 478
   * Goal 31. org.apache.commons.math.stat.Frequency.getPct(C)D: Line 356
   * Goal 32. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 168
   * Goal 33. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 169
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 494
   * Goal 35. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 495
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 498
   * Goal 37. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 372
   * Goal 38. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 39. org.apache.commons.math.stat.Frequency.clear()V: Line 191
   * Goal 40. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: Line 447
   * Goal 41. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 42. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch
   * Goal 43. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch
   * Goal 44. org.apache.commons.math.stat.Frequency.clear()V: root-Branch
   * Goal 45. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch
   * Goal 46. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch
   * Goal 47. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 48. org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch
   * Goal 49. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 50. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 51. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 52. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 53. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 54. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 55. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 56. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 57. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - false
   * Goal 58. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 59. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 60. getCumFreq(Ljava/lang/Object;)J_java.lang.NullPointerException_IMPLICIT
   * Goal 61. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 62. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 63. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 64. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 65. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 66. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 67. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 68. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> -1
   * Goal 69. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> 1
   * Goal 70. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> -1
   * Goal 71. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 72. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 73. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 74. Weak Mutation 75: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> -1
   * Goal 75. Weak Mutation 78: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 0.0
   * Goal 76. Weak Mutation 79: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 1.0
   * Goal 77. Weak Mutation 80: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> -1.0
   * Goal 78. Weak Mutation 81: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> NaN
   * Goal 79. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 80. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 81. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 82. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp Negation
   * Goal 83. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC 1
   * Goal 84. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC -1
   * Goal 85. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 86. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 87. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 88. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 89. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 90. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 91. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 92. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 93. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 94. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp Negation
   * Goal 95. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC 1
   * Goal 96. Weak Mutation 93: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC -1
   * Goal 97. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 98. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 99. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 100. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 101. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 102. Weak Mutation 106: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:403 - InsertUnaryOp Negation
   * Goal 103. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 104. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - InsertUnaryOp Negation
   * Goal 105. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> +
   * Goal 106. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> -
   * Goal 107. Weak Mutation 119: org.apache.commons.math.stat.Frequency.getCumFreq(J)J:447 - InsertUnaryOp Negation
   * Goal 108. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;:nonnull
   * Goal 109. org.apache.commons.math.stat.Frequency.getCumFreq(C)J:zero
   * Goal 110. org.apache.commons.math.stat.Frequency.getPct(C)D:positive
   * Goal 111. org.apache.commons.math.stat.Frequency.getCumFreq(J)J:zero
   * Goal 112. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 113. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 114. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 115. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 116. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 117. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 118. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 119. org.apache.commons.math.stat.Frequency.clear()V
   * Goal 120. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 121. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 122. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 123. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 124. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 125. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 126. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 127. org.apache.commons.math.stat.Frequency.clear()V
   * Goal 128. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 129. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 130. Branch org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch in context: org.apache.commons.math.stat.Frequency:valuesIterator()Ljava/util/Iterator;
   * Goal 131. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 132. Branch org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(C)J
   * Goal 133. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Object;)D
   * Goal 134. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 135. Branch org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(C)D
   * Goal 136. Branch org.apache.commons.math.stat.Frequency.clear()V: root-Branch in context: org.apache.commons.math.stat.Frequency:clear()V
   * Goal 137. Branch org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(J)J
   * Goal 138. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:zero
   */

  @Test
  public void test14()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      frequency0.clear();
      double double0 = frequency0.getPct('7');
      long long0 = frequency0.getCumFreq((-1L));
      long long1 = frequency0.getCumFreq(0L);
      Integer integer0 = new Integer((-325));
      frequency0.addValue(integer0);
      Iterator<Comparable<?>> iterator1 = frequency0.valuesIterator();
      long long2 = frequency0.getCumFreq('4');
      double double1 = frequency0.getCumPct((Object) "Yhwm'N!_qFx}B)~/<");
      int int0 = Integer.max((-325), (-325));
      // Undeclared exception!
      try { 
        frequency0.getCumFreq((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 15
  /*
   * 93 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 256
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 3. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 5. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 7. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumPct(J)D: Line 524
   * Goal 10. org.apache.commons.math.stat.Frequency.getCount(J)J: Line 276
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 15. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 16. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 168
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 169
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 494
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 495
   * Goal 21. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 496
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 113
   * Goal 23. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 116
   * Goal 25. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 245
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 118
   * Goal 27. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 28. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 29. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 250
   * Goal 30. org.apache.commons.math.stat.Frequency.<init>()V: Line 60
   * Goal 31. org.apache.commons.math.stat.Frequency.<init>()V: Line 61
   * Goal 32. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 255
   * Goal 33. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 34. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 35. org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch
   * Goal 36. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 37. org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch
   * Goal 38. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFEQ L113 - true
   * Goal 39. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 40. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 41. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 42. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - true
   * Goal 43. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false
   * Goal 44. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 45. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - false
   * Goal 46. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 0.0
   * Goal 47. Weak Mutation 65: org.apache.commons.math.stat.Frequency.getCount(J)J:276 - InsertUnaryOp Negation
   * Goal 48. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 1.0
   * Goal 49. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> -1.0
   * Goal 50. Weak Mutation 132: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> NaN
   * Goal 51. Weak Mutation 141: org.apache.commons.math.stat.Frequency.getCumPct(J)D:524 - InsertUnaryOp Negation
   * Goal 52. Weak Mutation 22: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:113 - ReplaceComparisonOperator == -> !=
   * Goal 53. Weak Mutation 23: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:116 - ReplaceConstant - class ({0}) does not implement Comparable -> 
   * Goal 54. Weak Mutation 24: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:116 - ReplaceConstant - 1 -> 0
   * Goal 55. Weak Mutation 25: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:116 - ReplaceConstant - 0 -> 1
   * Goal 56. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 57. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 58. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 59. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 60. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 61. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 62. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 63. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 64. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 65. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 66. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 67. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 68. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 69. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 70. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:250 - ReplaceComparisonOperator = null -> != null
   * Goal 71. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 72. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 73. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> -1
   * Goal 74. org.apache.commons.math.stat.Frequency.getCumPct(J)D:positive
   * Goal 75. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:zero
   * Goal 76. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFEQ L113 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V
   * Goal 77. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - false in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Comparable;)J
   * Goal 78. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 79. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 80. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V
   * Goal 81. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 82. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 83. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J
   * Goal 84. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 85. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 86. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 87. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 88. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J
   * Goal 89. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 90. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 91. Branch org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(J)D
   * Goal 92. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 93. addValue(Ljava/lang/Object;)V_org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException_EXPLICIT
   */

  @Test
  public void test15()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Integer integer0 = new Integer(498);
      frequency0.addValue(integer0);
      int int0 = Integer.max((-415), (-415));
      Frequency frequency1 = new Frequency((Comparator<?>) null);
      int int1 = Integer.compareUnsigned(498, 498);
      double double0 = frequency1.getCumPct((-3028L));
      long long0 = frequency1.getCount((Comparable<?>) integer0);
      // Undeclared exception!
      try { 
        frequency1.addValue((Object) frequency1);
      } catch(IllegalArgumentException e) {
         //
         // class (org.apache.commons.math.stat.Frequency) does not implement Comparable
         //
         assertThrownBy("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  //Test case number: 16
  /*
   * 109 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 4. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumPct(J)D: Line 524
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 399
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 400
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 404
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 21. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 406
   * Goal 22. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 23. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 24. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 25. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 26. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 410
   * Goal 27. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 411
   * Goal 28. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 478
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 494
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 495
   * Goal 32. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 177
   * Goal 33. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 178
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 498
   * Goal 35. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: Line 564
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: Line 447
   * Goal 37. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 38. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 39. org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch
   * Goal 40. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch
   * Goal 41. org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch
   * Goal 42. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch
   * Goal 43. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 44. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 45. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 46. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 47. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 48. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - true
   * Goal 49. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 50. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 51. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 52. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 53. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 54. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 55. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - InsertUnaryOp Negation
   * Goal 56. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> +
   * Goal 57. Weak Mutation 135: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> %
   * Goal 58. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> -
   * Goal 59. Weak Mutation 141: org.apache.commons.math.stat.Frequency.getCumPct(J)D:524 - InsertUnaryOp Negation
   * Goal 60. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 61. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 62. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 63. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 64. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 65. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 66. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 67. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 68. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 69. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 70. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 71. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 72. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 73. Weak Mutation 44: org.apache.commons.math.stat.Frequency.addValue(J)V:177 - InsertUnaryOp Negation
   * Goal 74. Weak Mutation 108: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> ==
   * Goal 75. Weak Mutation 109: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> >
   * Goal 76. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 77. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 78. Weak Mutation 113: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> !=
   * Goal 79. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 80. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> <=
   * Goal 81. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 82. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 83. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 84. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 85. Weak Mutation 119: org.apache.commons.math.stat.Frequency.getCumFreq(J)J:447 - InsertUnaryOp Negation
   * Goal 86. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 87. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 88. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 89. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 90. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 91. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 92. org.apache.commons.math.stat.Frequency.getCumPct(J)D:positive
   * Goal 93. org.apache.commons.math.stat.Frequency.getCumFreq(J)J:positive
   * Goal 94. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 95. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 96. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 97. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 98. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 99. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 100. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 101. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 102. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 103. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 104. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Object;)D
   * Goal 105. Branch org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(J)D
   * Goal 106. Branch org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(J)V
   * Goal 107. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 108. Branch org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(J)J
   * Goal 109. getCumPct(Ljava/lang/Object;)D_java.lang.ClassCastException_IMPLICIT
   */

  @Test
  public void test16()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      frequency0.addValue(0L);
      long long0 = frequency0.getCumFreq(0L);
      double double0 = frequency0.getCumPct(2498L);
      // Undeclared exception!
      try { 
        frequency0.getCumPct((Object) frequency0);
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 17
  /*
   * 122 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 2. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 256
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 4. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 323
   * Goal 5. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 389
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 10. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 13. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 399
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 400
   * Goal 21. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 404
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 406
   * Goal 25. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 26. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 27. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 28. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 410
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 411
   * Goal 31. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 32. org.apache.commons.math.stat.Frequency.getPct(C)D: Line 356
   * Goal 33. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 168
   * Goal 34. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 169
   * Goal 35. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 177
   * Goal 36. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 178
   * Goal 37. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: Line 564
   * Goal 38. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 39. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 372
   * Goal 40. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 41. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 42. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 253
   * Goal 43. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 44. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: Line 447
   * Goal 45. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 46. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 47. org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch
   * Goal 48. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch
   * Goal 49. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch
   * Goal 50. org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch
   * Goal 51. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 52. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 53. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 54. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 55. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 56. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 57. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 58. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 59. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 60. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 61. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - false
   * Goal 62. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 63. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 64. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 65. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 66. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 67. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 68. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 69. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 70. Weak Mutation 44: org.apache.commons.math.stat.Frequency.addValue(J)V:177 - InsertUnaryOp Negation
   * Goal 71. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 72. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 73. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 74. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 75. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 76. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 77. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 78. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 79. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 80. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 81. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 82. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 83. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 84. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 85. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 86. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 87. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 88. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 89. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 90. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 91. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp Negation
   * Goal 92. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC 1
   * Goal 93. Weak Mutation 93: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC -1
   * Goal 94. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 95. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 96. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 97. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 98. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 99. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 100. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 101. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 102. Weak Mutation 108: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> ==
   * Goal 103. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> <=
   * Goal 104. Weak Mutation 119: org.apache.commons.math.stat.Frequency.getCumFreq(J)J:447 - InsertUnaryOp Negation
   * Goal 105. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:positive
   * Goal 106. org.apache.commons.math.stat.Frequency.getPct(C)D:zero
   * Goal 107. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 108. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 109. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 110. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 111. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 112. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 113. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 114. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 115. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 116. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 117. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 118. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 119. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 120. Branch org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(C)D
   * Goal 121. Branch org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(J)V
   * Goal 122. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   */

  @Test
  public void test17()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      Integer integer0 = new Integer(624);
      frequency0.addValue(integer0);
      double double0 = frequency0.getPct(':');
      frequency0.addValue(0L);
      long long0 = frequency0.getCumFreq((Object) integer0);
      try { 
        Integer.parseUnsignedInt("gT;\"Jo>g[V", 9);
      } catch(NumberFormatException e) {
         //
         // For input string: \"gT;\"Jo>g[V\"
         //
         assertThrownBy("java.lang.NumberFormatException", e);
      }
  }

  //Test case number: 18
  /*
   * 40 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 5. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: Line 204
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 372
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 10. org.apache.commons.math.stat.Frequency.<init>()V: Line 60
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>()V: Line 61
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 158
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 159
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 15. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 16. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 20. getCumFreq(Ljava/lang/Object;)J_java.lang.ClassCastException_IMPLICIT
   * Goal 21. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 22. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 23. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 24. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 25. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 26. Weak Mutation 41: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp Negation
   * Goal 27. Weak Mutation 42: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC 1
   * Goal 28. Weak Mutation 43: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC -1
   * Goal 29. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;:nonnull
   * Goal 30. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 31. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 33. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 34. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 35. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 36. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 37. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 38. Branch org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch in context: org.apache.commons.math.stat.Frequency:valuesIterator()Ljava/util/Iterator;
   * Goal 39. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 40. Branch org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(I)V
   */

  @Test
  public void test18()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      frequency0.addValue((-1));
      // Undeclared exception!
      try { 
        frequency0.getCumFreq((Object) frequency0);
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 19
  /*
   * 53 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 2. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 256
   * Goal 3. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 323
   * Goal 4. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.getPct(I)D: root-Branch
   * Goal 8. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - true
   * Goal 10. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch
   * Goal 13. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 14. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 15. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 16. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 17. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 18. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 19. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 20. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 22. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:250 - ReplaceComparisonOperator = null -> != null
   * Goal 23. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 26. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 27. Weak Mutation 87: org.apache.commons.math.stat.Frequency.getPct(I)D:334 - InsertUnaryOp Negation
   * Goal 28. Weak Mutation 88: org.apache.commons.math.stat.Frequency.getPct(I)D:334 - InsertUnaryOp IINC 1
   * Goal 29. Weak Mutation 89: org.apache.commons.math.stat.Frequency.getPct(I)D:334 - InsertUnaryOp IINC -1
   * Goal 30. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 31. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 32. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 33. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 34. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 35. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 36. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 37. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 38. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 39. Weak Mutation 44: org.apache.commons.math.stat.Frequency.addValue(J)V:177 - InsertUnaryOp Negation
   * Goal 40. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 41. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 42. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 43. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 44. org.apache.commons.math.stat.Frequency.getPct(I)D:zero
   * Goal 45. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 46. org.apache.commons.math.stat.Frequency.getPct(I)D
   * Goal 47. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 48. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 49. org.apache.commons.math.stat.Frequency.getPct(I)D
   * Goal 50. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 51. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 52. Branch org.apache.commons.math.stat.Frequency.getPct(I)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(I)D
   * Goal 53. Branch org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(J)V
   */

  @Test
  public void test19()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue(0L);
      double double0 = frequency0.getPct((-3010));
  }

  //Test case number: 20
  /*
   * 127 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 2. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 321
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 386
   * Goal 5. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 9. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumPct(J)D: Line 524
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 399
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 404
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 22. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 406
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 24. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 25. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 407
   * Goal 26. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 27. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 28. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 29. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 30. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 158
   * Goal 31. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 159
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 494
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 495
   * Goal 34. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 304
   * Goal 35. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 306
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 498
   * Goal 37. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: Line 564
   * Goal 38. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 39. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch
   * Goal 40. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 41. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 42. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 43. org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch
   * Goal 44. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 45. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 46. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 47. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 48. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 49. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - true
   * Goal 50. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 51. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 52. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - false
   * Goal 53. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 54. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 55. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - false
   * Goal 56. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - InsertUnaryOp Negation
   * Goal 57. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> +
   * Goal 58. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> -
   * Goal 59. Weak Mutation 141: org.apache.commons.math.stat.Frequency.getCumPct(J)D:524 - InsertUnaryOp Negation
   * Goal 60. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 61. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 62. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 63. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 64. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 65. Weak Mutation 41: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp Negation
   * Goal 66. Weak Mutation 42: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC 1
   * Goal 67. Weak Mutation 43: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC -1
   * Goal 68. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 69. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 70. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 71. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 72. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 73. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 74. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 75. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 76. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 77. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 0
   * Goal 78. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 1
   * Goal 79. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> -2
   * Goal 80. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 81. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 82. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 83. Weak Mutation 75: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> -1
   * Goal 84. Weak Mutation 78: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 0.0
   * Goal 85. Weak Mutation 79: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 1.0
   * Goal 86. Weak Mutation 80: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> -1.0
   * Goal 87. Weak Mutation 81: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> NaN
   * Goal 88. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 89. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 90. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> -1
   * Goal 91. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 92. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> 1
   * Goal 93. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> -1
   * Goal 94. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 95. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 96. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 97. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 98. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 99. Weak Mutation 107: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> -1
   * Goal 100. Weak Mutation 110: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:407 - ReplaceConstant - 0 -> 1
   * Goal 101. Weak Mutation 111: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:407 - ReplaceConstant - 0 -> -1
   * Goal 102. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 103. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 104. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 105. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 106. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:zero
   * Goal 107. org.apache.commons.math.stat.Frequency.getCumPct(J)D:zero
   * Goal 108. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:positive
   * Goal 109. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 110. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 111. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D
   * Goal 112. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J
   * Goal 113. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 114. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 115. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 116. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 117. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J
   * Goal 118. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 119. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 120. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 121. Branch org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(J)D
   * Goal 122. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 123. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 124. Branch org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(I)V
   * Goal 125. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D
   * Goal 126. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Comparable;)D
   * Goal 127. getCumPct(Ljava/lang/Comparable;)D_java.lang.NullPointerException_IMPLICIT
   */

  @Test
  public void test20()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      double double0 = frequency0.getPct((Object) null);
      long long0 = frequency0.getCumFreq((Comparable<?>) null);
      frequency0.addValue(1);
      double double1 = frequency0.getCumPct((-3330L));
      // Undeclared exception!
      try { 
        frequency0.getCumPct((Comparable<?>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 21
  /*
   * 63 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 2. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 323
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 4. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 7. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 10. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 13. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 15. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 16. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 17. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 186
   * Goal 19. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 187
   * Goal 21. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 22. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 23. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 25. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 26. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 27. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 28. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 29. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 30. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 31. getPct(Ljava/lang/Comparable;)D_java.lang.NullPointerException_IMPLICIT
   * Goal 32. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 33. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 34. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 35. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 36. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 37. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 38. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 39. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 40. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 41. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 42. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 43. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 44. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 45. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 46. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 47. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 48. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 49. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 50. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 51. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 52. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 53. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp Negation
   * Goal 54. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC 1
   * Goal 55. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC -1
   * Goal 56. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 57. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D
   * Goal 58. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 59. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 60. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 61. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 62. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 63. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Comparable;)D
   */

  @Test
  public void test21()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      frequency0.addValue('l');
      // Undeclared exception!
      try { 
        frequency0.getPct((Comparable<?>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 22
  /*
   * 52 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 2. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 321
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 386
   * Goal 5. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 7. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 304
   * Goal 8. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 306
   * Goal 9. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 10. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 11. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 13. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: Line 447
   * Goal 15. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 16. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 18. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - false
   * Goal 19. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch
   * Goal 20. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 22. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 23. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 26. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> -1
   * Goal 27. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> 1
   * Goal 28. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> -1
   * Goal 29. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 31. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 32. Weak Mutation 75: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> -1
   * Goal 33. Weak Mutation 78: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 0.0
   * Goal 34. Weak Mutation 79: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 1.0
   * Goal 35. Weak Mutation 80: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> -1.0
   * Goal 36. Weak Mutation 81: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> NaN
   * Goal 37. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 0
   * Goal 38. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 1
   * Goal 39. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> -2
   * Goal 40. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:positive
   * Goal 41. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 42. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 43. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 44. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 45. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 46. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D
   * Goal 47. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch
   * Goal 48. Weak Mutation 119: org.apache.commons.math.stat.Frequency.getCumFreq(J)J:447 - InsertUnaryOp Negation
   * Goal 49. org.apache.commons.math.stat.Frequency.getCumFreq(J)J:zero
   * Goal 50. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 51. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 52. Branch org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(J)J
   */

  @Test
  public void test22()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      long long0 = frequency0.getCumFreq(2891L);
      double double0 = frequency0.getPct((Object) null);
      Integer integer0 = null;
      try {
        integer0 = new Integer((String) null);
      } catch(NumberFormatException e) {
         //
         // null
         //
         assertThrownBy("java.lang.Integer", e);
      }
  }

  //Test case number: 23
  /*
   * 142 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 2. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 256
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 4. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 323
   * Goal 5. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 7. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: Line 459
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumPct(J)D: Line 524
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 399
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 400
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 404
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 23. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 406
   * Goal 24. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 25. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 26. org.apache.commons.math.stat.Frequency.getPct(J)D: Line 345
   * Goal 27. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 28. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 410
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 411
   * Goal 31. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 494
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 495
   * Goal 34. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 304
   * Goal 35. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 496
   * Goal 36. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 306
   * Goal 37. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: Line 564
   * Goal 38. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 39. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 40. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 41. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 186
   * Goal 42. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 187
   * Goal 43. org.apache.commons.math.stat.Frequency.<init>()V: Line 60
   * Goal 44. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 253
   * Goal 45. org.apache.commons.math.stat.Frequency.<init>()V: Line 61
   * Goal 46. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 47. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 48. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 49. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch
   * Goal 50. org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch
   * Goal 51. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch
   * Goal 52. org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch
   * Goal 53. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 54. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 55. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 56. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 57. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 58. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 59. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 60. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 61. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false
   * Goal 62. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 63. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 64. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 65. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 66. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 67. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 0.0
   * Goal 68. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 1.0
   * Goal 69. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> -1.0
   * Goal 70. Weak Mutation 132: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> NaN
   * Goal 71. Weak Mutation 141: org.apache.commons.math.stat.Frequency.getCumPct(J)D:524 - InsertUnaryOp Negation
   * Goal 72. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 73. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 74. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 75. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 76. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 77. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp Negation
   * Goal 78. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC 1
   * Goal 79. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC -1
   * Goal 80. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 81. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 82. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 83. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 84. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 85. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 86. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 87. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 88. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 89. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 90. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 91. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 92. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 93. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 0
   * Goal 94. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 1
   * Goal 95. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> -2
   * Goal 96. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 97. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 98. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 99. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 100. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 101. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 102. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 103. Weak Mutation 90: org.apache.commons.math.stat.Frequency.getPct(J)D:345 - InsertUnaryOp Negation
   * Goal 104. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 105. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 106. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 107. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 108. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 109. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 110. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 111. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 112. Weak Mutation 109: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> >
   * Goal 113. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> <=
   * Goal 114. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp Negation
   * Goal 115. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC 1
   * Goal 116. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC -1
   * Goal 117. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 118. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 119. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 120. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> -1
   * Goal 121. org.apache.commons.math.stat.Frequency.getPct(J)D:zero
   * Goal 122. org.apache.commons.math.stat.Frequency.getCumFreq(C)J:positive
   * Goal 123. org.apache.commons.math.stat.Frequency.getCumPct(J)D:positive
   * Goal 124. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 125. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 126. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 127. org.apache.commons.math.stat.Frequency.getPct(J)D
   * Goal 128. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 129. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 130. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 131. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 132. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 133. org.apache.commons.math.stat.Frequency.getPct(J)D
   * Goal 134. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 135. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 136. Branch org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(C)J
   * Goal 137. Branch org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(J)D
   * Goal 138. Branch org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(J)D
   * Goal 139. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 140. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 141. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D
   * Goal 142. getPct(Ljava/lang/Object;)D_java.lang.ClassCastException_IMPLICIT
   */

  @Test
  public void test23()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getCumPct(1L);
      frequency0.addValue('K');
      double double1 = frequency0.getPct(1L);
      long long0 = frequency0.getCumFreq('K');
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        frequency0.getPct(object0);
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 24
  /*
   * 174 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 256
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 13. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 399
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 400
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 404
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 406
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 410
   * Goal 21. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 411
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 177
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 178
   * Goal 24. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: Line 564
   * Goal 25. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 26. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 27. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 323
   * Goal 28. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 29. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 30. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: Line 204
   * Goal 31. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 81
   * Goal 32. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 82
   * Goal 33. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 83
   * Goal 34. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 84
   * Goal 35. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 85
   * Goal 36. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 86
   * Goal 37. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 87
   * Goal 38. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 39. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 88
   * Goal 40. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 41. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 89
   * Goal 42. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 43. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 90
   * Goal 44. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 45. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 91
   * Goal 46. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 92
   * Goal 47. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 48. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 93
   * Goal 49. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 94
   * Goal 50. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 95
   * Goal 51. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 96
   * Goal 52. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 233
   * Goal 53. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 494
   * Goal 54. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 495
   * Goal 55. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 498
   * Goal 56. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 57. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 58. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 59. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 250
   * Goal 60. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 251
   * Goal 61. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 253
   * Goal 62. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 255
   * Goal 63. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 64. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 65. org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch
   * Goal 66. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 67. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: root-Branch
   * Goal 68. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 69. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 70. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 71. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 72. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 73. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 74. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 75. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 76. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 77. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - false
   * Goal 78. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 79. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 80. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - false
   * Goal 81. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 82. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 83. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 84. getCount(Ljava/lang/Object;)J_java.lang.ClassCastException_IMPLICIT
   * Goal 85. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 86. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 87. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 88. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 89. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 90. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 91. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 92. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 93. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 94. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 95. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:250 - ReplaceComparisonOperator = null -> != null
   * Goal 96. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 97. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 98. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 99. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 100. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 101. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 102. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 103. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 104. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 105. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 106. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 107. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 108. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 109. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 110. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 111. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 112. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 113. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 114. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 115. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 116. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 117. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 118. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - InsertUnaryOp Negation
   * Goal 119. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> +
   * Goal 120. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> -
   * Goal 121. Weak Mutation 44: org.apache.commons.math.stat.Frequency.addValue(J)V:177 - InsertUnaryOp Negation
   * Goal 122. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 123. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 124. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 125. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 126. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 127. Weak Mutation 0: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:83 - ReplaceConstant - Value 	 Freq. 	 Pct. 	 Cum Pct. 
 -> 
   * Goal 128. Weak Mutation 1: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceComparisonOperator == -> !=
   * Goal 129. Weak Mutation 2: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 0
   * Goal 130. Weak Mutation 3: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 1
   * Goal 131. Weak Mutation 4: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> -1
   * Goal 132. Weak Mutation 5: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 8
   * Goal 133. Weak Mutation 6: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 10
   * Goal 134. Weak Mutation 7: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 0
   * Goal 135. Weak Mutation 8: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 1
   * Goal 136. Weak Mutation 9: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> -1
   * Goal 137. Weak Mutation 10: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 8
   * Goal 138. Weak Mutation 11: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 10
   * Goal 139. Weak Mutation 12: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 0
   * Goal 140. Weak Mutation 13: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 1
   * Goal 141. Weak Mutation 14: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> -1
   * Goal 142. Weak Mutation 15: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 8
   * Goal 143. Weak Mutation 16: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 10
   * Goal 144. Weak Mutation 17: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 0
   * Goal 145. Weak Mutation 18: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 1
   * Goal 146. Weak Mutation 19: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> -1
   * Goal 147. Weak Mutation 20: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 9
   * Goal 148. Weak Mutation 21: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 11
   * Goal 149. Weak Mutation 84: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> %
   * Goal 150. Weak Mutation 109: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> >
   * Goal 151. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> <=
   * Goal 152. Weak Mutation 135: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> %
   * Goal 153. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;:nonnull
   * Goal 154. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:nonnull
   * Goal 155. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:zero
   * Goal 156. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 157. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 158. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 159. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 160. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J
   * Goal 161. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J
   * Goal 162. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 163. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 164. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 165. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 166. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J
   * Goal 167. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 168. Branch org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch in context: org.apache.commons.math.stat.Frequency:valuesIterator()Ljava/util/Iterator;
   * Goal 169. Branch org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(J)V
   * Goal 170. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 171. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 172. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Object;)J
   * Goal 173. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - false in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 174. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Comparable;)J
   */

  @Test
  public void test24()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      frequency0.addValue(23L);
      String string0 = frequency0.toString();
      long long0 = frequency0.getCount((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n23\t1\t100%\t100%\n");
      // Undeclared exception!
      try { 
        frequency0.getCount((Object) iterator0);
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 25
  /*
   * 136 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.clear()V: Line 192
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 386
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: Line 459
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 14. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: Line 204
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 144
   * Goal 18. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 81
   * Goal 19. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 82
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 402
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 146
   * Goal 22. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 83
   * Goal 23. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 403
   * Goal 24. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 84
   * Goal 25. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 148
   * Goal 26. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 85
   * Goal 27. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 29. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 30. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumPct(C)D: Line 537
   * Goal 32. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 33. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 34. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 35. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 96
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 494
   * Goal 37. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 495
   * Goal 38. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 496
   * Goal 39. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 177
   * Goal 40. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 178
   * Goal 41. org.apache.commons.math.stat.Frequency.<init>()V: Line 60
   * Goal 42. org.apache.commons.math.stat.Frequency.<init>()V: Line 61
   * Goal 43. org.apache.commons.math.stat.Frequency.clear()V: Line 191
   * Goal 44. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch
   * Goal 45. org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch
   * Goal 46. org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch
   * Goal 47. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 48. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 49. org.apache.commons.math.stat.Frequency.clear()V: root-Branch
   * Goal 50. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 51. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 52. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 53. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 54. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 55. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false
   * Goal 56. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 57. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 58. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 59. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 60. addValue(Ljava/lang/Comparable;)V_org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException_EXPLICIT
   * Goal 61. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 62. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 63. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 64. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 65. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 66. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 67. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 68. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> -1
   * Goal 69. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> 1
   * Goal 70. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> -1
   * Goal 71. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 72. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 73. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 74. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> -1
   * Goal 75. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 0.0
   * Goal 76. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 1.0
   * Goal 77. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> -1.0
   * Goal 78. Weak Mutation 132: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> NaN
   * Goal 79. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp Negation
   * Goal 80. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC 1
   * Goal 81. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC -1
   * Goal 82. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 83. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 84. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 85. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 86. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 87. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 88. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 89. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 90. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 91. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 92. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 93. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 94. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 95. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 96. Weak Mutation 106: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:403 - InsertUnaryOp Negation
   * Goal 97. Weak Mutation 142: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp Negation
   * Goal 98. Weak Mutation 143: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC 1
   * Goal 99. Weak Mutation 144: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC -1
   * Goal 100. Weak Mutation 44: org.apache.commons.math.stat.Frequency.addValue(J)V:177 - InsertUnaryOp Negation
   * Goal 101. Weak Mutation 0: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:83 - ReplaceConstant - Value 	 Freq. 	 Pct. 	 Cum Pct. 
 -> 
   * Goal 102. Weak Mutation 1: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceComparisonOperator == -> !=
   * Goal 103. Weak Mutation 38: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - instance of class {0} not comparable to existing values -> 
   * Goal 104. Weak Mutation 39: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 1 -> 0
   * Goal 105. Weak Mutation 40: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 0 -> 1
   * Goal 106. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;:nonnull
   * Goal 107. org.apache.commons.math.stat.Frequency.getCumFreq(C)J:zero
   * Goal 108. org.apache.commons.math.stat.Frequency.getSumFreq()J:zero
   * Goal 109. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:nonnull
   * Goal 110. org.apache.commons.math.stat.Frequency.getCumPct(C)D:positive
   * Goal 111. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 112. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 113. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 114. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 115. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 116. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 117. org.apache.commons.math.stat.Frequency.clear()V
   * Goal 118. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 119. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 120. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 121. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 122. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 123. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 124. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 125. org.apache.commons.math.stat.Frequency.clear()V
   * Goal 126. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 127. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 128. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 129. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 130. Branch org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch in context: org.apache.commons.math.stat.Frequency:valuesIterator()Ljava/util/Iterator;
   * Goal 131. Branch org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true in context: org.apache.commons.math.stat.Frequency:getSumFreq()J
   * Goal 132. Branch org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(C)J
   * Goal 133. Branch org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(C)D
   * Goal 134. Branch org.apache.commons.math.stat.Frequency.clear()V: root-Branch in context: org.apache.commons.math.stat.Frequency:clear()V
   * Goal 135. Branch org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(J)V
   * Goal 136. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   */

  @Test
  public void test25()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      String string0 = frequency0.toString();
      long long0 = frequency0.getSumFreq();
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      long long1 = frequency0.getCumFreq('$');
      double double0 = frequency0.getCumPct('6');
      frequency0.clear();
      frequency0.addValue(0L);
      long long2 = frequency0.getCumFreq('w');
      Iterator<Comparable<?>> iterator1 = frequency0.valuesIterator();
      // Undeclared exception!
      try { 
        frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.String not comparable to existing values
         //
         assertThrownBy("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  //Test case number: 26
  /*
   * 11 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: Line 60
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>()V: Line 61
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 478
   * Goal 4. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 9. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 10. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Object;)D
   * Goal 11. getCumPct(Ljava/lang/Object;)D_java.lang.ClassCastException_IMPLICIT
   */

  @Test
  public void test26()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        frequency0.getCumPct(object0);
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 27
  /*
   * 16 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 2. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 3. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 4. org.apache.commons.math.stat.Frequency.<init>()V: Line 60
   * Goal 5. org.apache.commons.math.stat.Frequency.<init>()V: Line 61
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 7. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 8. getCount(Ljava/lang/Comparable;)J_java.lang.NullPointerException_IMPLICIT
   * Goal 9. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 10. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 11. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 12. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 13. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J
   * Goal 14. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 15. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 16. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Comparable;)J
   */

  @Test
  public void test27()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      // Undeclared exception!
      try { 
        frequency0.getCount((Comparable<?>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 28
  /*
   * 66 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 2. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 323
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 4. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 7. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 168
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 169
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 12. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 304
   * Goal 13. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 306
   * Goal 14. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 17. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 18. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 19. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 20. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 21. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 22. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 23. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 24. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 25. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch
   * Goal 26. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 27. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 29. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 30. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 31. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 32. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 33. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 34. getPct(Ljava/lang/Object;)D_java.lang.NullPointerException_IMPLICIT
   * Goal 35. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 36. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 37. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 38. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 39. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 40. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 41. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 42. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 43. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 44. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 45. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 46. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 47. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 48. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 49. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 50. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 51. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 52. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 53. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 54. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 55. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 56. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 0
   * Goal 57. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 1
   * Goal 58. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> -2
   * Goal 59. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 60. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 61. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 62. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 63. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 64. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 65. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 66. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D
   */

  @Test
  public void test28()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      Integer integer0 = new Integer(1);
      frequency0.addValue(integer0);
      // Undeclared exception!
      try { 
        frequency0.getPct((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 29
  /*
   * 79 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 4. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 402
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 17. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumPct(I)D: root-Branch
   * Goal 20. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 21. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 22. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 25. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 26. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 27. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: root-Branch
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 29. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 30. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 31. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 32. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 33. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 34. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 35. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 36. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 37. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 38. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 39. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 40. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 41. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 42. Weak Mutation 138: org.apache.commons.math.stat.Frequency.getCumPct(I)D:511 - InsertUnaryOp Negation
   * Goal 43. Weak Mutation 139: org.apache.commons.math.stat.Frequency.getCumPct(I)D:511 - InsertUnaryOp IINC 1
   * Goal 44. Weak Mutation 140: org.apache.commons.math.stat.Frequency.getCumPct(I)D:511 - InsertUnaryOp IINC -1
   * Goal 45. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 46. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 47. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 48. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 49. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 51. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 52. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 53. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 54. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 55. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 56. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 57. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 58. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 59. Weak Mutation 106: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:403 - InsertUnaryOp Negation
   * Goal 60. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 61. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - InsertUnaryOp Negation
   * Goal 62. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> +
   * Goal 63. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> -
   * Goal 64. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp Negation
   * Goal 65. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC 1
   * Goal 66. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC -1
   * Goal 67. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 68. org.apache.commons.math.stat.Frequency.getCumPct(I)D
   * Goal 69. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J
   * Goal 70. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 71. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 72. org.apache.commons.math.stat.Frequency.getCumPct(I)D
   * Goal 73. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 74. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 75. Branch org.apache.commons.math.stat.Frequency.getCumPct(I)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(I)D
   * Goal 76. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Object;)J
   * Goal 77. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 78. getCount(Ljava/lang/Object;)J_java.lang.NullPointerException_IMPLICIT
   * Goal 79. org.apache.commons.math.stat.Frequency.getCumPct(I)D:zero
   */

  @Test
  public void test29()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      frequency0.addValue('+');
      double double0 = frequency0.getCumPct(1);
      double double1 = frequency0.getCumPct(1);
      // Undeclared exception!
      try { 
        frequency0.getCount((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 30
  /*
   * 15 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - false
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 4. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 5. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 6. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 7. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 8. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 9. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 13. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 14. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 15. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   */

  @Test
  public void test30()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Integer integer0 = Integer.valueOf(1656);
      frequency0.addValue((Comparable<?>) integer0);
  }

  //Test case number: 31
  /*
   * 34 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false
   * Goal 5. org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch
   * Goal 6. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 7. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 8. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 9. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 10. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 11. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 12. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 13. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> -1
   * Goal 14. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 0.0
   * Goal 15. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 1.0
   * Goal 16. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> -1.0
   * Goal 17. Weak Mutation 132: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> NaN
   * Goal 18. Weak Mutation 142: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp Negation
   * Goal 19. Weak Mutation 143: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC 1
   * Goal 20. Weak Mutation 144: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC -1
   * Goal 21. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 0
   * Goal 22. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> 1
   * Goal 23. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:304 - ReplaceConstant - -1 -> -2
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumPct(C)D:positive
   * Goal 25. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 26. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 27. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 28. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 30. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 31. Branch org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(C)D
   * Goal 32. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D
   * Goal 33. getPct(Ljava/lang/Object;)D_java.lang.ClassCastException_IMPLICIT
   * Goal 34. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 306
   */

  @Test
  public void test31()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      double double0 = frequency0.getCumPct('*');
      // Undeclared exception!
      try { 
        frequency0.getPct((Object) frequency0);
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 32
  /*
   * 80 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 3. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 581
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 5. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 582
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 7. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 17. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - true
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 22. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - false
   * Goal 23. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 24. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 26. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 27. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 28. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 29. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 30. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 31. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 32. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 33. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 34. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 35. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 36. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 37. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 38. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 39. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 40. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 41. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 42. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 43. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 44. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 45. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 47. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 48. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - InsertUnaryOp Negation
   * Goal 49. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> +
   * Goal 50. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> -
   * Goal 51. Weak Mutation 142: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp Negation
   * Goal 52. Weak Mutation 143: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC 1
   * Goal 53. Weak Mutation 144: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC -1
   * Goal 54. Weak Mutation 167: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:581 - ReplaceComparisonOperator != -> ==
   * Goal 55. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 56. Weak Mutation 108: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> ==
   * Goal 57. Weak Mutation 113: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> !=
   * Goal 58. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp Negation
   * Goal 59. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC 1
   * Goal 60. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:186 - InsertUnaryOp IINC -1
   * Goal 61. Weak Mutation 135: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> %
   * Goal 62. Weak Mutation 168: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:582 - ReplaceConstant - 1 -> 0
   * Goal 63. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:true
   * Goal 64. org.apache.commons.math.stat.Frequency.getCumPct(C)D:positive
   * Goal 65. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 66. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 67. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 68. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z
   * Goal 69. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 70. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 71. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 72. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z
   * Goal 73. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 74. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 75. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 76. Branch org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(C)D
   * Goal 77. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 78. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 79. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - false in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 80. addValue(Ljava/lang/Integer;)V_java.lang.NullPointerException_IMPLICIT
   */

  @Test
  public void test32()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue('B');
      double double0 = frequency0.getCumPct('{');
      boolean boolean0 = frequency0.equals(frequency0);
      // Undeclared exception!
      try { 
        frequency0.addValue((Integer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 33
  /*
   * 111 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 256
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 13. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 14. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 81
   * Goal 15. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 82
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 402
   * Goal 17. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 83
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 403
   * Goal 19. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 84
   * Goal 20. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 85
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 23. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 24. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 25. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 26. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 27. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 28. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 96
   * Goal 29. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 113
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(I)J: Line 435
   * Goal 31. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 32. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 116
   * Goal 33. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 118
   * Goal 34. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 35. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 36. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 250
   * Goal 37. org.apache.commons.math.stat.Frequency.<init>()V: Line 60
   * Goal 38. org.apache.commons.math.stat.Frequency.<init>()V: Line 61
   * Goal 39. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 255
   * Goal 40. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 41. org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch
   * Goal 42. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 43. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFEQ L113 - true
   * Goal 44. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 45. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 46. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 47. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - true
   * Goal 48. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 49. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 50. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 51. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 52. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 53. Weak Mutation 0: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:83 - ReplaceConstant - Value 	 Freq. 	 Pct. 	 Cum Pct. 
 -> 
   * Goal 54. Weak Mutation 1: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceComparisonOperator == -> !=
   * Goal 55. Weak Mutation 22: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:113 - ReplaceComparisonOperator == -> !=
   * Goal 56. Weak Mutation 23: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:116 - ReplaceConstant - class ({0}) does not implement Comparable -> 
   * Goal 57. Weak Mutation 24: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:116 - ReplaceConstant - 1 -> 0
   * Goal 58. Weak Mutation 25: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:116 - ReplaceConstant - 0 -> 1
   * Goal 59. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 60. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 61. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 62. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 63. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 64. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 65. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 66. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 67. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 68. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 69. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 70. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 71. Weak Mutation 106: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:403 - InsertUnaryOp Negation
   * Goal 72. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 73. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 74. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 75. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 76. Weak Mutation 116: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp Negation
   * Goal 77. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 78. Weak Mutation 117: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp IINC 1
   * Goal 79. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 80. Weak Mutation 118: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp IINC -1
   * Goal 81. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 82. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 83. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 84. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 85. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 86. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 87. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:250 - ReplaceComparisonOperator = null -> != null
   * Goal 88. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 89. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:zero
   * Goal 90. org.apache.commons.math.stat.Frequency.getCumFreq(I)J:zero
   * Goal 91. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:nonnull
   * Goal 92. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 93. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFEQ L113 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V
   * Goal 94. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 95. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 96. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 97. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 98. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 99. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V
   * Goal 100. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 101. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J
   * Goal 102. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 103. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 104. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 105. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 106. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J
   * Goal 107. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 108. Branch org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(I)J
   * Goal 109. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Comparable;)J
   * Goal 110. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - true in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Comparable;)J
   * Goal 111. addValue(Ljava/lang/Object;)V_java.lang.NullPointerException_IMPLICIT
   */

  @Test
  public void test33()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      String string0 = frequency0.toString();
      long long0 = frequency0.getCount((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      long long1 = frequency0.getCumFreq(943);
      // Undeclared exception!
      try { 
        frequency0.addValue((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 34
  /*
   * 52 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 386
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 4. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 7. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 8. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: Line 204
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(I)J: Line 435
   * Goal 10. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 11. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 14. org.apache.commons.math.stat.Frequency.<init>()V: Line 60
   * Goal 15. org.apache.commons.math.stat.Frequency.<init>()V: Line 61
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 17. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 18. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 21. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 22. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 23. addValue(Ljava/lang/Comparable;)V_java.lang.NullPointerException_IMPLICIT
   * Goal 24. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 25. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 26. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 27. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 28. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 29. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 30. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 31. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> -1
   * Goal 32. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> 1
   * Goal 33. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> -1
   * Goal 34. Weak Mutation 116: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp Negation
   * Goal 35. Weak Mutation 117: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp IINC 1
   * Goal 36. Weak Mutation 118: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp IINC -1
   * Goal 37. org.apache.commons.math.stat.Frequency.getCumFreq(I)J:zero
   * Goal 38. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;:nonnull
   * Goal 39. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 40. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 41. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 42. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 43. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 44. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 45. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 46. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 47. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 48. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 49. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 50. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 51. Branch org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch in context: org.apache.commons.math.stat.Frequency:valuesIterator()Ljava/util/Iterator;
   * Goal 52. Branch org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(I)J
   */

  @Test
  public void test34()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      Frequency frequency1 = new Frequency((Comparator<?>) null);
      long long0 = frequency1.getCumFreq((-349));
      // Undeclared exception!
      try { 
        frequency0.addValue((Comparable<?>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 35
  /*
   * 23 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 5. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 6. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 7. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 8. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 9. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 10. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 11. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> -1
   * Goal 12. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> 1
   * Goal 13. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> -1
   * Goal 14. Weak Mutation 116: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp Negation
   * Goal 15. Weak Mutation 117: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp IINC 1
   * Goal 16. Weak Mutation 118: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp IINC -1
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(I)J:zero
   * Goal 18. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 20. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 21. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 22. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 23. Branch org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(I)J
   */

  @Test
  public void test35()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      long long0 = frequency0.getCumFreq(11);
  }

  //Test case number: 36
  /*
   * 9 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false
   * Goal 5. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 478
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:positive
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 9. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Object;)D
   */

  @Test
  public void test36()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      double double0 = frequency0.getCumPct((Object) null);
  }

  //Test case number: 37
  /*
   * 34 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.getPct(I)D: root-Branch
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch
   * Goal 7. org.apache.commons.math.stat.Frequency.getCount(I)J: root-Branch
   * Goal 8. org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumPct(I)D: root-Branch
   * Goal 10. org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch
   * Goal 11. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 12. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - true
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 14. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 15. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - true
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false
   * Goal 17. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I12 Branch 20 IFNONNULL L583 - false
   * Goal 18. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - false
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 20. org.apache.commons.math.stat.Frequency.getCount(C)J: Line 286
   * Goal 21. Weak Mutation 66: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp Negation
   * Goal 22. Weak Mutation 67: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC 1
   * Goal 23. Weak Mutation 68: org.apache.commons.math.stat.Frequency.getCount(C)J:286 - InsertUnaryOp IINC -1
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumPct(I)D:positive
   * Goal 25. org.apache.commons.math.stat.Frequency.getCount(C)J:zero
   * Goal 26. Branch org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(C)J
   * Goal 27. org.apache.commons.math.stat.Frequency.getCount(J)J:zero
   * Goal 28. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 584
   * Goal 29. Weak Mutation 170: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:584 - ReplaceConstant - 0 -> 1
   * Goal 30. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I12 Branch 20 IFNONNULL L583 - false in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 31. Branch org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true in context: org.apache.commons.math.stat.Frequency:getSumFreq()J
   * Goal 32. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - false in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Comparable;)D
   * Goal 33. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 34. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Comparable;)D
   */

  @Test
  public void test37()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getCumPct('&');
      long long0 = frequency0.getSumFreq();
      String string0 = frequency0.toString();
      long long1 = frequency0.getCumFreq((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double1 = frequency0.getPct('G');
      long long2 = frequency0.getCount(0L);
      double double2 = frequency0.getCumPct((-194));
      long long3 = frequency0.getSumFreq();
      double double3 = frequency0.getPct((-2009L));
      double double4 = frequency0.getPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      long long4 = frequency0.getCount((-1));
      double double5 = frequency0.getCumPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      boolean boolean0 = frequency0.equals((Object) null);
      long long5 = frequency0.getCount('&');
      double double6 = frequency0.getCumPct(1954);
      long long6 = frequency0.getCumFreq((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      Integer integer0 = new Integer((-194));
      long long7 = frequency0.getCumFreq((Object) integer0);
      double double7 = frequency0.getPct(1543);
      double double8 = frequency0.getPct((long) 1954);
      long long8 = frequency0.getCount((-2849));
  }

  //Test case number: 38
  /*
   * 20 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 10. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - false
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 13. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - false
   * Goal 14. org.apache.commons.math.stat.Frequency.getPct(J)D:zero
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 187
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 17. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 582
   * Goal 18. Weak Mutation 168: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:582 - ReplaceConstant - 1 -> 0
   * Goal 19. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 253
   * Goal 20. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J
   */

  @Test
  public void test38()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      boolean boolean0 = frequency0.equals(frequency0);
      frequency0.addValue('&');
      double double0 = frequency0.getPct(1636L);
      int int0 = (-2601);
      Integer integer0 = new Integer((-2601));
      long long0 = frequency0.getCount((Object) integer0);
      Integer integer1 = new Integer((-2601));
      Integer integer2 = Integer.getInteger("rTT[u)j`,y_-Q*'jY", integer1);
      // Undeclared exception!
      try { 
        Integer.decode((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.lang.Integer", e);
      }
  }

  //Test case number: 39
  /*
   * 205 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 256
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 386
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 11. org.apache.commons.math.stat.Frequency.getCount(I)J: Line 266
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumPct(J)D: Line 524
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 399
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 400
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 144
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 146
   * Goal 22. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 404
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 148
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 25. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 406
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 27. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 407
   * Goal 28. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 410
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 411
   * Goal 30. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 158
   * Goal 31. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 159
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(I)J: Line 435
   * Goal 33. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: Line 564
   * Goal 34. org.apache.commons.math.stat.Frequency.hashCode()I: Line 572
   * Goal 35. org.apache.commons.math.stat.Frequency.<init>()V: Line 60
   * Goal 36. org.apache.commons.math.stat.Frequency.hashCode()I: Line 573
   * Goal 37. org.apache.commons.math.stat.Frequency.<init>()V: Line 61
   * Goal 38. org.apache.commons.math.stat.Frequency.hashCode()I: Line 574
   * Goal 39. org.apache.commons.math.stat.Frequency.hashCode()I: Line 575
   * Goal 40. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 81
   * Goal 41. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 82
   * Goal 42. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 83
   * Goal 43. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 84
   * Goal 44. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 85
   * Goal 45. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 46. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 47. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 48. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 49. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 50. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 96
   * Goal 51. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 494
   * Goal 52. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 495
   * Goal 53. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 496
   * Goal 54. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 113
   * Goal 55. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 498
   * Goal 56. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 114
   * Goal 57. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 58. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 372
   * Goal 59. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 60. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 61. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 250
   * Goal 62. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 255
   * Goal 63. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 64. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 65. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 66. org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch
   * Goal 67. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch
   * Goal 68. org.apache.commons.math.stat.Frequency.getCount(I)J: root-Branch
   * Goal 69. org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch
   * Goal 70. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 71. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 72. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - true
   * Goal 73. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 74. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 75. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - true
   * Goal 76. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 77. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 78. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - true
   * Goal 79. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 80. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 81. org.apache.commons.math.stat.Frequency.hashCode()I: I11 Branch 18 IFNONNULL L573 - true
   * Goal 82. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFEQ L113 - false
   * Goal 83. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 84. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 85. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 86. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 87. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 88. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - false
   * Goal 89. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 90. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false
   * Goal 91. Weak Mutation 0: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:83 - ReplaceConstant - Value 	 Freq. 	 Pct. 	 Cum Pct. 
 -> 
   * Goal 92. Weak Mutation 1: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceComparisonOperator == -> !=
   * Goal 93. Weak Mutation 22: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:113 - ReplaceComparisonOperator == -> !=
   * Goal 94. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 95. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 96. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 97. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 98. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 99. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceConstant - 1 -> 0
   * Goal 100. Weak Mutation 32: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceConstant - 1 -> -1
   * Goal 101. Weak Mutation 33: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceConstant - 1 -> 2
   * Goal 102. Weak Mutation 34: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> %
   * Goal 103. Weak Mutation 35: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> -
   * Goal 104. Weak Mutation 36: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> *
   * Goal 105. Weak Mutation 37: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:142 - ReplaceArithmeticOperator + -> /
   * Goal 106. Weak Mutation 38: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - instance of class {0} not comparable to existing values -> 
   * Goal 107. Weak Mutation 39: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 1 -> 0
   * Goal 108. Weak Mutation 40: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:146 - ReplaceConstant - 0 -> 1
   * Goal 109. Weak Mutation 41: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp Negation
   * Goal 110. Weak Mutation 42: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC 1
   * Goal 111. Weak Mutation 43: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC -1
   * Goal 112. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 113. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 114. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 115. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 116. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 117. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 118. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 119. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 120. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 121. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 122. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 123. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 124. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:250 - ReplaceComparisonOperator = null -> != null
   * Goal 125. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 126. Weak Mutation 62: org.apache.commons.math.stat.Frequency.getCount(I)J:266 - InsertUnaryOp Negation
   * Goal 127. Weak Mutation 63: org.apache.commons.math.stat.Frequency.getCount(I)J:266 - InsertUnaryOp IINC 1
   * Goal 128. Weak Mutation 64: org.apache.commons.math.stat.Frequency.getCount(I)J:266 - InsertUnaryOp IINC -1
   * Goal 129. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 130. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 131. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> -1
   * Goal 132. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 133. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> 1
   * Goal 134. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:386 - ReplaceConstant - 0 -> -1
   * Goal 135. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 136. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 137. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 138. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 139. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 140. Weak Mutation 107: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> -1
   * Goal 141. Weak Mutation 109: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> >
   * Goal 142. Weak Mutation 110: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:407 - ReplaceConstant - 0 -> 1
   * Goal 143. Weak Mutation 111: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:407 - ReplaceConstant - 0 -> -1
   * Goal 144. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> <=
   * Goal 145. Weak Mutation 116: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp Negation
   * Goal 146. Weak Mutation 117: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp IINC 1
   * Goal 147. Weak Mutation 118: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:435 - InsertUnaryOp IINC -1
   * Goal 148. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 149. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 150. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 151. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> -1
   * Goal 152. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 153. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 0.0
   * Goal 154. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 1.0
   * Goal 155. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> -1.0
   * Goal 156. Weak Mutation 132: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> NaN
   * Goal 157. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - InsertUnaryOp Negation
   * Goal 158. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> +
   * Goal 159. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> -
   * Goal 160. Weak Mutation 141: org.apache.commons.math.stat.Frequency.getCumPct(J)D:524 - InsertUnaryOp Negation
   * Goal 161. Weak Mutation 145: org.apache.commons.math.stat.Frequency.hashCode()I:572 - ReplaceConstant - 1 -> 0
   * Goal 162. Weak Mutation 146: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 0
   * Goal 163. Weak Mutation 147: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 1
   * Goal 164. Weak Mutation 148: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> -1
   * Goal 165. Weak Mutation 149: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 30
   * Goal 166. Weak Mutation 150: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceConstant - 31 -> 32
   * Goal 167. Weak Mutation 151: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp Negation
   * Goal 168. Weak Mutation 152: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp IINC 1
   * Goal 169. Weak Mutation 153: org.apache.commons.math.stat.Frequency.hashCode()I:573 - InsertUnaryOp IINC -1
   * Goal 170. Weak Mutation 154: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> +
   * Goal 171. Weak Mutation 155: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> %
   * Goal 172. Weak Mutation 156: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceArithmeticOperator * -> -
   * Goal 173. Weak Mutation 158: org.apache.commons.math.stat.Frequency.hashCode()I:573 - ReplaceComparisonOperator != null -> = null
   * Goal 174. Weak Mutation 160: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> %
   * Goal 175. Weak Mutation 161: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> -
   * Goal 176. Weak Mutation 162: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> *
   * Goal 177. Weak Mutation 163: org.apache.commons.math.stat.Frequency.hashCode()I:574 - ReplaceArithmeticOperator + -> /
   * Goal 178. Weak Mutation 164: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp Negation
   * Goal 179. Weak Mutation 165: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp IINC 1
   * Goal 180. Weak Mutation 166: org.apache.commons.math.stat.Frequency.hashCode()I:575 - InsertUnaryOp IINC -1
   * Goal 181. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:zero
   * Goal 182. org.apache.commons.math.stat.Frequency.getCumFreq(I)J:positive
   * Goal 183. org.apache.commons.math.stat.Frequency.getCumPct(J)D:zero
   * Goal 184. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:nonnull
   * Goal 185. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:positive
   * Goal 186. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:zero
   * Goal 187. org.apache.commons.math.stat.Frequency.getCount(I)J:zero
   * Goal 188. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 189. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFEQ L113 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V
   * Goal 190. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 191. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Comparable;)D
   * Goal 192. Branch org.apache.commons.math.stat.Frequency.hashCode()I: I11 Branch 18 IFNONNULL L573 - true in context: org.apache.commons.math.stat.Frequency:hashCode()I
   * Goal 193. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 194. Branch org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(I)V
   * Goal 195. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 196. Branch org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(I)J
   * Goal 197. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 198. Branch org.apache.commons.math.stat.Frequency.getCount(I)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(I)J
   * Goal 199. Branch org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(J)D
   * Goal 200. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 201. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 202. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 203. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 204. org.apache.commons.math.stat.Frequency.getCount(I)J
   * Goal 205. org.apache.commons.math.stat.Frequency.getCount(I)J
   */

  @Test
  public void test39()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      int int0 = 1011;
      long long0 = frequency0.getCount(1011);
      String string0 = frequency0.toString();
      int int1 = frequency0.hashCode();
      long long1 = frequency0.getCumFreq((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double0 = frequency0.getCumPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      long long2 = frequency0.getCumFreq((Object) null);
      frequency0.addValue(1011);
      long long3 = frequency0.getCumFreq(1011);
      frequency0.addValue(149);
      int int2 = frequency0.hashCode();
      double double1 = frequency0.getCumPct((-633L));
      frequency0.addValue(1011);
      // Undeclared exception!
      try { 
        frequency0.addValue((Object) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.String not comparable to existing values
         //
         assertThrownBy("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  //Test case number: 40
  /*
   * 31 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getPct(I)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I12 Branch 20 IFNONNULL L583 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFNE L585 - false
   * Goal 10. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - false
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 12. org.apache.commons.math.stat.Frequency.getPct(I)D: Line 334
   * Goal 13. Weak Mutation 87: org.apache.commons.math.stat.Frequency.getPct(I)D:334 - InsertUnaryOp Negation
   * Goal 14. Weak Mutation 88: org.apache.commons.math.stat.Frequency.getPct(I)D:334 - InsertUnaryOp IINC 1
   * Goal 15. Weak Mutation 89: org.apache.commons.math.stat.Frequency.getPct(I)D:334 - InsertUnaryOp IINC -1
   * Goal 16. org.apache.commons.math.stat.Frequency.getPct(I)D:positive
   * Goal 17. org.apache.commons.math.stat.Frequency.getPct(I)D
   * Goal 18. org.apache.commons.math.stat.Frequency.getPct(I)D
   * Goal 19. Branch org.apache.commons.math.stat.Frequency.getPct(I)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(I)D
   * Goal 20. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 586
   * Goal 21. Weak Mutation 172: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:586 - ReplaceConstant - 0 -> 1
   * Goal 22. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:false
   * Goal 23. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFNE L585 - false in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 24. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 25. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 233
   * Goal 26. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J
   * Goal 27. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Object;)J
   * Goal 28. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:zero
   * Goal 29. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Comparable;)J
   * Goal 30. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:zero
   * Goal 31. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J
   */

  @Test
  public void test40()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      double double0 = frequency0.getPct(1);
      long long0 = frequency0.getCount((Object) "w7oc-TMF]v");
      long long1 = frequency0.getCumFreq((Comparable<?>) "w7oc-TMF]v");
      boolean boolean0 = frequency0.equals("w7oc-TMF]v");
      Integer integer0 = new Integer(2626);
      Integer integer1 = Integer.getInteger("w7oc-TMF]v", 2626);
      Integer integer2 = Integer.getInteger("w7oc-TMF]v", integer0);
  }

  //Test case number: 41
  /*
   * 92 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.clear()V: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumPct(I)D: root-Branch
   * Goal 8. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFEQ L113 - true
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 11. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 12. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 13. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 18. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - false
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 20. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 21. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - false
   * Goal 22. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 23. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 25. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 26. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 27. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 28. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 29. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 30. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 113
   * Goal 31. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 116
   * Goal 32. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 118
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumPct(I)D: Line 511
   * Goal 34. Weak Mutation 22: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:113 - ReplaceComparisonOperator == -> !=
   * Goal 35. Weak Mutation 23: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:116 - ReplaceConstant - class ({0}) does not implement Comparable -> 
   * Goal 36. Weak Mutation 24: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:116 - ReplaceConstant - 1 -> 0
   * Goal 37. Weak Mutation 25: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:116 - ReplaceConstant - 0 -> 1
   * Goal 38. Weak Mutation 138: org.apache.commons.math.stat.Frequency.getCumPct(I)D:511 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 139: org.apache.commons.math.stat.Frequency.getCumPct(I)D:511 - InsertUnaryOp IINC 1
   * Goal 40. Weak Mutation 140: org.apache.commons.math.stat.Frequency.getCumPct(I)D:511 - InsertUnaryOp IINC -1
   * Goal 41. org.apache.commons.math.stat.Frequency.getCumPct(I)D
   * Goal 42. org.apache.commons.math.stat.Frequency.getCumPct(I)D
   * Goal 43. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFEQ L113 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V
   * Goal 44. Branch org.apache.commons.math.stat.Frequency.getCumPct(I)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(I)D
   * Goal 45. org.apache.commons.math.stat.Frequency.clear()V: Line 192
   * Goal 46. org.apache.commons.math.stat.Frequency.clear()V: Line 191
   * Goal 47. org.apache.commons.math.stat.Frequency.getCumPct(C)D:zero
   * Goal 48. org.apache.commons.math.stat.Frequency.clear()V
   * Goal 49. org.apache.commons.math.stat.Frequency.clear()V
   * Goal 50. Branch org.apache.commons.math.stat.Frequency.clear()V: root-Branch in context: org.apache.commons.math.stat.Frequency:clear()V
   * Goal 51. addValue(Ljava/lang/Object;)V_org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException_EXPLICIT
   * Goal 52. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 86
   * Goal 53. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 87
   * Goal 54. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 88
   * Goal 55. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 89
   * Goal 56. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 90
   * Goal 57. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 91
   * Goal 58. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 92
   * Goal 59. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 93
   * Goal 60. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 94
   * Goal 61. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 95
   * Goal 62. Weak Mutation 2: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 0
   * Goal 63. Weak Mutation 3: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 1
   * Goal 64. Weak Mutation 4: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> -1
   * Goal 65. Weak Mutation 5: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 8
   * Goal 66. Weak Mutation 6: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:88 - ReplaceConstant - 9 -> 10
   * Goal 67. Weak Mutation 7: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 0
   * Goal 68. Weak Mutation 8: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 1
   * Goal 69. Weak Mutation 9: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> -1
   * Goal 70. Weak Mutation 10: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 8
   * Goal 71. Weak Mutation 11: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:90 - ReplaceConstant - 9 -> 10
   * Goal 72. Weak Mutation 12: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 0
   * Goal 73. Weak Mutation 13: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 1
   * Goal 74. Weak Mutation 14: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> -1
   * Goal 75. Weak Mutation 15: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 8
   * Goal 76. Weak Mutation 16: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:92 - ReplaceConstant - 9 -> 10
   * Goal 77. Weak Mutation 17: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 0
   * Goal 78. Weak Mutation 18: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 1
   * Goal 79. Weak Mutation 19: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> -1
   * Goal 80. Weak Mutation 20: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 9
   * Goal 81. Weak Mutation 21: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:94 - ReplaceConstant - 10 -> 11
   * Goal 82. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J
   * Goal 83. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J
   * Goal 84. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - false in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 85. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 86. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 87. org.apache.commons.math.stat.Frequency.getCumFreq(J)J:zero
   * Goal 88. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 89. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 90. Branch org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(J)J
   * Goal 91. org.apache.commons.math.stat.Frequency.getCumPct(I)D:zero
   * Goal 92. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 402
   */

  @Test
  public void test41()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      long long0 = frequency0.getCumFreq('h');
      String string0 = frequency0.toString();
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      long long1 = frequency0.getCumFreq(1822L);
      int int0 = 0;
      double double0 = frequency0.getCumPct(0);
      String string1 = frequency0.toString();
      double double1 = frequency0.getCumPct('E');
      Object object0 = new Object();
      frequency0.clear();
      // Undeclared exception!
      try { 
        frequency0.addValue(object0);
      } catch(IllegalArgumentException e) {
         //
         // class (java.lang.Object) does not implement Comparable
         //
         assertThrownBy("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  //Test case number: 42
  /*
   * 37 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch
   * Goal 8. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 10. org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch
   * Goal 11. org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch
   * Goal 12. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L85 - true
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 15. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 16. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - true
   * Goal 21. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I121 Branch 16 IFLE L417 - true
   * Goal 22. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 23. org.apache.commons.math.stat.Frequency.hashCode()I: I11 Branch 18 IFNONNULL L573 - true
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 25. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 26. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - false
   * Goal 27. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - false
   * Goal 28. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - false
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I108 Branch 15 IFEQ L415 - false
   * Goal 32. org.apache.commons.math.stat.Frequency.getCount(J)J:positive
   * Goal 33. Branch org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true in context: org.apache.commons.math.stat.Frequency:getSumFreq()J
   * Goal 34. Branch org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false in context: org.apache.commons.math.stat.Frequency:getSumFreq()J
   * Goal 35. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - false in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Comparable;)D
   * Goal 36. addValue(C)V_org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException_EXPLICIT
   * Goal 37. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 253
   */

  @Test
  public void test42()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Integer integer0 = Integer.getInteger("H,SK");
      int int0 = Long.BYTES;
      long long0 = frequency0.getCumFreq('k');
      String string0 = frequency0.toString();
      double double0 = frequency0.getPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      int int1 = frequency0.hashCode();
      long long1 = frequency0.getCumFreq('4');
      double double1 = frequency0.getPct(0L);
      double double2 = frequency0.getPct((long) 8);
      double double3 = frequency0.getPct('e');
      frequency0.addValue(1431655765);
      double double4 = frequency0.getPct((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double5 = frequency0.getPct('4');
      long long2 = frequency0.getSumFreq();
      frequency0.addValue(0L);
      double double6 = frequency0.getCumPct(0L);
      double double7 = frequency0.getPct('I');
      double double8 = frequency0.getPct(0L);
      long long3 = frequency0.getCount(0L);
      long long4 = frequency0.getSumFreq();
      // Undeclared exception!
      try { 
        frequency0.addValue('=');
      } catch(IllegalArgumentException e) {
         //
         // instance of class java.lang.Character not comparable to existing values
         //
         assertThrownBy("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  //Test case number: 43
  /*
   * 153 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch
   * Goal 7. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 8. org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 10. org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L134 - true
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 13. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - true
   * Goal 14. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I6 Branch 9 IFNE L385 - true
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - true
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I80 Branch 13 IFGE L406 - true
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L139 - false
   * Goal 20. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - false
   * Goal 21. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I4 Branch 6 IFEQ L244 - false
   * Goal 22. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: I28 Branch 7 IFNULL L250 - false
   * Goal 23. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - false
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I15 Branch 10 IFEQ L388 - false
   * Goal 25. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I33 Branch 11 IFNONNULL L392 - false
   * Goal 26. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I56 Branch 12 IFNULL L399 - false
   * Goal 27. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: I93 Branch 14 IFLT L410 - false
   * Goal 28. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 385
   * Goal 30. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 31. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 32. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 138
   * Goal 33. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator == -> !=
   * Goal 34. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> 1
   * Goal 35. Weak Mutation 95: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceConstant - 0 -> -1
   * Goal 36. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 320
   * Goal 37. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 244
   * Goal 38. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 247
   * Goal 39. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 249
   * Goal 40. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 250
   * Goal 41. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 255
   * Goal 42. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 256
   * Goal 43. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 319
   * Goal 44. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 321
   * Goal 45. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:244 - ReplaceComparisonOperator == -> !=
   * Goal 46. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> 1
   * Goal 47. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:247 - ReplaceConstant - 0 -> -1
   * Goal 48. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:250 - ReplaceComparisonOperator = null -> != null
   * Goal 49. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J:256 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - InsertUnaryOp Negation
   * Goal 51. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> 1
   * Goal 52. Weak Mutation 74: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceConstant - 0 -> -1
   * Goal 53. Weak Mutation 75: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> -1
   * Goal 54. Weak Mutation 78: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 0.0
   * Goal 55. Weak Mutation 79: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> 1.0
   * Goal 56. Weak Mutation 80: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> -1.0
   * Goal 57. Weak Mutation 81: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:321 - ReplaceConstant - NaN -> NaN
   * Goal 58. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: Line 459
   * Goal 59. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp Negation
   * Goal 60. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC 1
   * Goal 61. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:459 - InsertUnaryOp IINC -1
   * Goal 62. org.apache.commons.math.stat.Frequency.getCumFreq(C)J:zero
   * Goal 63. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 64. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 65. Branch org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(C)J
   * Goal 66. org.apache.commons.math.stat.Frequency.getCount(J)J: Line 276
   * Goal 67. Weak Mutation 65: org.apache.commons.math.stat.Frequency.getCount(J)J:276 - InsertUnaryOp Negation
   * Goal 68. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:positive
   * Goal 69. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D
   * Goal 70. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D
   * Goal 71. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 72. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 140
   * Goal 73. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 149
   * Goal 74. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 150
   * Goal 75. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 168
   * Goal 76. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 169
   * Goal 77. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 218
   * Goal 78. org.apache.commons.math.stat.Frequency.getPct(C)D: Line 356
   * Goal 79. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 388
   * Goal 80. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 391
   * Goal 81. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 392
   * Goal 82. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 393
   * Goal 83. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 395
   * Goal 84. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 398
   * Goal 85. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 402
   * Goal 86. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 403
   * Goal 87. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 498
   * Goal 88. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:139 - ReplaceComparisonOperator != null -> = null
   * Goal 89. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 0
   * Goal 90. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> -1
   * Goal 91. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:140 - ReplaceConstant - 1 -> 2
   * Goal 92. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - InsertUnaryOp Negation
   * Goal 93. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> %
   * Goal 94. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> -
   * Goal 95. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> *
   * Goal 96. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:218 - ReplaceArithmeticOperator + -> /
   * Goal 97. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp Negation
   * Goal 98. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC 1
   * Goal 99. Weak Mutation 93: org.apache.commons.math.stat.Frequency.getPct(C)D:356 - InsertUnaryOp IINC -1
   * Goal 100. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:385 - ReplaceComparisonOperator != -> <
   * Goal 101. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:388 - ReplaceComparisonOperator == -> !=
   * Goal 102. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:392 - ReplaceComparisonOperator != null -> = null
   * Goal 103. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> 1
   * Goal 104. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:395 - ReplaceConstant - 0 -> -1
   * Goal 105. Weak Mutation 106: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:403 - InsertUnaryOp Negation
   * Goal 106. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> <
   * Goal 107. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - InsertUnaryOp Negation
   * Goal 108. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> +
   * Goal 109. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> -
   * Goal 110. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:positive
   * Goal 111. org.apache.commons.math.stat.Frequency.getPct(C)D:positive
   * Goal 112. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D
   * Goal 113. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 114. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 115. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D
   * Goal 116. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 117. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 118. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 119. Branch org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(C)D
   * Goal 120. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: Line 323
   * Goal 121. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: Line 564
   * Goal 122. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 399
   * Goal 123. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 404
   * Goal 124. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 406
   * Goal 125. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 410
   * Goal 126. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 411
   * Goal 127. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:320 - ReplaceComparisonOperator != -> <
   * Goal 128. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - InsertUnaryOp Negation
   * Goal 129. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> +
   * Goal 130. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> -
   * Goal 131. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:399 - ReplaceComparisonOperator = null -> != null
   * Goal 132. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I: root-Branch in context: 
   * Goal 133. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 400
   * Goal 134. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 158
   * Goal 135. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 159
   * Goal 136. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 251
   * Goal 137. Weak Mutation 41: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp Negation
   * Goal 138. Weak Mutation 42: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC 1
   * Goal 139. Weak Mutation 43: org.apache.commons.math.stat.Frequency.addValue(I)V:158 - InsertUnaryOp IINC -1
   * Goal 140. Weak Mutation 84: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> %
   * Goal 141. Weak Mutation 109: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:406 - ReplaceComparisonOperator >= -> >
   * Goal 142. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J:410 - ReplaceComparisonOperator < -> <=
   * Goal 143. Weak Mutation 135: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:498 - ReplaceArithmeticOperator / -> %
   * Goal 144. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 145. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 146. Branch org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(I)V
   * Goal 147. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - true in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Comparable;)D
   * Goal 148. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: Line 447
   * Goal 149. Weak Mutation 119: org.apache.commons.math.stat.Frequency.getCumFreq(J)J:447 - InsertUnaryOp Negation
   * Goal 150. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Comparable;)J: Line 245
   * Goal 151. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Comparable;)J: Line 389
   * Goal 152. Weak Mutation 86: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D:323 - ReplaceArithmeticOperator / -> *
   * Goal 153. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Comparable;)D: I10 Branch 8 IFNE L320 - true in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Comparable;)D
   */

  @Test
  public void test43()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      double double0 = frequency0.getCumPct(']');
      double double1 = frequency0.getPct('v');
      Integer integer0 = new Integer(1553);
      int int0 = Integer.compareUnsigned(0, ']');
      int int1 = Integer.divideUnsigned(1553, 1553);
      frequency0.addValue(integer0);
      int int2 = Integer.compare(1, 3297);
      double double2 = frequency0.getCumPct((Comparable<?>) integer0);
      frequency0.addValue(0);
      long long0 = frequency0.getCumFreq('v');
      double double3 = frequency0.getPct((Comparable<?>) integer0);
  }

  //Test case number: 44
  /*
   * 72 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 581
   * Goal 2. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 583
   * Goal 3. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 585
   * Goal 4. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 587
   * Goal 5. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 588
   * Goal 6. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: Line 204
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 494
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 495
   * Goal 9. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 591
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: Line 496
   * Goal 11. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 593
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 215
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 216
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumPct(C)D: Line 537
   * Goal 15. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 217
   * Goal 16. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 220
   * Goal 17. org.apache.commons.math.stat.Frequency.<init>()V: Line 60
   * Goal 18. org.apache.commons.math.stat.Frequency.<init>()V: Line 61
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch
   * Goal 20. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 21. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 22. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I12 Branch 20 IFNONNULL L583 - true
   * Goal 23. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFNE L585 - true
   * Goal 24. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true
   * Goal 25. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I35 Branch 22 IFNONNULL L588 - true
   * Goal 26. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I52 Branch 24 IFNE L591 - true
   * Goal 27. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D: I10 Branch 17 IFNE L495 - false
   * Goal 28. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - false
   * Goal 29. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 0.0
   * Goal 30. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> 1.0
   * Goal 31. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> -1.0
   * Goal 32. Weak Mutation 132: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:496 - ReplaceConstant - NaN -> NaN
   * Goal 33. Weak Mutation 167: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:581 - ReplaceComparisonOperator != -> ==
   * Goal 34. Weak Mutation 169: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:583 - ReplaceComparisonOperator != null -> = null
   * Goal 35. Weak Mutation 171: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:585 - ReplaceComparisonOperator != -> ==
   * Goal 36. Weak Mutation 173: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:588 - ReplaceComparisonOperator != null -> = null
   * Goal 37. Weak Mutation 142: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp Negation
   * Goal 38. Weak Mutation 143: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC 1
   * Goal 39. Weak Mutation 176: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:591 - ReplaceComparisonOperator != -> ==
   * Goal 40. Weak Mutation 144: org.apache.commons.math.stat.Frequency.getCumPct(C)D:537 - InsertUnaryOp IINC -1
   * Goal 41. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> 1
   * Goal 42. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:215 - ReplaceConstant - 0 -> -1
   * Goal 43. Weak Mutation 178: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:593 - ReplaceConstant - 1 -> 0
   * Goal 44. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:217 - ReplaceComparisonOperator == -> !=
   * Goal 45. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:220 - InsertUnaryOp Negation
   * Goal 46. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - InsertUnaryOp Negation
   * Goal 47. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> 1
   * Goal 48. Weak Mutation 125: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceConstant - 0 -> -1
   * Goal 49. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Comparable;)D:495 - ReplaceComparisonOperator != -> -1
   * Goal 50. org.apache.commons.math.stat.Frequency.getSumFreq()J:zero
   * Goal 51. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;:nonnull
   * Goal 52. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:true
   * Goal 53. org.apache.commons.math.stat.Frequency.getCumPct(C)D:positive
   * Goal 54. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 55. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 56. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z
   * Goal 57. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 58. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 59. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 60. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 61. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z
   * Goal 62. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 63. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 64. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - false in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 65. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I12 Branch 20 IFNONNULL L583 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 66. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFNE L585 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 67. Branch org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L217 - true in context: org.apache.commons.math.stat.Frequency:getSumFreq()J
   * Goal 68. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I35 Branch 22 IFNONNULL L588 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 69. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I52 Branch 24 IFNE L591 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 70. Branch org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(C)D
   * Goal 71. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 72. Branch org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch in context: org.apache.commons.math.stat.Frequency:valuesIterator()Ljava/util/Iterator;
   */

  @Test
  public void test44()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Iterator<Comparable<?>> iterator0 = frequency0.valuesIterator();
      Frequency frequency1 = new Frequency();
      boolean boolean0 = frequency0.equals(frequency1);
      double double0 = frequency0.getCumPct('k');
      long long0 = frequency0.getSumFreq();
  }

  //Test case number: 45
  /*
   * 32 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 593
   * Goal 2. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 581
   * Goal 3. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 70
   * Goal 4. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 583
   * Goal 5. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 71
   * Goal 6. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 585
   * Goal 7. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 587
   * Goal 8. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 588
   * Goal 9. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: Line 591
   * Goal 10. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 11. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I12 Branch 20 IFNONNULL L583 - true
   * Goal 12. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFNE L585 - true
   * Goal 13. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I35 Branch 22 IFNONNULL L588 - true
   * Goal 14. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I52 Branch 24 IFNE L591 - true
   * Goal 15. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - false
   * Goal 16. Weak Mutation 176: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:591 - ReplaceComparisonOperator != -> ==
   * Goal 17. Weak Mutation 178: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:593 - ReplaceConstant - 1 -> 0
   * Goal 18. Weak Mutation 167: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:581 - ReplaceComparisonOperator != -> ==
   * Goal 19. Weak Mutation 169: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:583 - ReplaceComparisonOperator != null -> = null
   * Goal 20. Weak Mutation 171: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:585 - ReplaceComparisonOperator != -> ==
   * Goal 21. Weak Mutation 173: org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:588 - ReplaceComparisonOperator != null -> = null
   * Goal 22. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z:true
   * Goal 23. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 24. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z
   * Goal 25. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 26. org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z
   * Goal 27. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I4 Branch 19 IF_ACMPNE L581 - false in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 28. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I12 Branch 20 IFNONNULL L583 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 29. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFNE L585 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 30. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I35 Branch 22 IFNONNULL L588 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 31. Branch org.apache.commons.math.stat.Frequency.equals(Ljava/lang/Object;)Z: I52 Branch 24 IFNE L591 - true in context: org.apache.commons.math.stat.Frequency:equals(Ljava/lang/Object;)Z
   * Goal 32. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   */

  @Test
  public void test45()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator<?>) null);
      Frequency frequency1 = new Frequency((Comparator<?>) null);
      boolean boolean0 = frequency0.equals(frequency1);
  }
}
