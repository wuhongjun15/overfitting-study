/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 02 13:34:33 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      int int0 = MathUtils.compareTo(0.0, 0.0, 3.141592653589793);
      int[] intArray0 = new int[5];
      intArray0[0] = (-18);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.gcd((-18), 17);
      int int3 = 175;
      long long0 = (-1017L);
      try { 
        MathUtils.pow(175, (-1017L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (175^-1,017)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(16L, (-571L));
      double double0 = MathUtils.round((-73.440242), 0);
      float float0 = MathUtils.round(1.0F, (-1043), 0);
      short short0 = MathUtils.indicator((short)0);
      double double1 = MathUtils.binomialCoefficientDouble(0, (-1));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.sinh((-1567.236141716828));
      float float0 = MathUtils.indicator((float) 45);
      double double1 = MathUtils.factorialDouble(45);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = bigInteger0.bitLength();
      float float1 = bigInteger0.floatValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1602L);
      int int1 = MathUtils.indicator(3);
      long long0 = MathUtils.sign((long) (byte)7);
      int int2 = MathUtils.gcd(0, (byte)7);
      int int3 = MathUtils.lcm(135, (-455));
      double double2 = MathUtils.sign((double) 1L);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(2884L, 1299L);
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[3];
      Random.setNextRandom(61);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = (-2461);
      int int1 = (-1626);
      int int2 = MathUtils.mulAndCheck((-2461), (-1626));
      long long0 = MathUtils.sign((long) (-1626));
      int int3 = 556;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(556, 4001586);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2147102550), (-2147102550));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.gcd(6, (-1473));
      int int1 = MathUtils.addAndCheck(21, 3);
      byte byte0 = MathUtils.sign((byte) (-1));
      double double0 = MathUtils.nextAfter(0.0, (-1.0));
      int int2 = MathUtils.hash(80.30264824);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-712.2423276752);
      doubleArray0[1] = 80.30264824;
      doubleArray0[2] = (double) (-1473);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-689099742);
      doubleArray1[1] = (double) (-689099742);
      doubleArray1[2] = (double) 24;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      int int3 = MathUtils.subAndCheck((-1473), 6);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 52;
      boolean boolean0 = MathUtils.equals(2012.2, 0.0, 52);
      double double1 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 52, 52);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = MathUtils.log(1.1102230246251565E-16, 1.1102230246251565E-16);
      double double1 = MathUtils.binomialCoefficientLog(1198, 216);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.nextAfter((-1.0), 0.0);
      int int0 = (-1264);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1264));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,264
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = MathUtils.log(1222.4, 1222.4);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-194.835391);
      doubleArray0[1] = 2327.2308;
      doubleArray0[2] = 1507.9;
      doubleArray0[3] = 3412.003996316;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 4.9E-324;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 10.0;
      doubleArray0[8] = (-3223.2546424);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-194.835391);
      doubleArray1[1] = 3412.003996316;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-194.835391);
      doubleArray1[4] = (-194.835391);
      doubleArray1[5] = 4.9E-324;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 2452;
      float float0 = MathUtils.round(1.0F, 2452);
      int int1 = MathUtils.indicator(2452);
      long long0 = MathUtils.pow((long) 1, 12);
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.indicator(2.0);
      double double2 = MathUtils.log(0.0, 2.0);
      double double3 = 6.283185307179586;
      double double4 = MathUtils.log(6.283185307179586, -0.0);
      int int2 = MathUtils.compareTo((-1627.1747503454), 0.0, 12);
      double double5 = MathUtils.indicator(0.0);
      short short0 = MathUtils.indicator((short)2329);
      double double6 = MathUtils.round(0.0, 2452);
      int int3 = MathUtils.subAndCheck((-2679), 615);
      double double7 = MathUtils.sinh((-1627.1747503454));
      // Undeclared exception!
      try { 
        MathUtils.equals(1358.7, 0.0, (-4728));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = MathUtils.hash(1675.1304726);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round(2704.858, (-637414244), 0);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.nextAfter(3183.141885, 3183.141885);
      long long0 = MathUtils.indicator(1505L);
      int int0 = MathUtils.sign(7);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      long long2 = MathUtils.mulAndCheck((long) 0, (long) 7);
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3183.141885;
      doubleArray0[1] = 378.73618;
      doubleArray0[2] = 0.5;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 3183.141885;
      doubleArray0[5] = 3183.141885;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1L);
      double double1 = MathUtils.nextAfter((-2046.05), 0.0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = MathUtils.round((-1485.78669429), 1882, 0);
      long long0 = MathUtils.mulAndCheck(4204L, (long) 0);
      double double1 = MathUtils.sign((-1485.78669429));
      long long1 = MathUtils.mulAndCheck(4204L, (-973L));
      int int0 = MathUtils.mulAndCheck(1882, 0);
      double double2 = MathUtils.factorialDouble(1);
      double double3 = MathUtils.binomialCoefficientDouble(1, 0);
      long long2 = MathUtils.indicator(0L);
      double double4 = MathUtils.cosh(0.0);
      double double5 = MathUtils.nextAfter(0.0, 0.0);
      long long3 = MathUtils.subAndCheck(1727L, (long) 1882);
      byte byte0 = MathUtils.indicator((byte) (-52));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-599L), 355687428096000L);
      int int0 = MathUtils.subAndCheck(0, (-2136));
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float float0 = MathUtils.round((-2032.9F), 0);
      double double0 = MathUtils.cosh((-2033.0F));
      short short0 = MathUtils.indicator((short) (-577));
      int int0 = MathUtils.addAndCheck(0, 6);
      short short1 = MathUtils.indicator((short) (-831));
      float float1 = MathUtils.round((-1.0F), (int) (short) (-1));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      float float0 = MathUtils.indicator((float) (byte)0);
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = MathUtils.normalizeAngle(Double.NEGATIVE_INFINITY, 0.0);
      float float1 = MathUtils.indicator(0.0F);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      int[] intArray1 = new int[1];
      intArray1[0] = (-240);
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        MathUtils.pow((-1262), (long) (-1262));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,262^-1,262)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 595.640599);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = (-384);
      try { 
        MathUtils.pow((-384), (long) (-384));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-384^-384)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
      int int0 = 1693;
      double double0 = MathUtils.binomialCoefficientLog(1693, 1693);
      int int1 = 2539;
      int int2 = 8;
      double double1 = MathUtils.binomialCoefficientDouble(2539, 8);
      short short0 = (short)1893;
      short short1 = MathUtils.sign((short)1893);
      int int3 = 1;
      float float1 = MathUtils.round(0.0F, (int) (short)1893, 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int4 = 1584;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1584);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = MathUtils.round(369.0F, (-97));
      double double0 = MathUtils.log((-97), Float.NaN);
      long long0 = MathUtils.sign((-2494L));
      long long1 = MathUtils.pow((long) (-97), 3);
      int int0 = MathUtils.pow((-97), (long) 3);
      boolean boolean0 = MathUtils.equals((double) (-912673L), Double.POSITIVE_INFINITY, 332);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) (-97);
      int int1 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.scalb((-912673L), (-2125446207));
      float float1 = MathUtils.round(0.0F, 964);
      boolean boolean1 = MathUtils.equals(2566.5946128932, (-1.7788569949452943E295));
      int int2 = MathUtils.compareTo(3, (-3764.39), 964);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = MathUtils.pow(180, 0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = MathUtils.sign((-664L));
      int int0 = MathUtils.hash((double) (-1L));
      long long1 = 223L;
      long long2 = MathUtils.mulAndCheck((-1817L), 223L);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1074790400), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,074,790,400, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 2866;
      int int1 = MathUtils.lcm(14, 2866);
      float float0 = MathUtils.indicator((float) 20062);
      long long0 = MathUtils.addAndCheck((long) 2866, 0L);
      long long1 = MathUtils.indicator((long) 20062);
      int[] intArray0 = new int[6];
      intArray0[0] = 14;
      intArray0[1] = 14;
      intArray0[2] = 20062;
      intArray0[3] = 14;
      intArray0[4] = 2866;
      intArray0[5] = 20062;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int2 = MathUtils.addAndCheck(20062, 20062);
      float float1 = MathUtils.indicator(0.0F);
      boolean boolean0 = MathUtils.equals(768.985769, (double) 0L, (double) 2866);
      // Undeclared exception!
      MathUtils.factorialDouble(20062);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2086L, (-87L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-87L);
      doubleArray0[1] = (double) (-181482L);
      doubleArray0[2] = (double) 2086L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-87L);
      doubleArray0[5] = (double) (-181482L);
      doubleArray0[6] = (double) (-181482L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-971);
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 424;
      intArray0[5] = 1;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-8466.0), (double) 1, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, 0, 0);
      short short0 = (short)1518;
      short short1 = MathUtils.indicator((short)1518);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.indicator((-308.388460469576));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 19);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 19
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      long long1 = MathUtils.sign(0L);
      byte byte0 = (byte)97;
      byte byte1 = MathUtils.sign((byte)97);
      int int0 = (-2745);
      int int1 = MathUtils.pow((-2745), (int) (byte)97);
      int int2 = 2987;
      int int3 = MathUtils.addAndCheck(2987, 1635);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int4 = bigInteger0.bitCount();
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      int int5 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(Integer.MIN_VALUE, 4622);
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.nextAfter((-1073.0881), (-1073.0881));
      double double1 = MathUtils.scalb(0.0, 13);
      int[] intArray0 = new int[5];
      intArray0[0] = 31;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[3] = 13;
      intArray0[4] = 13;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(3, 3);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.addAndCheck(2446, (-3172));
      int int1 = MathUtils.compareTo(2512.628, 6.283185307179586, (-1.0));
      double double2 = MathUtils.cosh(3);
      double double3 = MathUtils.indicator((double) (-726));
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int2 = MathUtils.compareTo((-45.993387), 1.0, 1.0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-2555));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (76,155,222,753,280^-2,555)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.factorialDouble((byte)0);
      short short0 = MathUtils.indicator((short) (-1658));
      double double1 = MathUtils.indicator((-3443.960198765153));
      double double2 = MathUtils.nextAfter((-3443.960198765153), (byte)0);
      long long0 = MathUtils.factorial(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      short short0 = MathUtils.indicator((short) (-2210));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((short) (-1), (short) (-2210));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger1.gcd(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.andNot(bigInteger1);
      int int0 = bigInteger0.getLowestSetBit();
      int int1 = (-701);
      try { 
        MathUtils.pow(bigInteger0, (-701));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-701)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = MathUtils.compareTo(1494.122453, 6.283185307179586, 1494.122453);
      int int1 = MathUtils.subAndCheck((-349), 4772);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4772;
      doubleArray0[1] = (double) 4772;
      doubleArray0[2] = (double) 4772;
      doubleArray0[3] = 1494.122453;
      doubleArray0[4] = (double) 4772;
      doubleArray0[5] = (double) (-5121);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 4772;
      int int2 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      int int1 = MathUtils.addAndCheck((-4104), 0);
      double double1 = MathUtils.factorialLog(0);
      long long0 = MathUtils.indicator(2147483647L);
      float float0 = MathUtils.indicator((-1381.6304F));
      float float1 = MathUtils.round((-1.0F), 0, 0);
      double double2 = MathUtils.nextAfter((-1215.02276357045), 0);
      double double3 = MathUtils.factorialDouble(0);
      double double4 = MathUtils.binomialCoefficientDouble(0, (-4104));
      double double5 = MathUtils.sign(0.0);
      long long1 = MathUtils.sign(0L);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-4104), (-1035), (-1035));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,035, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-653L), (-1024L));
      int int0 = 0;
      float float0 = MathUtils.round((float) 668672L, 0);
      int int1 = (-5893);
      long long1 = MathUtils.binomialCoefficient(0, (-5893));
      int int2 = MathUtils.sign((-5893));
      int int3 = (-1);
      try { 
        MathUtils.pow((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1637.25);
      doubleArray0[1] = 170.39922;
      doubleArray0[2] = 995.160201325205;
      doubleArray0[3] = (-1601.66017210036);
      doubleArray0[4] = (-519.0);
      doubleArray0[5] = (-1121.02);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1815.4644313909937;
      doubleArray0[8] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator((-674L));
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (-1L);
      doubleArray1[2] = 1815.4644313909937;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1815.4644313909937;
      doubleArray1[5] = (-1637.25);
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(3638);
      double double1 = MathUtils.normalizeAngle(3638, (-311.5709));
      float float0 = MathUtils.round((-2997.0876F), 3638);
      long long0 = MathUtils.addAndCheck(0L, (-391L));
      int[] intArray0 = new int[1];
      intArray0[0] = 3638;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-391L);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) Float.NaN;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = 1.0;
      int int0 = MathUtils.hash(1.0);
      // Undeclared exception!
      MathUtils.factorialLog(1072693248);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-280.0);
      doubleArray0[1] = (-2027.696005);
      doubleArray0[2] = (-2124.91073);
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-591.0));
      short short0 = MathUtils.sign((short)0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(2101.66130245184, (-2027.696005), 1);
      double double1 = MathUtils.round((-3003.316722759547), 1);
      int int0 = MathUtils.compareTo(0.0, (-965.34975546031), (-965.34975546031));
      double double2 = MathUtils.normalizeAngle((-1294.111089403577), 0.0);
      Random.setNextRandom((short)0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(889L, 4503599627370495L);
      int int0 = MathUtils.lcm(11, 0);
      long long1 = MathUtils.pow(4503599627370495L, 0L);
      long long2 = MathUtils.subAndCheck((-800L), 1723L);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.hash(432.510751);
      long long0 = MathUtils.subAndCheck(725L, (long) 1229364808);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1229364083L);
      doubleArray0[1] = (double) (-1229364083L);
      doubleArray0[2] = (double) 725L;
      doubleArray0[3] = (double) 725L;
      doubleArray0[4] = (double) 725L;
      doubleArray0[5] = (double) (-1229364083L);
      doubleArray0[6] = 432.510751;
      doubleArray0[7] = (double) 1229364808;
      doubleArray0[8] = 432.510751;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck(1229364808, (-1));
      float float0 = MathUtils.sign((-1277.1F));
      // Undeclared exception!
      MathUtils.factorialDouble(1229364809);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(560, 5);
      int int1 = MathUtils.hash(782.1722011);
      int int2 = MathUtils.compareTo(1556.67702, 397.450188684, 1.0);
      long long0 = MathUtils.sign((-1130L));
      int int3 = MathUtils.pow(0, 2415);
      long long1 = MathUtils.sign((long) 560);
      short short0 = MathUtils.sign((short)1939);
      long long2 = MathUtils.sign(720L);
      double double0 = MathUtils.scalb(1.1102230246251565E-16, 0);
      double double1 = MathUtils.nextAfter(Double.NaN, 1.1102230246251565E-16);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1L, 1184, 560);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 560, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = bigInteger1.setBit(1);
      BigInteger bigInteger3 = bigInteger1.setBit(1);
      BigInteger bigInteger4 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.multiply(bigInteger4);
      BigInteger bigInteger6 = bigInteger0.or(bigInteger1);
      int int1 = bigInteger0.compareTo(bigInteger1);
      int int2 = 835;
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, 835);
      long long0 = MathUtils.subAndCheck(1219L, (-1L));
      long long1 = MathUtils.sign((long) 835);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 1219L, (double) 1, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-3203), (-3203));
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-3203);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-3203);
      intArray0[8] = (-3203);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.subAndCheck(0, 1422);
      boolean boolean0 = MathUtils.equals((-1660.264032), (double) (-3203), (double) 0);
      double double0 = MathUtils.factorialLog(0);
      long long0 = MathUtils.indicator((-1L));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2092));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,092
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = (-2241);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2241));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,241
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = MathUtils.sign(1127L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.mod(bigInteger0);
      BigInteger bigInteger3 = bigInteger1.clearBit(0);
      BigInteger bigInteger4 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger5 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger5.toByteArray();
      BigInteger bigInteger6 = bigInteger0.divide(bigInteger5);
      BigInteger bigInteger7 = bigInteger0.clearBit(0);
      BigInteger bigInteger8 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.pow(1127L, 1L);
      int int0 = MathUtils.mulAndCheck(529, 0);
      byte byte0 = (byte) (-107);
      byte byte1 = MathUtils.sign((byte) (-107));
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1127L, 1828, (-1117));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,117, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((-1L));
      int int0 = bigInteger1.intValueExact();
      int int1 = bigInteger1.compareTo(bigInteger0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 635L);
      BigInteger bigInteger4 = bigInteger3.andNot(bigInteger2);
      // Undeclared exception!
      try { 
        bigInteger3.testBit((-1));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      double double1 = MathUtils.factorialDouble(12);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.shiftLeft(12);
      BigInteger bigInteger3 = bigInteger0.divide(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, (long) 12);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2828));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,828
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.sign((-1.0));
      double double1 = MathUtils.nextAfter(0, 716.95885307);
      float float0 = MathUtils.round((float) 0, 0, 0);
      int int1 = MathUtils.hash((double) 0);
      int int2 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 4.9E-324;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 716.95885307;
      doubleArray0[6] = (-1.0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = MathUtils.pow(1L, 0);
      long long1 = MathUtils.addAndCheck(1L, (-1299L));
      double double0 = MathUtils.sinh((-1299L));
      double double1 = MathUtils.log(0, 1L);
      int int0 = MathUtils.gcd(0, 0);
      double double2 = MathUtils.scalb(0, 0);
      double double3 = MathUtils.sinh((-1298L));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 2187);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,187
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1344, 1344);
      double double1 = MathUtils.binomialCoefficientDouble(1344, 1);
      double double2 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, (double) 1, 1);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double double3 = MathUtils.sign(0.0);
      long long1 = MathUtils.pow((long) 0, (long) 0);
      double double4 = MathUtils.binomialCoefficientDouble(1344, 0);
      double double5 = (-1.0);
      int int0 = MathUtils.compareTo(0.0, 1, (-1.0));
      double double6 = MathUtils.scalb(1.0, (-1));
      int int1 = MathUtils.compareTo(0.0, 1.0, 1L);
      double double7 = MathUtils.cosh((-1.0));
      long long2 = MathUtils.pow((long) (-1), (long) 1);
      double double8 = MathUtils.round((double) (-1), 0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      int int0 = MathUtils.hash(doubleArray0);
      long long1 = MathUtils.mulAndCheck(0L, 3653L);
      int int1 = MathUtils.pow((-4287), 9223372036854775807L);
      double double0 = MathUtils.binomialCoefficientLog(961, (-1));
      long long2 = MathUtils.binomialCoefficient(961, 961);
      long long3 = MathUtils.mulAndCheck(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0L, 961, 1837408449);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      int int0 = MathUtils.sign(0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialLog(304);
      long long0 = MathUtils.factorial(0);
      double double3 = MathUtils.sinh(4.9E-324);
      long long1 = MathUtils.addAndCheck((long) 0, 1L);
      short short0 = MathUtils.sign((short)0);
      int int1 = MathUtils.compareTo((-1182.874570619399), (-2075.55930600134), 0);
      int int2 = MathUtils.gcd((short)0, 0);
      boolean boolean1 = MathUtils.equals(215.48127666161, 1437.7541477341088, (-1964.45));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
      int int0 = MathUtils.subAndCheck(283, (-2780));
      int int1 = MathUtils.subAndCheck((-422), 283);
      long long0 = MathUtils.indicator(362880L);
      double double0 = MathUtils.sinh(0.0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 283;
      intArray0[2] = 3063;
      intArray0[3] = 283;
      intArray0[4] = (-422);
      intArray0[5] = (-2780);
      intArray0[6] = 3063;
      intArray0[7] = (-2780);
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 3);
      int int0 = MathUtils.sign(1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      int int1 = (-1477);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1477), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,477, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
      int int0 = MathUtils.subAndCheck(283, (-2780));
      int int1 = MathUtils.subAndCheck((-422), 283);
      long long0 = MathUtils.indicator(362892L);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 283;
      intArray0[2] = 3063;
      intArray0[3] = 283;
      intArray0[4] = (-422);
      intArray0[5] = (-2780);
      intArray0[6] = 3063;
      intArray0[7] = (-2780);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0, (double) 0);
      double double0 = MathUtils.round((double) 0, 0, 0);
      int int1 = MathUtils.lcm(7, 1077);
      int int2 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 4.9E-324);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 4.9E-324;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray2);
      int int0 = 21;
      double double0 = MathUtils.scalb((-2992.44288779765), 21);
      int int1 = MathUtils.gcd((-3564), 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3564), 3564);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,564, k = 3,564
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      boolean boolean0 = MathUtils.equals(0.0, Double.POSITIVE_INFINITY, 0.0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      long long0 = MathUtils.mulAndCheck((long) 0, 819L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 819L;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 819L;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 819L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = MathUtils.indicator((-5044.45749705));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathUtils.cosh(5039.899803);
      byte byte0 = MathUtils.indicator((byte)1);
      double double1 = MathUtils.factorialDouble((byte)1);
      float float0 = MathUtils.sign(3027.3F);
      short short0 = MathUtils.sign((short) (byte)1);
      long long0 = MathUtils.mulAndCheck((long) (byte)1, (long) (short)1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = MathUtils.indicator(20);
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = MathUtils.mulAndCheck(20, (int) (byte)1);
      int int2 = MathUtils.sign((-1));
      boolean boolean0 = MathUtils.equals(0.0, 2.0, (int) (byte)1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 20;
      int int3 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = 20;
      String string0 = bigInteger0.toString(20);
      BigInteger bigInteger1 = bigInteger0.flipBit(20);
      int int1 = bigInteger0.bitLength();
      int int2 = bigInteger0.signum();
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0L);
      double double0 = MathUtils.sinh(20);
      boolean boolean0 = MathUtils.equals((double) 0L, 2.4258259770489514E8);
      double double1 = MathUtils.cosh((-776.115041171669));
      double double2 = MathUtils.indicator(842.855);
      int int3 = MathUtils.compareTo(842.855, Double.POSITIVE_INFINITY, 237.775153);
      long long0 = MathUtils.mulAndCheck((long) (-1), 0L);
      int int4 = MathUtils.gcd(1, (-1));
      long long1 = MathUtils.sign((long) (-1));
      try { 
        MathUtils.pow(1L, (-4138L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-4,138)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round((-1525.02059), 0, 0);
      long long0 = MathUtils.subAndCheck((long) 0, (long) 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int1 = bigInteger0.intValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-691);
      double double0 = MathUtils.round(3634.688415993, (-691));
      try { 
        MathUtils.pow((long) (-691), (-691));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-691^-691)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 1658;
      double double0 = MathUtils.binomialCoefficientDouble(1658, 1658);
      double double1 = MathUtils.factorialDouble(1658);
      int int1 = 643;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1658, 643);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-265.5), 0.0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float float0 = MathUtils.indicator((-789.0487F));
      double double0 = MathUtils.sinh((-1.0F));
      double double1 = MathUtils.sinh((-1538.624902));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.1752011936438014);
      doubleArray0[1] = (-1.1752011936438014);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1538.624902);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double4 = MathUtils.factorialDouble(21);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.compareTo((-3354.5485939), 0.0, 0.0);
      int int1 = MathUtils.addAndCheck((-1), (-1));
      int int2 = MathUtils.sign((-1));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3354.5485939);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (-3354.5485939);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (-2);
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (-3354.5485939);
      doubleArray1[6] = (double) (-2);
      doubleArray1[7] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.sign((-2259));
      double double1 = MathUtils.normalizeAngle(716.799691029, 0.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1057L, 3003L);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = MathUtils.sign(31);
      double double0 = MathUtils.round((double) 1, 0);
      float float0 = MathUtils.sign((float) 31);
      int int1 = MathUtils.indicator(1);
      int int2 = MathUtils.gcd(1, 0);
      long long0 = MathUtils.pow(0L, 31);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(12);
      int int0 = MathUtils.gcd(0, 12);
      short short0 = MathUtils.sign((short) (-2812));
      int int1 = MathUtils.sign(12);
      int int2 = MathUtils.pow((-1790), (long) 12);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.nextAfter(3.141592653589793, 1);
      int int3 = MathUtils.pow(19, 2234L);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.cosh(192.908887);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.0077043126327944E83;
      doubleArray0[1] = 3.0077043126327944E83;
      doubleArray0[2] = 3.0077043126327944E83;
      doubleArray0[3] = 192.908887;
      doubleArray0[4] = 3.0077043126327944E83;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      double double0 = MathUtils.cosh(680.2869105774395);
      float float0 = MathUtils.indicator(3290.36F);
      float float1 = MathUtils.round(1198.0F, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1097;
      intArray0[5] = 1;
      intArray0[6] = 1;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      int int0 = bigInteger0.signum();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      long long0 = MathUtils.pow(1366L, 1366L);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-1449), (-1449));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,449, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float float0 = MathUtils.round((-1.0F), 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2178);
      intArray0[4] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      int int0 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(4014, 1);
      double double0 = MathUtils.factorialDouble(0);
      int[] intArray0 = new int[3];
      intArray0[0] = 5100;
      intArray0[1] = 4014;
      intArray0[2] = 1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.factorialLog(0);
      double double2 = MathUtils.cosh(0.0);
      double double3 = MathUtils.cosh(4013);
      long long0 = MathUtils.indicator(3628800L);
      int int2 = MathUtils.indicator((-2659));
      // Undeclared exception!
      try { 
        MathUtils.factorial(61);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.sinh(1227.246);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1227.246;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 1227.246;
      doubleArray0[3] = 1227.246;
      doubleArray0[4] = 1227.246;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.hash((-2464.4136093));
      long long0 = MathUtils.pow((long) 70934902, 70934902);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 70934902;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (-2464.4136093);
      doubleArray0[4] = (double) 0L;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 0.5;
      double double1 = MathUtils.sign(0.5);
      int int0 = 1458;
      double double2 = MathUtils.binomialCoefficientDouble(1458, 1458);
      long long0 = MathUtils.addAndCheck((long) 1458, (long) 1458);
      long long1 = 4503599627370496L;
      long long2 = MathUtils.subAndCheck(4503599627370496L, 4503599627370496L);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(388L, 0L);
      long long1 = MathUtils.subAndCheck((-9218868437227405313L), 0L);
      double double0 = MathUtils.sign(1433.9);
      int int0 = MathUtils.pow((-1924), 388L);
      int int1 = MathUtils.pow(12, 12);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      double double0 = MathUtils.factorialDouble((short)0);
      double double1 = MathUtils.factorialLog((short)0);
      int int0 = MathUtils.addAndCheck(8, (int) (short)0);
      float float0 = MathUtils.round((float) (short)0, 8);
      double double2 = MathUtils.sinh(0.0F);
      float float1 = MathUtils.sign((float) (short)0);
      double double3 = MathUtils.scalb(8, (short)0);
      long long0 = MathUtils.factorial((short)0);
      double double4 = MathUtils.binomialCoefficientDouble(8, 8);
      int int1 = MathUtils.hash(8.0);
      int int2 = MathUtils.hash(0.0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-402), 7);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -402, k = 7
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 53;
      int int1 = MathUtils.gcd(53, (-2195));
      int int2 = MathUtils.sign(1);
      int int3 = MathUtils.gcd(2514, 2514);
      byte byte0 = MathUtils.indicator((byte)13);
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0), (int) (byte)13, 851);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = (-2114.65421);
      double double1 = MathUtils.scalb((-2114.65421), 2193);
      double double2 = MathUtils.sign((-9.431672944042014E46));
      int int0 = (-2579);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 2193, (-2579));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,579, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.sign((-1750.0692387659465));
      double double1 = MathUtils.scalb((-1750.0692387659465), (-1461));
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("hd}_vmE3kk)", (-1461));
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, (-449.0), (-449.0));
      byte byte0 = MathUtils.sign((byte) (-3));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-9223372036854775808L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        MathUtils.pow((-1L), (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      long long0 = MathUtils.binomialCoefficient(3588, (-949));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = MathUtils.sign(2147483647L);
      int int0 = MathUtils.hash((double) 1L);
      long long1 = MathUtils.indicator(1L);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.indicator((-3775L));
      double double0 = MathUtils.sinh((-1L));
      int int0 = MathUtils.lcm((-526), 815);
      int[] intArray0 = new int[3];
      intArray0[0] = 815;
      intArray0[1] = 428690;
      intArray0[2] = (-131);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = 0;
      int int3 = MathUtils.lcm(0, (-1893));
      int int4 = MathUtils.subAndCheck(428690, (-1893));
      long long1 = MathUtils.sign((long) 0);
      byte byte0 = MathUtils.sign((byte)61);
      int[] intArray1 = new int[8];
      intArray1[0] = (-1893);
      intArray1[1] = 0;
      intArray1[2] = (int) (byte)61;
      intArray1[3] = (int) (byte)61;
      intArray1[4] = 815;
      intArray1[5] = (int) (byte)61;
      intArray1[6] = 0;
      intArray1[7] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray1, intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = (-2039);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2039), (-2039));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,039
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathUtils.log(3.141592653589793, 0.0);
      long long0 = MathUtils.factorial(15);
      int int0 = 1709;
      int int1 = MathUtils.sign(1709);
      int int2 = 0;
      int int3 = MathUtils.mulAndCheck(0, 1);
      short short0 = MathUtils.indicator((short)3582);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 1);
      String string0 = bigInteger1.toString();
      byte[] byteArray0 = bigInteger1.toByteArray();
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 1709, 1709);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      int int0 = MathUtils.subAndCheck(5, 5);
      boolean boolean0 = MathUtils.equals((-2327.49795054373), 10.0, (double) 5);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, (-2044), (-2044));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,044, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = (-1L);
      long long1 = MathUtils.indicator((-1L));
      long long2 = MathUtils.mulAndCheck((-1L), (-1L));
      int int0 = 2231;
      // Undeclared exception!
      try { 
        MathUtils.factorial(2231);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.cosh((-289.75186744377));
      int int0 = MathUtils.pow(2, 2);
      int int1 = MathUtils.lcm(4, 717);
      long long0 = MathUtils.pow(0L, (long) 717);
      double double1 = MathUtils.round(0.0, 0);
      int int2 = MathUtils.gcd(4, 4);
      double double2 = MathUtils.indicator(2657.70000824);
      double double3 = MathUtils.sinh((-1669.92791307272));
      boolean boolean0 = MathUtils.equals((-2227.4904), (double) 4, 1.0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1, 699);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.sinh((-1746.73010608));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(5527, 5527);
      int int1 = MathUtils.lcm(0, 5527);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = MathUtils.lcm((-354), (-124));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = (-866);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-866));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -866
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1499L);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      float float0 = MathUtils.round(0.0F, (-2065));
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = MathUtils.compareTo((-862.0), (-862.0), (-862.0));
      long long0 = MathUtils.sign(1550L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1550L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-862.0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.gcd((-923), 0);
      short short0 = MathUtils.sign((short) (-1));
      int int2 = MathUtils.indicator((-923));
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int3 = MathUtils.compareTo((-862.0), 4772.0, (short) (-1));
      double double1 = MathUtils.scalb(1945.822065050123, (-1));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2170;
      intArray0[1] = 1709;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2170;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 2170;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      double double0 = MathUtils.factorialDouble(1);
      double double1 = MathUtils.factorialDouble(1063);
      double double2 = MathUtils.round(1196.839, 2157, 0);
      long long0 = MathUtils.binomialCoefficient(1, 0);
      long long1 = MathUtils.sign((long) 1);
      long long2 = MathUtils.mulAndCheck(1L, (-992L));
      int int1 = MathUtils.pow(1, 0L);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1735), (-1735));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,735
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 292);
      double double1 = MathUtils.round(0.0, 292);
      long long0 = MathUtils.sign((-606L));
      byte byte0 = MathUtils.indicator((byte) (-125));
      double double2 = MathUtils.nextAfter((-606L), (-1541.07));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) 292;
      doubleArray0[3] = (double) 292;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 298.38306224);
      double double3 = MathUtils.cosh((-187.16490605633876));
      double double4 = MathUtils.distance(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((byte) (-125), (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -125, k = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, (-3180.646275505));
      double double1 = MathUtils.indicator(0.0);
      int int0 = MathUtils.mulAndCheck(715, 715);
      double double2 = MathUtils.indicator((double) 511225);
      long long0 = MathUtils.sign(120L);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = (-3572);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3572));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,572
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      byte byte0 = MathUtils.indicator((byte)65);
      double double0 = MathUtils.normalizeAngle(0L, (byte)1);
      long long1 = MathUtils.factorial((byte)1);
      byte byte1 = MathUtils.sign((byte)1);
      boolean boolean0 = MathUtils.equals(1835.0, 1835.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger1, bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.log(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      int int0 = MathUtils.mulAndCheck(9, 9);
      double double1 = (-390.3170215853268);
      double double2 = MathUtils.nextAfter((-390.3170215853268), Double.NaN);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 1.0);
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1L, 1L);
      double double0 = MathUtils.nextAfter(1L, 6.283185307179586);
      int int0 = MathUtils.lcm(20, 20);
      int int1 = MathUtils.sign(20);
      long long1 = MathUtils.factorial(20);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 2432902008176640000L;
      doubleArray0[2] = (double) 1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.nextAfter(0.0, 6.283185307179586);
      int int2 = MathUtils.pow((-1890), 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.flipBit(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0L);
      int int3 = MathUtils.mulAndCheck(1, (-390));
      long long2 = MathUtils.addAndCheck((long) 20, (long) (-1890));
      long long3 = MathUtils.addAndCheck(1L, 762L);
  }
}
