/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 02 13:37:28 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.pow(1070, 1070);
      byte byte0 = MathUtils.indicator((byte)0);
      float float0 = MathUtils.sign(Float.NaN);
      boolean boolean0 = MathUtils.equals((-4.9E-324), (double) Float.NaN, 1070);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.indicator(0.0);
      double double2 = MathUtils.round(0.0, (int) (byte)1, 0);
      int int1 = MathUtils.compareTo((-3765.159576354), (-4.9E-324), 2189.02);
      int int2 = MathUtils.mulAndCheck((int) (byte)0, 0);
      long long0 = MathUtils.pow((long) 0, 0L);
      int int3 = MathUtils.pow(67, 0L);
      boolean boolean1 = MathUtils.equals(953.9424053426357, 2573.719521388673, 1);
      boolean boolean2 = MathUtils.equals((double) 67, (double) 0L);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = MathUtils.sign(1L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.andNot(bigInteger1);
      int int0 = bigInteger0.intValue();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 1269L);
      boolean boolean0 = MathUtils.equals((double) 1269L, 1.98662627744103712E17, (-1748.7170126));
      boolean boolean1 = MathUtils.equals(4276.15546, (-3938.9715), (double) 1269L);
      long long1 = MathUtils.subAndCheck(1269L, 1L);
      long long2 = 2527L;
      long long3 = MathUtils.pow(1269L, 2527L);
      byte byte0 = (byte) (-28);
      byte byte1 = MathUtils.indicator((byte) (-28));
      BigInteger bigInteger5 = BigInteger.TEN;
      BigInteger bigInteger6 = MathUtils.pow(bigInteger2, bigInteger5);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9223372036854775808L), 1070L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = MathUtils.pow(1070, 1070);
      byte byte0 = MathUtils.indicator((byte)0);
      float float0 = MathUtils.round((float) (byte)1, 0, (int) (byte)1);
      boolean boolean0 = MathUtils.equals((-4.9E-324), (double) 0.0F, 1070);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.indicator(0.0);
      int int1 = MathUtils.compareTo((-3765.159576354), (-4.9E-324), 2189.02);
      int int2 = MathUtils.mulAndCheck((int) (byte)0, 0);
      long long0 = MathUtils.pow((long) 0, 0L);
      int int3 = MathUtils.pow(67, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4.9E-324);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (-3765.159576354);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = MathUtils.pow((-4476578029610467328L), 2527L);
      long long1 = MathUtils.sign((-1L));
      int int0 = 5;
      double double0 = MathUtils.binomialCoefficientDouble(5, 5);
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      intArray0[5] = 5;
      intArray0[6] = 5;
      intArray0[7] = 5;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2527L;
      doubleArray0[1] = (-4.9E-324);
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = 1.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = (-391);
      int int2 = MathUtils.lcm((-391), 5);
      // Undeclared exception!
      try { 
        MathUtils.lcm(Integer.MIN_VALUE, 5);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = MathUtils.pow(1070, 1070);
      byte byte0 = MathUtils.indicator((byte)0);
      float float0 = MathUtils.sign((float) (byte)0);
      boolean boolean0 = MathUtils.equals((-4.9E-324), (double) 0.0F, 1070);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.indicator(0.0);
      double double2 = MathUtils.round(0.0, (int) (byte)1, 0);
      int int1 = MathUtils.compareTo((-3765.159576354), (-4.9E-324), 2189.02);
      int int2 = MathUtils.mulAndCheck((int) (byte)0, 0);
      long long0 = MathUtils.pow((long) 0, 0L);
      int int3 = MathUtils.pow(67, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4.9E-324);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (-3765.159576354);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-764L), (-764L));
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      int int0 = 2146801010;
      // Undeclared exception!
      try { 
        MathUtils.lcm(1829, 2146801010);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 659);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 659);
      BigInteger bigInteger0 = BigInteger.valueOf(1L);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      boolean boolean0 = bigInteger1.equals((Object) null);
      BigInteger bigInteger3 = BigInteger.ZERO;
      BigInteger bigInteger4 = bigInteger0.xor(bigInteger3);
      BigInteger bigInteger5 = bigInteger0.add(bigInteger1);
      int int1 = bigInteger0.signum();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      int int2 = MathUtils.lcm((-2387), 1564);
      double double0 = MathUtils.log(163.39775, 163.39775);
      boolean boolean1 = MathUtils.equals((double) (byte)1, (double) 659, 0.0);
      double double1 = MathUtils.nextAfter(0.0, 1.1102230246251565E-16);
      double double2 = MathUtils.binomialCoefficientDouble(9995, 659);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.binomialCoefficient(5, (-1));
      double double1 = MathUtils.factorialLog(0);
      long long1 = MathUtils.sign((long) 0);
      long long2 = MathUtils.mulAndCheck(0L, 1L);
      boolean boolean0 = MathUtils.equals(0.0, (-81.980709073298), 0.0);
      int int0 = MathUtils.indicator(19);
      long long3 = MathUtils.subAndCheck(49L, 1L);
      double double2 = MathUtils.factorialLog(0);
      double double3 = MathUtils.sinh(0.0);
      int int1 = MathUtils.addAndCheck(19, 1);
      int int2 = MathUtils.lcm(327, 1);
      long long4 = MathUtils.addAndCheck((long) 19, (long) 19);
      short short0 = MathUtils.indicator((short)1974);
      float float0 = MathUtils.sign((-1.0F));
      int[] intArray0 = new int[1];
      intArray0[0] = 20;
      int int3 = MathUtils.distance1(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte)0);
      double double4 = MathUtils.binomialCoefficientLog((short)1, 0);
      double double5 = MathUtils.binomialCoefficientLog(20, 18);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1.0, 1.0);
      double double1 = MathUtils.factorialLog(0);
      byte byte0 = MathUtils.indicator((byte)1);
      double double2 = MathUtils.binomialCoefficientDouble(1, 0);
      int int0 = MathUtils.lcm(1, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (int) (byte)1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.sign(921.902);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1019);
      int int0 = (-2332);
      intArray0[1] = (-2332);
      intArray0[2] = (-2502);
      intArray0[3] = 2146690238;
      intArray0[4] = (-2233);
      int int1 = (-2522);
      intArray0[5] = (-2522);
      intArray0[6] = (-3148);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.scalb((-3148), (-2522));
      double double3 = (-1992.2572050176);
      int int3 = MathUtils.compareTo((-2502), 794.0, (-1992.2572050176));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2522));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,522
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1474.893740314852);
      doubleArray0[1] = 400.770292;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.addAndCheck((-1934), (-1934));
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      int int1 = bigInteger1.signum();
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = BigInteger.valueOf((-1934));
      BigInteger bigInteger5 = BigInteger.ONE;
      BigInteger bigInteger6 = bigInteger4.min(bigInteger5);
      BigInteger bigInteger7 = bigInteger0.andNot(bigInteger2);
      BigInteger bigInteger8 = bigInteger3.modPow(bigInteger0, bigInteger0);
      BigInteger bigInteger9 = bigInteger3.subtract(bigInteger4);
      int int2 = bigInteger3.signum();
      BigInteger bigInteger10 = bigInteger0.subtract(bigInteger3);
      BigInteger bigInteger11 = MathUtils.pow(bigInteger0, 1099511627776L);
      int int3 = MathUtils.lcm((-3868), (-1934));
      double double1 = MathUtils.indicator((double) 1099511627776L);
      long long0 = MathUtils.factorial(1);
      int int4 = MathUtils.pow((-3868), 1);
      double double2 = MathUtils.log(0.0, 19.0);
      double double3 = MathUtils.cosh((-807.34891));
      long long1 = MathUtils.subAndCheck((long) (-1934), (long) 3868);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-374.0), (-374.0));
      boolean boolean1 = MathUtils.equals((-374.0), (-1871.499));
      double double0 = MathUtils.sinh((-374.0));
      int int0 = MathUtils.mulAndCheck(1980, 1980);
      double double1 = MathUtils.factorialLog(0);
      int int1 = MathUtils.mulAndCheck(0, (-2628));
      double double2 = MathUtils.log(0.0, (-1448.3464045846));
      int int2 = MathUtils.pow(1447, (long) 0);
      byte byte0 = MathUtils.sign((byte)117);
      double double3 = MathUtils.cosh((-1.33384767511696E162));
      double double4 = MathUtils.scalb(0.0, 1);
      int int3 = MathUtils.subAndCheck(3920400, 1447);
      long long0 = MathUtils.subAndCheck((long) 0, 5040L);
      boolean boolean2 = MathUtils.equals((-1871.499), (-1871.499), (-935.0));
      // Undeclared exception!
      MathUtils.factorialDouble(3920400);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float float0 = MathUtils.round(3252.548F, 0, 0);
      double double0 = MathUtils.sinh(2509.41075563629);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3252.548F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 2509.41075563629;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 3252.548F;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 2509.41075563629;
      doubleArray1[2] = (double) 3252.548F;
      doubleArray1[3] = 2509.41075563629;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 3252.548F;
      double double1 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = MathUtils.pow(4188, 0L);
      byte byte0 = MathUtils.sign((byte)16);
      float float0 = MathUtils.round((float) (byte)16, 0);
      long long0 = MathUtils.pow(0L, 87178291200L);
      double double0 = MathUtils.binomialCoefficientDouble(2513, 2513);
      long long1 = MathUtils.mulAndCheck(3821L, 3821L);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2911;
      intArray0[4] = 1;
      intArray0[5] = 2513;
      intArray0[6] = 0;
      intArray0[7] = 1;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte1 = MathUtils.indicator((byte)1);
      double double1 = MathUtils.scalb((-1596.83530008), 0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round((-1263.0), 0);
      int int1 = MathUtils.pow(4105, (long) 4105);
      long long0 = MathUtils.subAndCheck((long) 4105, 4619L);
      int int2 = 4194304;
      // Undeclared exception!
      MathUtils.factorialLog(4194304);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      long long2 = MathUtils.subAndCheck(0L, 0L);
      boolean boolean0 = MathUtils.equals(0.0, (-2684.6524170961884), (double) 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.addAndCheck((-1807454463), 0);
      long long3 = MathUtils.mulAndCheck((long) 0, 0L);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1807454463);
      intArray0[1] = 0;
      intArray0[2] = (-1807454463);
      intArray0[3] = (-1807454463);
      intArray0[4] = (-1807454463);
      intArray0[5] = (-1807454463);
      int[] intArray1 = new int[6];
      intArray1[0] = (-1807454463);
      intArray1[1] = 0;
      intArray1[2] = (-1807454463);
      intArray1[3] = (-1807454463);
      intArray1[4] = 0;
      intArray1[5] = 0;
      double double0 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      double double0 = MathUtils.sinh((-1.0));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3872.519421, 3872.519421);
      int int0 = MathUtils.lcm(0, 0);
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.cosh((-5669.6));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3872.519421;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 3872.519421;
      doubleArray0[6] = (-5669.6);
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1184.02673);
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.scalb(0.0, 0);
      int int1 = MathUtils.hash(0.0);
      double double1 = MathUtils.normalizeAngle(600.892, 1.1102230246251565E-16);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      long long0 = MathUtils.indicator(0L);
      long long1 = MathUtils.factorial((short)0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-645.484013438831);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      int int0 = (-3595);
      intArray0[1] = (-3595);
      intArray0[2] = 0;
      intArray0[3] = 1424;
      intArray0[4] = 370;
      intArray0[5] = 31;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int[] intArray1 = new int[2];
      intArray1[0] = 370;
      intArray1[1] = 1424;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = MathUtils.sinh((-1.0));
      float float0 = MathUtils.round(Float.NaN, 1184);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (-1.0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-277.49);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-277.49));
      int[] intArray0 = new int[8];
      intArray0[0] = (-1574);
      intArray0[1] = 21;
      intArray0[2] = 0;
      intArray0[3] = (-1799);
      intArray0[4] = 272;
      intArray0[5] = (-1181);
      intArray0[6] = (-3213);
      intArray0[7] = 3934;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      short short0 = MathUtils.indicator((short) (-1898));
      long long0 = MathUtils.mulAndCheck((long) (-1799), 0L);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0L, 883, 272);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      short short0 = MathUtils.indicator((short) (-1241));
      long long0 = MathUtils.addAndCheck(3522L, 0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short) (-1);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray0, (-1.0));
      boolean boolean0 = MathUtils.equals(0.0, (-409.01834), 14);
      int int1 = MathUtils.gcd((-452), 1);
      int[] intArray0 = new int[7];
      intArray0[0] = 14;
      intArray0[1] = 0;
      intArray0[2] = (-452);
      intArray0[3] = 14;
      intArray0[4] = (-452);
      intArray0[5] = 0;
      intArray0[6] = (int) (short) (-1);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      int int3 = MathUtils.lcm(0, 0);
      long long1 = MathUtils.indicator((long) 14);
      double double1 = MathUtils.sinh(0.0);
      short short1 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      int[] intArray0 = new int[5];
      intArray0[0] = 873;
      intArray0[1] = (-1817);
      intArray0[2] = (-657);
      intArray0[3] = 0;
      intArray0[4] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.compareTo((-1817), 0.0, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte)25;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)126);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = MathUtils.lcm((-2094), 879);
      double double0 = MathUtils.nextAfter(613542, 879);
      double double1 = MathUtils.round(613541.9999999999, (-2094));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = MathUtils.hash((-3341.2753051405));
      double double0 = MathUtils.nextAfter(95.922, 95.922);
      long long0 = MathUtils.pow(0L, (long) 878806833);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 95.922;
      doubleArray0[1] = 95.922;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 95.922;
      doubleArray0[5] = (double) 878806833;
      doubleArray0[6] = 95.922;
      doubleArray0[7] = (-3341.2753051405);
      doubleArray0[8] = Double.NaN;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 878806833);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      double double0 = MathUtils.round(1.0, 0, 0);
      double double1 = MathUtils.nextAfter(0.0, 0);
      int int1 = MathUtils.gcd(0, 996);
      double double2 = MathUtils.normalizeAngle(6.283185307179586, 0);
      int int2 = MathUtils.compareTo(1060.526439910313, 4.9E-324, 0.0);
      long long0 = (-1L);
      try { 
        MathUtils.pow(362880L, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (362,880^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = MathUtils.nextAfter(0.0, 0.0);
      long long0 = MathUtils.addAndCheck(486L, 486L);
      long long1 = MathUtils.mulAndCheck(972L, (-1017L));
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      long long2 = MathUtils.binomialCoefficient(17, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) (-1017L);
      doubleArray0[3] = (double) (-1017L);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.factorialLog(17);
      long long3 = MathUtils.sign(486L);
      int int0 = MathUtils.lcm(0, 0);
      boolean boolean0 = MathUtils.equals((double) 486L, (double) 486L);
      int[] intArray0 = new int[5];
      intArray0[0] = 17;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 17;
      double double4 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3245.8, 3245.8, 3245.8);
      int int0 = MathUtils.addAndCheck((-2658), (-2658));
      float float0 = MathUtils.round((float) (-2658), (-2658));
      double double0 = MathUtils.round((-1176.204), (-5316));
      long long0 = MathUtils.pow(20922789888000L, 4194304);
      int int1 = MathUtils.indicator((-5316));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4194304;
      doubleArray0[1] = (double) (-5316);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) Float.NaN;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int2 = MathUtils.addAndCheck((-5316), (-901));
      int int3 = MathUtils.lcm((-6217), (-1438));
      short short0 = MathUtils.sign((short)9);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2658);
      intArray0[1] = (-684);
      double double2 = MathUtils.distance(intArray0, intArray0);
      int int4 = MathUtils.indicator(6316);
      double double3 = MathUtils.nextAfter((-2658), 0.0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.gcd((-247), (-247));
      boolean boolean0 = MathUtils.equals(1720.502, (double) (-247));
      long long0 = MathUtils.mulAndCheck((long) 247, (long) (-247));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-61009L);
      doubleArray0[1] = (double) (-247);
      doubleArray0[2] = (double) (-247);
      doubleArray0[3] = (double) (-247);
      doubleArray0[4] = (double) (-247);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 247;
      doubleArray0[7] = (double) (-247);
      doubleArray0[8] = 1.0;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      double double0 = MathUtils.scalb(0.0, 0);
      long long0 = MathUtils.pow((-770L), 941);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = MathUtils.pow(4503599627370496L, 843);
      int int0 = MathUtils.addAndCheck(843, 843);
      long long1 = MathUtils.subAndCheck(1L, (long) 1686);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 794);
      double double0 = MathUtils.nextAfter(794, 794);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 794.0000000000001;
      doubleArray0[1] = (-207.0669258201);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = 2.2250738585072014E-308;
      doubleArray0[5] = 1089.0;
      doubleArray0[6] = 794.0000000000001;
      doubleArray0[7] = (double) 0.0F;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientDouble(794, 794);
      double double2 = MathUtils.sign(0.0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-204));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -204
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 12;
      int int1 = MathUtils.indicator(12);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals((double) 0L, (-1027.487), 637.63142);
      long long1 = MathUtils.indicator((-240L));
      double double0 = MathUtils.binomialCoefficientLog(2002, (-512));
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long2 = MathUtils.mulAndCheck((long) 1, (long) 1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(1099, 2002);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1,099, k = 2,002
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = MathUtils.sign(2026L);
      double double0 = MathUtils.normalizeAngle(1L, 1L);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-653));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -653
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.round((-149.69726533008154), 1);
      int int0 = MathUtils.indicator(2843);
      long long0 = MathUtils.pow((long) 1, (long) 1);
      int int1 = MathUtils.pow(1123, 1);
      double double1 = MathUtils.indicator((-3233.1700856270563));
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1123, 2843, mockRandom0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      int int1 = MathUtils.lcm(0, 0);
      int int2 = MathUtils.addAndCheck(0, 0);
      long long0 = MathUtils.subAndCheck((long) 0, 0L);
      double double0 = MathUtils.normalizeAngle(0, 0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1011.9885504035366);
      doubleArray0[1] = 1.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(0.0, (double) 0, (-2598.19));
      long long1 = MathUtils.pow(0L, 0);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      int int3 = MathUtils.hash(doubleArray0);
      int int4 = MathUtils.pow((-1531728144), 0);
      long long2 = MathUtils.subAndCheck(2147483647L, 0L);
      double double2 = MathUtils.nextAfter(2136.9766198306, (-2168.1468328154));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.mulAndCheck((int) (byte)0, 0);
      int int1 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.round(1034.834, (int) (byte)0);
      int int2 = MathUtils.sign((-2492));
      int[] intArray0 = new int[5];
      intArray0[0] = (-3099);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = 0;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1743, 1743);
      double double0 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equals((-1.0), (-1.0), 3486);
      int int1 = MathUtils.gcd(1743, 1743);
      byte byte0 = MathUtils.sign((byte)1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) 1743;
      doubleArray0[3] = (double) 3486;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 3486;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-856));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (282,578,783,371,521^-856)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = (-314.0);
      double double1 = MathUtils.indicator((-314.0));
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((-1.0), 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 1245;
      int int1 = 0;
      int int2 = MathUtils.subAndCheck(1245, 0);
      int int3 = 0;
      int int4 = (-4251);
      try { 
        MathUtils.pow(0, (-4251));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-4,251)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 11;
      intArray0[0] = 11;
      int int1 = 0;
      intArray0[1] = 0;
      intArray0[2] = 17;
      int int2 = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 0;
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathUtils.indicator((-1.0));
      boolean boolean0 = MathUtils.equals((-1.0), 0.0);
      double double1 = MathUtils.nextAfter((-1.0), 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1363.222526947);
      doubleArray1[2] = (-24.85);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1.0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 3217);
      int int1 = MathUtils.gcd(1689, 936);
      double double0 = MathUtils.round(1216.12738385, 0);
      int int2 = MathUtils.mulAndCheck(0, (-1));
      int int3 = MathUtils.mulAndCheck(0, (-1));
      int int4 = MathUtils.lcm(0, 1689);
      int int5 = MathUtils.pow(936, 2674L);
      int int6 = MathUtils.addAndCheck(963, (-1));
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 2674L);
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(10.0, 10.0);
      double double1 = MathUtils.factorialDouble(0);
      float float0 = MathUtils.round((float) 0, 0);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = (-147);
      float float0 = MathUtils.round((-1.0F), (-147));
      short short0 = (short) (-2610);
      short short1 = MathUtils.indicator((short) (-2610));
      int int1 = MathUtils.mulAndCheck((int) (short) (-1), (int) (short) (-2610));
      float float1 = MathUtils.round((float) (-147), (int) (short) (-2610));
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString((int) (short) (-1));
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      byte[] byteArray0 = bigInteger0.toByteArray();
      try { 
        MathUtils.pow(bigInteger0, (long) (-147));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-147)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1825.72687);
      doubleArray0[3] = 3665.96620390346;
      doubleArray0[4] = 1246.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator(0L);
      float float0 = MathUtils.round(4062.2566F, 1710);
      short short0 = MathUtils.sign((short) (-1879));
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (int) (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 61);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)117;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(0);
      try { 
        MathUtils.pow(bigInteger0, (-2762));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (30,069^-2,762)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      int int0 = MathUtils.compareTo((-1405.89955), (-1405.89955), 0.0);
      double double1 = MathUtils.normalizeAngle(1816.5896198760383, 5267.0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      int int1 = MathUtils.subAndCheck(13, (-980));
      int int2 = MathUtils.pow((-1), 1L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-980);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 1816.5896198760383;
      doubleArray0[6] = (double) 13;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow(0L, (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte) (-36));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-4599.693152963349);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-4599.693152963349), 0.5, 280);
      long long0 = MathUtils.subAndCheck((long) 280, (long) 280);
      short short0 = MathUtils.sign((short)0);
      long long1 = MathUtils.addAndCheck((long) 280, (long) (short)0);
      short short1 = MathUtils.sign((short)0);
      long long2 = MathUtils.addAndCheck((long) (short)0, 0L);
      short short2 = MathUtils.sign((short) (-1266));
      long long3 = MathUtils.binomialCoefficient(369, (-3949));
      double double1 = MathUtils.sign((double) 280);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(369, 2081L);
      int[] intArray0 = new int[7];
      intArray0[0] = 280;
      intArray0[1] = (int) (short) (-1266);
      intArray0[2] = (-58867855);
      intArray0[3] = (int) (short) (-1266);
      intArray0[4] = (-3949);
      intArray0[5] = (int) (short) (-1);
      intArray0[6] = 350;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.round(1.0, 2322);
      int[] intArray0 = new int[11];
      intArray0[8] = 2322;
      intArray0[1] = 2322;
      intArray0[2] = 2322;
      intArray0[3] = 2322;
      double double1 = MathUtils.SAFE_MIN;
      double double2 = MathUtils.sign(2.2250738585072014E-308);
      int int0 = MathUtils.indicator(2322);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = 9223372036854775807L;
      long long1 = 120L;
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(9223372036854775807L, 120L);
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = 2685L;
      long long1 = MathUtils.sign(2685L);
      double double0 = (-3439.0686771754436);
      double double1 = MathUtils.round((-3439.0686771754436), 0, 0);
      int int1 = (-1427);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1427));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,427
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.cosh(0.0);
      int int2 = MathUtils.subAndCheck(0, 0);
      long long0 = MathUtils.pow(39916800L, (long) 0);
      int int3 = MathUtils.mulAndCheck(0, (-1));
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = (-725L);
      long long1 = MathUtils.indicator((-725L));
      double double0 = MathUtils.scalb(0.0, Integer.MIN_VALUE);
      double double1 = MathUtils.normalizeAngle(0.0, (-1169.14633032628));
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MIN_VALUE;
      intArray0[1] = Integer.MIN_VALUE;
      intArray0[2] = Integer.MIN_VALUE;
      intArray0[3] = 0;
      intArray0[4] = 453;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.pow(1, (long) 453);
      int int2 = MathUtils.indicator(1160);
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(Integer.MIN_VALUE, 1133);
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = MathUtils.lcm(9, 879);
      double double0 = MathUtils.nextAfter(2637, 879);
      double double1 = MathUtils.round(2636.9999999999995, 9);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = MathUtils.hash(2.2250738585072014E-308);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1048576;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = (double) 1048576;
      doubleArray0[3] = (double) 1048576;
      doubleArray0[4] = (double) 1048576;
      doubleArray0[5] = (double) 1048576;
      doubleArray0[6] = (double) 1048576;
      doubleArray0[7] = 2.2250738585072014E-308;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1048576, 1048576);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double double0 = MathUtils.scalb(0L, 66);
      float float0 = MathUtils.indicator((float) 66);
      long long1 = MathUtils.pow(0L, (long) 66);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = (-2202);
      double double1 = MathUtils.binomialCoefficientDouble(66, (-2202));
      // Undeclared exception!
      try { 
        MathUtils.factorial(66);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.sign(0.0);
      try { 
        MathUtils.normalizeArray(doubleArray0, 994.089102373703);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.sinh((-0.06901397310176083));
      float float0 = MathUtils.round(Float.NaN, 1184);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-0.06901397310176083);
      doubleArray0[2] = (double) Float.NaN;
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-871.8495999);
      doubleArray0[1] = 2283.014640044;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1.1102230246251565E-16;
      doubleArray0[4] = (-1760.099);
      doubleArray0[5] = 453.7;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-149.6077734));
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-329L), (-329L));
      float float0 = MathUtils.round((float) (-658L), (-2324));
      long long1 = MathUtils.addAndCheck(865L, (-4422L));
      byte byte0 = MathUtils.indicator((byte)0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-2324);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = 0.0;
      double double2 = MathUtils.nextAfter(0.0, (-1.0));
      int int0 = MathUtils.mulAndCheck(0, (int) (byte)1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2867), (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,867, k = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)116);
      double double0 = MathUtils.nextAfter((-4.9E-324), (-4.9E-324));
      long long0 = (-963L);
      try { 
        MathUtils.pow(0L, (-963L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-963)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
      int int0 = MathUtils.hash((double) (-1.0F));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 465.8045828247;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator((long) (-1074790400));
      long long1 = MathUtils.addAndCheck((long) (-1074790400), (-1L));
      float float1 = MathUtils.indicator((float) (-1074790401L));
      int int1 = MathUtils.hash(0.0);
      long long2 = MathUtils.binomialCoefficient(0, (-1));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float float0 = MathUtils.sign((-2983.4F));
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      int int1 = (-3695);
      try { 
        MathUtils.pow(2189L, (-3695));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,189^-3,695)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte byte0 = (byte)48;
      byte byte1 = MathUtils.indicator((byte)48);
      double double0 = MathUtils.log((byte)1, (byte)48);
      int int0 = (-232);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-232));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -232
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-41);
      try { 
        MathUtils.pow(0L, (-41));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-41)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = (-1178);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1178));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,178
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1838);
      int int0 = MathUtils.addAndCheck(0, (int) (short)1838);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientDouble((short)1838, (short)1);
      long long0 = MathUtils.pow(0L, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, (short)1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = (-1);
      int int1 = 4044;
      int int2 = MathUtils.subAndCheck((-1), 4044);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0.0F, (-1735.837199797366), (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-2223), 560);
      int int1 = MathUtils.sign((-1663));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1519.59194589);
      doubleArray0[1] = (double) 560;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.mulAndCheck((-3027), (-306));
      int int3 = MathUtils.addAndCheck(926262, 0);
      long long0 = MathUtils.addAndCheck((long) 926262, (-58L));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-12));
      double double0 = MathUtils.cosh((byte) (-1));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-12);
      doubleArray0[2] = (double) (byte) (-12);
      doubleArray0[3] = (double) (byte) (-12);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte byte1 = MathUtils.indicator((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = MathUtils.round(2221.9F, 0);
      float float1 = MathUtils.sign(2222.0F);
      byte byte0 = MathUtils.sign((byte) (-44));
      long long0 = MathUtils.addAndCheck(24L, 24L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.scalb(0.0, (byte) (-44));
      long long1 = MathUtils.sign((long) (byte) (-1));
      int int0 = MathUtils.hash((double) 24L);
      int int1 = MathUtils.mulAndCheck((int) (byte) (-1), (int) (byte) (-1));
      double double1 = MathUtils.round(0.0, 4194304);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(4680, 1077411840);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 4,680, k = 1,077,411,840
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2297.6377), (-445.38843641));
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      double double1 = MathUtils.nextAfter(1, 2.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(1, 4005);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 4,005
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.sinh((-608.0166815337084));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-608.0166815337084);
      doubleArray0[1] = (-5.718204718438784E263);
      doubleArray0[2] = (-5.718204718438784E263);
      doubleArray0[3] = (-5.718204718438784E263);
      doubleArray0[4] = (-608.0166815337084);
      doubleArray0[5] = (-5.718204718438784E263);
      double[] doubleArray1 = new double[4];
      double double1 = 0.0;
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-608.0166815337084);
      doubleArray1[2] = (-5.718204718438784E263);
      doubleArray1[3] = (-608.0166815337084);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1394.824145;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1377.09772815439);
      doubleArray1[3] = 1394.824145;
      doubleArray1[4] = 1394.824145;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1394.824145;
      doubleArray1[8] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      long long0 = MathUtils.addAndCheck(6227020800L, 0L);
      boolean boolean0 = MathUtils.equals(720.8, 0.0, 720.8);
      int int0 = MathUtils.mulAndCheck(0, 0);
      boolean boolean1 = MathUtils.equals((double) 0, 0.0);
      double double1 = MathUtils.nextAfter(0.0, 6227020800L);
      double double2 = MathUtils.sinh(0.0);
      long long1 = MathUtils.indicator(6227020800L);
      try { 
        MathUtils.pow(0, (-679L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-679)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1917.3);
      doubleArray0[2] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      short short0 = (short) (-151);
      short short1 = MathUtils.indicator((short) (-151));
      long long0 = MathUtils.sign((long) 0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-1917.3), 3647.9663393, (-2627));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2.0, 2.0, 2.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1358;
      intArray0[1] = 1;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.factorialLog(0);
      int int1 = MathUtils.sign(1);
      long long0 = MathUtils.binomialCoefficient(1, (-2591));
      int int2 = MathUtils.compareTo(0.0, (-1.0), 1L);
      long long1 = MathUtils.subAndCheck((long) 0, (-1768L));
      // Undeclared exception!
      try { 
        MathUtils.round(3088.65685975, (-342), 1358);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      double double0 = MathUtils.sign((double) Float.NaN);
      int int0 = MathUtils.gcd(6630, 6630);
      short short0 = MathUtils.indicator((short) (-1890));
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distance1(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = bigInteger0.isProbablePrime((short) (-1890));
      try { 
        MathUtils.pow(bigInteger0, (long) (short) (-1890));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1,890)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1.0, 1.0);
      float float0 = MathUtils.round((-3815.4263F), 2);
      int int0 = 0;
      double double1 = MathUtils.factorialLog(0);
      byte byte0 = MathUtils.indicator((byte) (-123));
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (double) (-3815.4263F), (int) (byte) (-123));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      short short0 = MathUtils.indicator((short)2322);
      double double0 = MathUtils.binomialCoefficientLog((short)1, 0);
      short short1 = MathUtils.indicator((short)1764);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)1;
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.round((double) (short)1, 0);
      short short2 = MathUtils.sign((short)2274);
      int int1 = MathUtils.hash((double) 0);
      int int2 = MathUtils.addAndCheck((-3360), 0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) (-3360), (int) (short)2322);
      byte byte0 = MathUtils.sign((byte)25);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short short0 = MathUtils.sign((short)61);
      int int0 = MathUtils.pow(0, (long) (short)61);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short1 = MathUtils.sign((short)61);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, (-3529));
      float float0 = MathUtils.round(2203.5598F, (-3529), 1);
      float float1 = MathUtils.sign(0.0F);
      byte byte0 = MathUtils.indicator((byte)118);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.factorialLog(5);
      int int0 = 2334;
      // Undeclared exception!
      try { 
        MathUtils.factorial(2334);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathUtils.cosh(2823.08);
      double double1 = MathUtils.log(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      float float0 = MathUtils.round(3147.4F, 9);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      short short0 = MathUtils.sign((short)15);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2012), 1303);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,012, k = 1,303
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = MathUtils.indicator((-492));
      float float0 = MathUtils.sign((-1.0F));
      int int1 = MathUtils.addAndCheck((-492), 2943);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 575.902105942;
      doubleArray0[1] = 909.3561;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.scalb(575.902105942, (-3097));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        MathUtils.pow((-2146679462), (long) (-2146679462));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,146,679,462^-2,146,679,462)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2700.633845, (-4538.15918586), 450.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 0);
      long long0 = MathUtils.subAndCheck(1510L, 0L);
      long long1 = MathUtils.addAndCheck(1510L, 0L);
      double double1 = MathUtils.factorialDouble(503);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 503;
      doubleArray0[1] = (double) 0L;
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.sign((float) 0L);
      float float1 = MathUtils.round(1270.2118F, 503);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      short short0 = (short)61;
      short short1 = MathUtils.sign((short)61);
      int int0 = MathUtils.lcm((short)61, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.add(bigInteger0);
      BigInteger[] bigIntegerArray0 = bigInteger1.divideAndRemainder(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.max(bigInteger1);
      boolean boolean0 = bigInteger0.testBit((short)61);
      BigInteger bigInteger4 = BigInteger.ONE;
      BigInteger bigInteger5 = bigInteger1.add(bigInteger4);
      byte byte0 = bigInteger1.byteValueExact();
      BigInteger bigInteger6 = bigInteger1.shiftRight((-816));
      int int1 = bigInteger0.intValueExact();
      BigInteger bigInteger7 = bigInteger1.divide(bigInteger0);
      BigInteger bigInteger8 = bigInteger1.negate();
      String string0 = bigInteger1.toString((int) (short)1);
      int int2 = bigInteger8.bitCount();
      BigInteger bigInteger9 = MathUtils.pow(bigInteger0, bigInteger1);
      int int3 = 0;
      int int4 = MathUtils.lcm((-816), 0);
      BigInteger bigInteger10 = MathUtils.pow(bigInteger8, bigInteger2);
      boolean boolean1 = MathUtils.equals(5066.384352735171, (-1158.6131189194084));
      int int5 = 0;
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.factorialDouble((short)61);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float float0 = MathUtils.round((-3447.2004F), 0, 0);
      int int0 = (-1114);
      int int1 = MathUtils.lcm((-1114), 0);
      float float1 = MathUtils.round((-3448.0F), 0, 0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0, (double) 0);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.subAndCheck((-3281L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 4194304, 2472);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,472, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 6;
      int int1 = 0;
      int int2 = MathUtils.gcd(6, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      int int3 = bigInteger0.intValue();
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      int int4 = bigInteger1.getLowestSetBit();
      double double0 = bigInteger1.doubleValue();
      BigInteger bigInteger2 = BigInteger.ONE;
      int int5 = bigInteger2.intValueExact();
      MockRandom mockRandom0 = new MockRandom(121645100408832000L);
      float float0 = mockRandom0.nextFloat();
      BigInteger bigInteger3 = BigInteger.probablePrime(6, mockRandom0);
      BigInteger bigInteger4 = bigInteger1.add(bigInteger2);
      long long0 = bigInteger1.longValue();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger1);
      long long1 = MathUtils.pow((long) 6, 1L);
      double double1 = MathUtils.factorialDouble(1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 406);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 406
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.lcm(2141, 0);
      int int1 = MathUtils.hash((-4403.75154));
      try { 
        MathUtils.pow(2141, (-1537353117));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,141^-1,537,353,117)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-598.6746125), (-598.6746125));
      byte byte0 = MathUtils.indicator((byte)1);
      int int0 = MathUtils.gcd(1127, 0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3669.4146763288);
      doubleArray0[2] = 116.50824039610082;
      doubleArray0[3] = (-331.97148131253);
      doubleArray0[4] = (-2306.47399);
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 116.50824039610082;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = MathUtils.pow(41L, 41L);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, (-970.9314));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.sign(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-431), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -431, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.0, 1.0, 1.0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.compareTo(730.7851, 730.7851, 730.7851);
      int int1 = MathUtils.lcm((-1), (-1));
      int int2 = MathUtils.addAndCheck((-1), 0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)23);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)23;
      intArray0[1] = (int) (byte)23;
      intArray0[2] = (int) (byte)23;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (int) (byte)23;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (int) (byte)1;
      intArray0[7] = 13;
      intArray0[8] = (int) (byte)23;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientLog(3, 3);
      double double2 = MathUtils.factorialDouble(3);
      short short0 = MathUtils.sign((short)0);
      double double3 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.mulAndCheck(3, 0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 3);
      int int1 = MathUtils.addAndCheck((-2361), 0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(618.57275F);
      short short0 = MathUtils.indicator((short)865);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      float float1 = bigInteger0.floatValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) (short)865);
      double double1 = MathUtils.indicator((double) 618.57275F);
      boolean boolean0 = MathUtils.equals(0.0, 1716.250049167812);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = (-4269.00097302637);
      double double1 = MathUtils.normalizeAngle((-4269.00097302637), (-4269.00097302637));
      int int0 = (-845);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-845));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -845
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1), 3400);
      short short0 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.round(1959.61839, (-1494), (-1494));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0, 0);
      double double0 = MathUtils.normalizeAngle(1251.869596, 0);
      double double1 = MathUtils.round(1.515719871262263, 0);
      double double2 = MathUtils.indicator((-1.0));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      double double3 = MathUtils.factorialDouble(587);
      double double4 = MathUtils.nextAfter(1.515719871262263, 1.515719871262263);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1665));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,665
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathUtils.log(6.283185307179586, 6.283185307179586);
      byte byte0 = MathUtils.sign((byte)87);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2474.0067391);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) 1, (-1514), 0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      short short0 = MathUtils.indicator((short)2015);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = MathUtils.sign((-2669.38291));
      int int0 = MathUtils.gcd(0, 1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = MathUtils.round(2708.004753761, 1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 2708.004753761;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(1.0);
      int int1 = 666;
      // Undeclared exception!
      try { 
        MathUtils.factorial(666);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      BigInteger[] bigIntegerArray0 = bigInteger1.divideAndRemainder(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.clearBit(0);
      boolean boolean0 = bigInteger1.isProbablePrime(0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger1, 6L);
      int int0 = MathUtils.sign(0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 52);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 52
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = MathUtils.indicator(3115L);
      double double0 = MathUtils.scalb(1L, 1724);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1724);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 1L);
      long long1 = MathUtils.subAndCheck(1L, 3115L);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = MathUtils.sign(16);
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 16;
      intArray0[4] = 1;
      intArray0[5] = 16;
      intArray0[6] = 16;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      long long0 = MathUtils.subAndCheck((long) 0, (long) 0);
      double double0 = MathUtils.sign((double) 0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 393;
      // Undeclared exception!
      try { 
        MathUtils.factorial(393);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2995.0;
      doubleArray0[2] = 1468.51077403;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1073.5695127492);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1498.6967169924);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.addAndCheck(1908, 315168707);
      long long0 = MathUtils.mulAndCheck((long) 315168707, (long) 315170615);
      double double0 = MathUtils.factorialLog(4608);
      float float0 = MathUtils.sign(3144.861F);
      long long1 = MathUtils.sign((long) 4608);
      long long2 = MathUtils.factorial(0);
      int[] intArray0 = new int[4];
      intArray0[0] = 315170615;
      intArray0[1] = 4608;
      intArray0[2] = 0;
      intArray0[3] = 1898;
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long3 = MathUtils.mulAndCheck((long) 4608, 0L);
      float float1 = MathUtils.round((float) 4608, 0);
      short short0 = MathUtils.sign((short)21);
      int int2 = MathUtils.compareTo(4608, 99331915213944805L, 0.0);
      double double2 = MathUtils.log(0.0, 1.0F);
      double double3 = MathUtils.log(1.0F, (-1498.6967169924));
      float float2 = MathUtils.sign(0.0F);
      double double4 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1102);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.sign((-512L));
      double double0 = MathUtils.binomialCoefficientLog(0, (-1102));
      Random.setNextRandom(4607);
      int int1 = MathUtils.gcd(0, (-1102));
      int int2 = 4602;
      double double1 = MathUtils.scalb(4607, 4602);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 9.651526739569616E155;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.scalb(1, 12);
      double double4 = MathUtils.sign((double) (-512L));
      int int3 = MathUtils.lcm(4607, 12);
      byte byte0 = MathUtils.indicator((byte)93);
      long long1 = MathUtils.subAndCheck((-1L), (long) 1);
      double double5 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1020);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-871.8495999);
      doubleArray0[1] = 2283.014640044;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1.1102230246251565E-16;
      doubleArray0[4] = 1.1102230246251565E-16;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-148.28111787338707));
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.binomialCoefficient(5, (-1));
      double double1 = MathUtils.factorialLog(0);
      long long1 = MathUtils.sign((long) 0);
      long long2 = MathUtils.mulAndCheck(0L, 1L);
      boolean boolean0 = MathUtils.equals(0.0, (-81.980709073298), 0.0);
      int int0 = MathUtils.indicator(19);
      long long3 = MathUtils.subAndCheck(49L, 1L);
      double double2 = MathUtils.factorialLog(0);
      double double3 = MathUtils.sinh(0.0);
      int int1 = MathUtils.addAndCheck(19, 1);
      int int2 = MathUtils.lcm(327, 1);
      long long4 = MathUtils.addAndCheck((long) 19, (long) 19);
      short short0 = MathUtils.indicator((short)1974);
      float float0 = MathUtils.sign((-1.0F));
      int[] intArray0 = new int[1];
      intArray0[0] = 20;
      int int3 = MathUtils.distance1(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte)0);
      double double4 = MathUtils.binomialCoefficientLog((short)1, 0);
      double[] doubleArray0 = new double[0];
      double double5 = MathUtils.distance(doubleArray0, doubleArray0);
      double double6 = MathUtils.factorialDouble(61);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(834.290526266, 834.290526266);
      int int0 = MathUtils.subAndCheck(0, 0);
      double double1 = MathUtils.scalb(0.0, 0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 834.290526266;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 834.290526266;
      double[] doubleArray1 = new double[22];
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 834.290526266;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray1);
      double double3 = MathUtils.nextAfter((-1343.02419), 0.0);
      double double4 = MathUtils.distance1(doubleArray0, doubleArray1);
      int int1 = MathUtils.gcd(0, 0);
      double double5 = MathUtils.factorialDouble(0);
      long long1 = MathUtils.addAndCheck((long) 0, (long) 0);
      int int2 = MathUtils.subAndCheck(0, 0);
      int int3 = MathUtils.mulAndCheck(0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 4503599627370495L);
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 5040L);
      int int4 = MathUtils.addAndCheck((-111), 4194304);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-2223), 560);
      int int1 = MathUtils.sign((-1663));
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 560;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.addAndCheck((-1663), 0);
      long long0 = MathUtils.addAndCheck((long) (-1663), (-43L));
      int int3 = MathUtils.addAndCheck((-1663), 21);
      int int4 = MathUtils.pow(0, 18);
      double double1 = MathUtils.binomialCoefficientLog(4602, (-1663));
      short short0 = MathUtils.indicator((short)20);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathUtils.indicator((-1.0));
      long long0 = MathUtils.sign((-768L));
      double double1 = MathUtils.sinh(1.0);
      double double2 = MathUtils.round((-1.0), 606);
      int int0 = MathUtils.hash((-1.0));
      long long1 = MathUtils.addAndCheck((-1665L), (long) 606);
      float float0 = MathUtils.round((float) (-1059L), 6366);
      long long2 = MathUtils.factorial(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-708,542,578,767,549,168,385^-708,542,578,767,549,168,385)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = MathUtils.pow(1070, 1070);
      byte byte0 = MathUtils.indicator((byte)0);
      float float0 = MathUtils.sign(Float.NaN);
      boolean boolean0 = MathUtils.equals((-4.9E-324), (double) Float.NaN, 1070);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.indicator(0.0);
      double double2 = MathUtils.round(0.0, (int) (byte)1, 0);
      int int1 = MathUtils.compareTo((-3765.159576354), (-4.9E-324), 2189.02);
      int int2 = MathUtils.mulAndCheck((int) (byte)0, 0);
      long long0 = MathUtils.pow((long) 0, 0L);
      int int3 = MathUtils.pow(67, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4.9E-324);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (-3765.159576354);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = 0;
      int int1 = (-2012);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 0, (-2012));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,012, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
