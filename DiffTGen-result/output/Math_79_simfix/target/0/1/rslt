* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math.util.MathUtils
* Starting client
* Connecting to master process on port 15213
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/Math_79_simfix/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.util.MathUtils
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 420
  - Branch 364
  - Exception 0
  - MutationFactory 829
  - Output 179
  - Method 57
  - MethodNoException 57
  - CBranchFitnessFactory 364
* Using seed 1585833885020
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:===>                          10%] [Cov:>                                  2%][Progress:===>                          10%] [Cov:=>                                 3%][Progress:===>                          10%] [Cov:=====>                             16%][Progress:===>                          10%] [Cov:=====>                             17%][Progress:===>                          10%] [Cov:=======>                           20%][Progress:===>                          10%] [Cov:=======>                           22%][Progress:===>                          13%] [Cov:>                                  2%][Progress:===>                          13%] [Cov:=>                                 3%][Progress:===>                          13%] [Cov:=====>                             16%][Progress:===>                          13%] [Cov:=====>                             17%][Progress:===>                          13%] [Cov:======>                            18%][Progress:===>                          13%] [Cov:=======>                           22%][Progress:===>                          13%] [Cov:========>                          25%][Progress:====>                         15%] [Cov:=>                                 4%][Progress:====>                         15%] [Cov:==>                                7%][Progress:====>                         15%] [Cov:=======>                           20%][Progress:====>                         15%] [Cov:========>                          23%][Progress:====>                         15%] [Cov:========>                          25%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:======>                            19%][Progress:=========>                    31%] [Cov:=======>                           20%][Progress:==========>                   35%] [Cov:========>                          24%][Progress:==========>                   35%] [Cov:=========>                         28%][Progress:==========>                   36%] [Cov:>                                  2%][Progress:===========>                  38%] [Cov:=>                                 4%][Progress:===========>                  38%] [Cov:=====>                             17%][Progress:=============>                46%] [Cov:======>                            18%][Progress:===============>              50%] [Cov:======>                            18%][Progress:=========================>    86%] [Cov:=======>                           21%][Progress:===========================>  91%] [Cov:=======>                           22%][Progress:=============================>98%] [Cov:=>                                 3%][Progress:==============================100%] [Cov:==>                                6%][Progress:==============================100%] [Cov:======>                            18%][Progress:==============================100%] [Cov:=======>                           21%][Progress:==============================100%] [Cov:=======>                           22%][Progress:==============================100%] [Cov:=========>                         26%][Progress:==============================100%] [Cov:==========>                        30%][Progress:==============================100%] [Cov:==========>                        31%][Progress:==============================100%] [Cov:=============>                     38%][Progress:==============================100%] [Cov:=====================>             61%]
* Search finished after 100s and 0 generations, 466 statements, best individual has fitness: 1898.9987892068962
[MASTER] 21:27:38.327 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 23 seconds more than allowed.
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 62%
* Total number of goals: 420
* Number of covered goals: 262
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 54%
* Total number of goals: 364
* Number of covered goals: 197
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 48%
* Total number of goals: 829
* Number of covered goals: 396
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 41%
* Total number of goals: 179
* Number of covered goals: 74
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 95%
* Total number of goals: 57
* Number of covered goals: 54
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 86%
* Total number of goals: 57
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 46%
* Total number of goals: 364
* Number of covered goals: 166
* Generated 105 tests with total length 140
* Resulting test suite's coverage: 62% (average coverage for all fitness functions)
* Compiling and checking tests
* Writing JUnit test case 'MathUtils_ESTest' to evosuite-tests
* Done!

* Computation finished
