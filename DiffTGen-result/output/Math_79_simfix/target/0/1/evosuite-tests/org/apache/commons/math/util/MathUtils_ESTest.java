/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 02 13:28:27 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)1;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1689);
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)1;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = MathUtils.sinh(1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 479001600L, (double) 152322508800L, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(10, (-1344));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) (-1319), (long) (-1319));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.scalb((-1.0), 2338);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-22);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1692), (-1692));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (int) (short) (-2514);
      int[] intArray1 = new int[7];
      double double0 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(4, 4);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        MathUtils.pow(bigInteger0, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(2, (-1622));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float float0 = MathUtils.indicator((float) 0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double) (-948L), (double) (byte)0, (double) (-1L));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2088.014482381), 0.0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-2924L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-2,924)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 120L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        MathUtils.pow((BigInteger) null, (-1796));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,796)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = MathUtils.pow((long) 0, 0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        MathUtils.pow((-1776), (-1623L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,776^-1,623)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = MathUtils.pow(52, 3);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(52, 0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short short0 = MathUtils.sign((short)5);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = MathUtils.sign((-1882L));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.sign(879);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.sign((-391));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = MathUtils.sign(2045.9565F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = MathUtils.sign((float) (-1622));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.sign((-578.2789705));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)7);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3897.4);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-3897.4));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        MathUtils.normalizeArray(doubleArray0, (-3897.4));
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = MathUtils.scalb(1.0F, 1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, (-1319));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathUtils.nextAfter((byte) (-1), (-312.5838111056666));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = MathUtils.nextAfter((-3244), (-1.0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) 1, 0L);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(479001600L, 318L);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.lcm((-1381), 0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short short0 = MathUtils.indicator((short)694);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-481));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.indicator(503L);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.indicator((-948L));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = MathUtils.indicator((-434));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathUtils.indicator(1.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)7);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-93));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = MathUtils.lcm(3, 3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.lcm((-1), (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.gcd((-2461), 0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 10);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.factorialLog(388);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2461));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,461
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(3);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(93);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-819));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -819
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals((-87.58361119848), 0.0, (-967));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double) 2862864, 1.0, (double) 2862864);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = Double.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, (-1596.14706163));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = MathUtils.compareTo((short)1, (-3897.4), 1514.1028869772945);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((byte) (-93), (byte) (-93));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -93
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(5, 645);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 5, k = 645
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(11, 1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(3, 3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) 2, (long) (byte)7);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1047), 13);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathUtils.log(490.594, (-2404.243301191991));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathUtils.cosh(0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float float0 = MathUtils.round(4129.0786F, (-1319));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1.0), 4120.7904);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(771L, 1L);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-3346), (-1), 8);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 8, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = MathUtils.hash(doubleArray0);
  }
}
