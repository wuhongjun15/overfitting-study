/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 02 13:37:38 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = MathUtils.sign(2026);
      float float1 = MathUtils.indicator((float) 1);
      float float2 = MathUtils.sign(0.0F);
      double double0 = MathUtils.sign((double) 0.0F);
      double double1 = MathUtils.nextAfter((-1315.484), (-45.09019002526));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (-1315.484);
      doubleArray0[3] = (double) 2026;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (-1315.484);
      doubleArray0[6] = (double) 2026;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.lcm((-905), 1);
      long long0 = MathUtils.pow((long) 2026, (long) 2026);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-629.49478);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-602.460368908438);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1891.963;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.mulAndCheck(0, 0);
      long long0 = MathUtils.subAndCheck((long) 0, 174L);
      long long1 = MathUtils.mulAndCheck(668L, (long) 0);
      int int1 = MathUtils.sign(1711);
      int[] intArray0 = new int[2];
      intArray0[0] = 1711;
      intArray0[1] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(964, (-2953));
      int int0 = MathUtils.pow((-2953), 964);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 238132641;
      doubleArray0[1] = (double) (-2953);
      doubleArray0[2] = (double) 238132641;
      doubleArray0[3] = (double) 964;
      doubleArray0[4] = (double) 238132641;
      doubleArray0[5] = (double) 964;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.indicator(560.8);
      int int1 = MathUtils.pow((-1513), 2136692272);
      double double3 = MathUtils.indicator(560.8);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2953);
      intArray0[1] = (-1513);
      intArray0[2] = 964;
      intArray0[3] = 238132641;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double4 = MathUtils.round(440.2664494, 0, 0);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck(49L, (long) (-1513));
      short short0 = MathUtils.indicator((short) (-1));
      int int4 = MathUtils.distance1(intArray0, intArray0);
      double double5 = MathUtils.cosh(1510.2471478114342);
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      int int5 = MathUtils.distanceInf(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = MathUtils.lcm(4680, 4680);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(doubleArray0);
      boolean boolean1 = MathUtils.equals((double) 1, (double) 1, (-4.9E-324));
      double double0 = MathUtils.binomialCoefficientLog(3013, 7);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1), (-1));
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.scalb(0, (-1));
      double double1 = MathUtils.binomialCoefficientDouble(2687, 0);
      int int2 = 1073741824;
      // Undeclared exception!
      try { 
        MathUtils.equals((-2626.9419734710673), 1.0, 1073741824);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.sign(4864);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 4864;
      doubleArray0[1] = (double) 4864;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.sign((long) 1);
      boolean boolean0 = MathUtils.equals(Double.NEGATIVE_INFINITY, 0.0);
      double double1 = MathUtils.factorialLog(1626);
      double double2 = MathUtils.factorialDouble(2621);
      double double3 = MathUtils.binomialCoefficientDouble(3, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.mulAndCheck((long) 4864, (-1488L));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.lcm((-3841), 1393);
      long long0 = MathUtils.sign(3146L);
      long long1 = MathUtils.binomialCoefficient(1393, (-3841));
      int[] intArray0 = new int[9];
      intArray0[0] = 5350513;
      intArray0[1] = 1393;
      intArray0[2] = (-3841);
      intArray0[3] = (-3841);
      intArray0[4] = 1393;
      intArray0[5] = (-3841);
      intArray0[6] = 5350513;
      intArray0[7] = (-3841);
      intArray0[8] = 1393;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float float0 = MathUtils.round((-867.168F), 406);
      int int0 = MathUtils.gcd(16, 0);
      int int1 = MathUtils.pow(16, (long) 406);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = MathUtils.gcd(0, 529);
      double double0 = MathUtils.normalizeAngle(0.0, 406);
      float float1 = MathUtils.indicator(Float.NaN);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-2804), Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = MathUtils.factorialLog(3964);
      int int0 = 1954;
      double double1 = MathUtils.binomialCoefficientDouble(3964, 1954);
      double double2 = MathUtils.log(3964, 28882.83672556682);
      double double3 = MathUtils.binomialCoefficientLog(1954, 1954);
      // Undeclared exception!
      try { 
        MathUtils.round((-0.27562525957984674), 1954, 3964);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = MathUtils.sinh((-1.0));
      boolean boolean0 = MathUtils.equals((-1.1752011936438014), 0.0);
      double[] doubleArray0 = null;
      int int0 = MathUtils.hash((double[]) null);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-1.0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, doubleArray1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 14;
      int int1 = (-357);
      double double0 = MathUtils.binomialCoefficientDouble(14, (-357));
      try { 
        MathUtils.pow((long) 14, (-357));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (14^-357)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = (-591);
      int int1 = MathUtils.indicator((-591));
      int int2 = 1836;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1836);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 3711;
      boolean boolean0 = MathUtils.equals((-3148.976613), 0.0, 3711);
      int int1 = 1033;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(1033, 3711);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1,033, k = 3,711
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      int[] intArray0 = new int[8];
      intArray0[0] = 20;
      intArray0[1] = 0;
      intArray0[2] = 1349;
      intArray0[3] = (-1958);
      intArray0[4] = 0;
      intArray0[5] = 3;
      intArray0[6] = 1031;
      intArray0[7] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      int[] intArray1 = new int[4];
      intArray1[0] = 1031;
      intArray1[1] = 20;
      intArray1[2] = 0;
      intArray1[3] = 0;
      double double2 = MathUtils.distance(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = MathUtils.gcd(0, (-1597));
      double double0 = MathUtils.scalb((-1615.561475311), 709);
      boolean boolean0 = MathUtils.equals(Double.NaN, (-4.351013333730226E216), 0.0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.indicator(0L);
      long long2 = MathUtils.mulAndCheck(2292L, 1473L);
      float float0 = 0.0F;
      float float1 = MathUtils.round(0.0F, 19);
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.round(299.657, Integer.MIN_VALUE, 0);
      } catch(ArithmeticException e) {
         //
         // Underflow
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.sign(4);
      float float0 = MathUtils.round((float) 4, 1);
      double double0 = MathUtils.scalb(0.0, 0);
      double double1 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equals(0.0, 440.2664494, (-4288.97716));
      int int1 = MathUtils.sign(1);
      double double2 = MathUtils.cosh(4.0F);
      double double3 = MathUtils.cosh((-1.0));
      double double4 = MathUtils.binomialCoefficientLog(1, (-730));
      long long0 = MathUtils.indicator((long) 1);
      int int2 = MathUtils.gcd(1, 1);
      double double5 = MathUtils.indicator((-1.0));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.5430806348152437;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (-1.0);
      double double6 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(0.0F);
      double double2 = MathUtils.cosh((-867.9092));
      int int1 = (-1055);
      int int2 = (-1);
      int int3 = MathUtils.gcd((-1055), (-1));
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double4 = 3.141592653589793;
      double double5 = MathUtils.nextAfter(3.141592653589793, (-1.0));
      double double6 = MathUtils.sign(0.0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2820));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,820
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-994.5734);
      doubleArray0[1] = (-949.0);
      doubleArray0[2] = (-2447.058935535306);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (-689.577812476);
      try { 
        MathUtils.normalizeArray(doubleArray0, 3150.855);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 4
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 954.0118500511924);
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.pow(0L, 0L);
      int int0 = MathUtils.addAndCheck((-1), (int) (byte)0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (-112.88);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1L);
      double double2 = MathUtils.distance(doubleArray1, doubleArray0);
      double double3 = MathUtils.factorialDouble((byte)0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = MathUtils.sign(1L);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.round(324.473495511, 0);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(1555);
      BigInteger bigInteger2 = bigInteger1.nextProbablePrime();
      BigInteger bigInteger3 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger4 = BigInteger.probablePrime(1555, mockRandom0);
      BigInteger bigInteger5 = bigInteger3.and(bigInteger1);
      BigInteger bigInteger6 = bigInteger0.modInverse(bigInteger3);
      String string0 = bigInteger1.toString(1555);
      BigInteger bigInteger7 = bigInteger1.subtract(bigInteger2);
      int int0 = bigInteger0.bitLength();
      BigInteger bigInteger8 = bigInteger0.modInverse(bigInteger1);
      int int1 = bigInteger1.signum();
      int int2 = bigInteger0.bitCount();
      BigInteger bigInteger9 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger10 = MathUtils.pow(bigInteger0, 0L);
      String string1 = bigInteger10.toString(1);
      int int3 = bigInteger10.intValue();
      int int4 = bigInteger0.bitLength();
      BigInteger bigInteger11 = MathUtils.pow(bigInteger10, 751);
      BigInteger bigInteger12 = bigInteger0.remainder(bigInteger10);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 751;
      doubleArray1[1] = (double) 751;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 0L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-587.28260932), (-587.28260932), (-587.28260932));
      float float0 = MathUtils.round((-1416.9407F), 0, 0);
      double double0 = MathUtils.round(2581.079914, 0, 0);
      double double1 = MathUtils.scalb((-1417.0F), 0);
      float float1 = MathUtils.round((-1398.84F), 0);
      int int0 = MathUtils.lcm(0, 581);
      double double2 = MathUtils.binomialCoefficientDouble(0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.shiftLeft(0);
      try { 
        MathUtils.pow(bigInteger0, (-177L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-177)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1.0), (-503.325));
      int int0 = MathUtils.pow(515, (long) 515);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)2471);
      boolean boolean0 = MathUtils.equals((-1.0), 0.0);
      double double2 = 0.0;
      boolean boolean1 = MathUtils.equals(0.0, (-503.325), 515);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.sign((long) (short)1);
      double double4 = MathUtils.normalizeAngle((short)2471, 1265.95);
      double double5 = MathUtils.distance(doubleArray0, doubleArray0);
      double double6 = MathUtils.indicator((double) (short)2471);
      short short1 = MathUtils.indicator((short)0);
      int int1 = MathUtils.hash(1.0);
      byte byte0 = MathUtils.sign((byte)0);
      long long1 = MathUtils.mulAndCheck((long) 1072693248, (-838L));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 1177);
      int int0 = MathUtils.compareTo(Float.NaN, Float.NaN, 0.0F);
      float float1 = MathUtils.round((-3239.58F), 1177);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 1177, 1177);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1416.940673828125;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1174.91071609893;
      doubleArray0[3] = (-294.66138);
      doubleArray0[4] = (-101.2567);
      doubleArray0[5] = 2681.1004417626;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-3652.439985824));
      int[] intArray0 = new int[6];
      intArray0[0] = (-5540);
      intArray0[1] = (-138);
      intArray0[2] = (-2160);
      intArray0[3] = 2167;
      intArray0[4] = 7;
      intArray0[5] = 0;
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = (-138);
      intArray1[2] = 0;
      intArray1[3] = (-2160);
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(771, (-1));
      double double0 = MathUtils.scalb(771, 770);
      double double1 = MathUtils.sign(0.0);
      double double2 = MathUtils.indicator(0.0);
      int[] intArray0 = new int[0];
      double double3 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.addAndCheck(3885L, 1204L);
      long long1 = MathUtils.mulAndCheck(0L, (-112L));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      double double1 = MathUtils.sign(0.0);
      double double2 = MathUtils.scalb((-590.89854508436), 0);
      double double3 = MathUtils.sign(2445.462931);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.indicator(1.0F);
      int int0 = MathUtils.indicator(0);
      int int1 = MathUtils.indicator((-1848));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.indicator(326L);
      int int0 = MathUtils.hash(231.212182);
      float float0 = MathUtils.indicator((float) 1904951123);
      long long1 = MathUtils.pow((long) 1904951123, 1L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 231.212182;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 231.212182;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 231.212182);
      // Undeclared exception!
      MathUtils.factorialLog(1904951123);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      int int1 = MathUtils.compareTo(1, 0, 1);
      int int2 = MathUtils.indicator(0);
      long long1 = MathUtils.subAndCheck(5040L, 5040L);
      int int3 = 4194304;
      double double0 = MathUtils.binomialCoefficientLog(4194304, 0);
      int int4 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 0, (-384));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -384, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)18);
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)18;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.sinh(0.0);
      boolean boolean0 = MathUtils.equals((-157.023480055945), 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 2759.6925649689747);
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-301));
      int int0 = MathUtils.lcm((short) (-1), (short) (-1));
      byte byte0 = MathUtils.indicator((byte) (-98));
      float float0 = MathUtils.indicator((float) (byte) (-1));
      double double0 = MathUtils.indicator((double) 1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = MathUtils.gcd(3107, 0);
      int int1 = 0;
      int int2 = MathUtils.gcd(0, 3107);
      double double0 = MathUtils.nextAfter(0.0, (-239.03014197));
      int int3 = MathUtils.subAndCheck(14, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      float float0 = MathUtils.round((-154.5F), 2952, 7);
      int int4 = MathUtils.subAndCheck((int) (byte)1, 14);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathUtils.SAFE_MIN;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1.1102230246251565E-16);
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, 1.1102230246251565E-16);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-383));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -383
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2704L), (-2704L));
      int int0 = MathUtils.sign(0);
      double double0 = MathUtils.round((double) 0, 0);
      double double1 = MathUtils.round((double) 0, 0, 0);
      double double2 = MathUtils.cosh((-1317.49));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = MathUtils.pow((-654), 1L);
      int int1 = MathUtils.pow((-654), 0);
      double double0 = MathUtils.sinh(0);
      int int2 = MathUtils.compareTo(1, (-2849.340478852602), (-4073.30806));
      int int3 = MathUtils.addAndCheck(14, 1);
      long long0 = MathUtils.subAndCheck((long) 15, 1L);
      long long1 = MathUtils.pow((long) 0, 790L);
      boolean boolean0 = MathUtils.equals(1148.22, 0.0, (double) 0L);
      int[] intArray0 = new int[0];
      int int4 = MathUtils.distance1(intArray0, intArray0);
      short short0 = MathUtils.sign((short)0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long2 = MathUtils.pow(36L, (long) 14);
      double double2 = MathUtils.factorialDouble((short)0);
      int int5 = MathUtils.hash(1.0);
      int int6 = MathUtils.gcd(0, (-649));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 14);
      double double3 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = MathUtils.pow(bigInteger2, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      long long0 = bigInteger1.longValue();
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = BigInteger.valueOf(0L);
      long long1 = bigInteger0.longValue();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 1992);
      short short0 = MathUtils.indicator((short)0);
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.pow((int) (short)0, (long) 1992);
      long long2 = MathUtils.indicator(10L);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (-404);
      intArray0[5] = 1992;
      intArray0[6] = (int) (short)1;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = (int) (short)1;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = (-3755);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-3755));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,755
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.cosh(1253.0);
      float float0 = MathUtils.sign(Float.NaN);
      short short0 = MathUtils.sign((short)3790);
      float float1 = MathUtils.indicator(0.0F);
      long long0 = MathUtils.mulAndCheck((long) (short)3790, (long) (short)1);
      short short1 = (short)4484;
      short short2 = MathUtils.sign((short)4484);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3790L;
      doubleArray0[1] = (double) 3790L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) (short)3790;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2149.85586);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0.0F, (double) (short)3790, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 1177);
      int int0 = MathUtils.compareTo(Float.NaN, Float.NaN, 0.0F);
      float float1 = MathUtils.round((-3239.58F), 0);
      int int1 = MathUtils.hash((-1.0));
      boolean boolean0 = MathUtils.equals((double) (-3239.58F), (-1.0), (double) (-1074790400));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1372.02);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 11;
      int int1 = MathUtils.lcm(11, 11);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = MathUtils.compareTo(1L, 0L, 0L);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.sinh(0);
      double double1 = MathUtils.sinh(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 68.9;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = MathUtils.addAndCheck(0, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 544;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 544;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(8, 8);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ZERO;
      int int0 = bigInteger3.intValueExact();
      BigInteger bigInteger4 = bigInteger0.xor(bigInteger3);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, (int) (byte)107);
      double double1 = MathUtils.scalb(0.0, 14);
      double double2 = MathUtils.log(0.0, 0.0);
      float float0 = MathUtils.round(0.0F, 1878);
      double double3 = MathUtils.normalizeAngle(Float.NaN, 174.3266219887093);
      short short0 = MathUtils.indicator((short)31);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = (double) (short)31;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 174.3266219887093;
      doubleArray0[4] = (double) 14;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0;
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double5 = MathUtils.sign((-739.25878));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 418;
      intArray0[1] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.indicator((-780L));
      double double0 = MathUtils.binomialCoefficientDouble(418, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 418;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long2 = MathUtils.factorial(1);
      long long3 = MathUtils.subAndCheck((-1298L), (long) 1);
      boolean boolean0 = MathUtils.equals(796.8442658433, (double) 418, 1469.8);
      short short0 = MathUtils.sign((short)0);
      float float0 = MathUtils.round((float) 1L, (-236));
      long long4 = MathUtils.sign((long) 0);
      int int1 = MathUtils.lcm(2, (-699));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      int int0 = 137;
      double double0 = MathUtils.round(0.0, 137);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 1.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      double double1 = MathUtils.log(0.0, 8.94659);
      double double2 = MathUtils.sign(0.0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[0];
      double double3 = MathUtils.SAFE_MIN;
      int int0 = MathUtils.pow(0, (long) 0);
      int int1 = MathUtils.gcd(2, 1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 1177);
      int int0 = MathUtils.compareTo(Float.NaN, Float.NaN, 0.0F);
      float float1 = MathUtils.round((-3239.58F), 0);
      int int1 = MathUtils.hash((double) (-3239.58F));
      boolean boolean0 = MathUtils.equals((double) (-3239.58F), (double) 1177, (double) (-1062645975));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1372.02);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(0.0);
      int int1 = MathUtils.pow(0, 0);
      double double1 = MathUtils.binomialCoefficientDouble(2605, 0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray1);
      long long0 = MathUtils.subAndCheck((-1396L), 1451L);
      int int3 = MathUtils.addAndCheck(20, 1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathUtils.scalb(1303.0, 10);
      double double1 = MathUtils.log(1656.213283, 1334272.0);
      double double2 = (-1.0);
      double double3 = MathUtils.scalb((-1.0), 0);
      double double4 = MathUtils.indicator(1334272.0);
      short short0 = MathUtils.sign((short) (-1));
      double double5 = MathUtils.indicator((double) 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (-1.0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.902772025348021;
      doubleArray1[1] = (double) 10;
      doubleArray1[2] = (double) (short) (-1);
      doubleArray1[3] = 1.0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(2383, 2383);
      double double0 = MathUtils.nextAfter(4766, 4766);
      long long0 = MathUtils.indicator(2334L);
      double double1 = MathUtils.log(2334L, 1L);
      int int1 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 975L);
      double double0 = MathUtils.scalb(975L, 3244);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)90;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-73,584,476,070^-73,584,476,070)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-897);
      int int1 = 4645;
      int int2 = MathUtils.mulAndCheck((-897), 4645);
      long long0 = MathUtils.binomialCoefficient(4645, 1);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1, (-1259), 4645);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = MathUtils.gcd(66, 66);
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 66;
      doubleArray0[1] = (double) 66;
      doubleArray0[2] = (double) 66;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 66;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (-2405.338);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      long long0 = MathUtils.pow(0L, (long) 0);
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-3030L), 1290L);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      double double0 = MathUtils.indicator((double) (-3030L));
      int int0 = MathUtils.gcd(0, 0);
      double double1 = MathUtils.round((double) 1290L, 0);
      int int1 = 5171;
      int int2 = MathUtils.lcm(0, 5171);
      int int3 = 0;
      long long2 = MathUtils.binomialCoefficient(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = MathUtils.sign(20922789888000L);
      double double0 = MathUtils.round((-3102.2), 0);
      int int0 = MathUtils.addAndCheck(0, 0);
      int int1 = MathUtils.subAndCheck((-123), 0);
      int int2 = MathUtils.sign((-123));
      short short0 = MathUtils.sign((short)0);
      int int3 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-3118L), (-3118L));
      int int0 = MathUtils.sign(2095);
      float float0 = MathUtils.indicator((float) 1);
      int int1 = MathUtils.addAndCheck(1, 0);
      double double0 = MathUtils.round(0.0, 0);
      long long1 = MathUtils.indicator(1324L);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = MathUtils.round((-867.168F), 406);
      int int0 = MathUtils.gcd(16, 0);
      int int1 = MathUtils.pow(16, (long) 406);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = MathUtils.gcd(0, 529);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 31);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 31
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo(1222.560513887, 1222.560513887, 0L);
      int int1 = MathUtils.gcd(0, 0);
      double double1 = MathUtils.indicator((-3081.0));
      int int2 = MathUtils.addAndCheck(0, 0);
      double double2 = MathUtils.sign((-1.0));
      double double3 = MathUtils.nextAfter(0, 0);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      double double4 = MathUtils.scalb(0.0, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1472));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,472
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      float float0 = MathUtils.sign((float) 0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      long long1 = MathUtils.sign((-2198L));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1680));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,680
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = MathUtils.sign(1.0);
      int int0 = MathUtils.sign(3081);
      double double1 = MathUtils.log(3081, 1.0);
      double double2 = (-1652.06450978076);
      double double3 = MathUtils.sinh((-1652.06450978076));
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.round(1788.165F, 1, (-115));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -115, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1.0), (-1.0), 0.0);
      int int0 = MathUtils.mulAndCheck(5, (-3553));
      short short0 = MathUtils.indicator((short)3688);
      int int1 = MathUtils.hash(1037.9458969);
      int int2 = MathUtils.addAndCheck((-17765), (-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (-17766);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = MathUtils.subAndCheck(20, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 20;
      intArray0[1] = (-1596);
      intArray0[2] = 20;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.indicator(1092L);
      long long1 = MathUtils.factorial(0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = (-3620);
      int int1 = MathUtils.mulAndCheck((-3620), (-3620));
      // Undeclared exception!
      try { 
        MathUtils.round((float) 13104400, 13104400, (-85));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -85, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.cosh(909.626936516);
      double double1 = MathUtils.sinh(Double.POSITIVE_INFINITY);
      float float0 = MathUtils.sign((-1069.81F));
      double double2 = MathUtils.cosh((-1069.81F));
      double double3 = MathUtils.factorialLog(984);
      double double4 = MathUtils.cosh(0.0);
      int int0 = MathUtils.addAndCheck(356, 2315);
      float float1 = MathUtils.sign((-1069.81F));
      int[] intArray0 = new int[9];
      intArray0[0] = 984;
      intArray0[1] = 0;
      intArray0[2] = 356;
      intArray0[3] = 2315;
      intArray0[4] = 356;
      intArray0[5] = 19;
      intArray0[6] = 984;
      intArray0[7] = 356;
      intArray0[8] = 2671;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double5 = MathUtils.normalizeAngle(1881.529064536, 0.0);
      double double6 = MathUtils.sinh(1116.684);
      double double7 = MathUtils.binomialCoefficientLog(984, 356);
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(Double.NaN, Double.NaN);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathUtils.log((-3288.4455116457), (-3288.4455116457));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-3288.4455116457);
      doubleArray0[2] = (-3288.4455116457);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = MathUtils.sign(54L);
      int int0 = MathUtils.addAndCheck((-1396), 0);
      long long1 = MathUtils.pow(2210L, 1L);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      BigInteger bigInteger2 = bigInteger1.gcd(bigInteger0);
      BigInteger bigInteger3 = bigInteger2.andNot(bigInteger1);
      int int0 = 1747;
      BigInteger bigInteger4 = bigInteger1.or(bigInteger2);
      short short0 = bigInteger1.shortValueExact();
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 675, 1747);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,747, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = (-167);
      int int1 = MathUtils.sign((-167));
      short short0 = MathUtils.sign((short)0);
      int int2 = MathUtils.sign(0);
      double double0 = MathUtils.indicator(3.141592653589793);
      long long0 = MathUtils.sign((long) (short)0);
      int int3 = 0;
      double double1 = MathUtils.round(1703.17676, 0);
      short short1 = MathUtils.sign((short)0);
      long long1 = MathUtils.pow((long) (short)0, (int) (short)0);
      long long2 = 5040L;
      long long3 = MathUtils.mulAndCheck((-2593L), 5040L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      long long0 = MathUtils.sign((-1459L));
      double double0 = MathUtils.round((double) 1, 163);
      double double1 = MathUtils.cosh((-315.42954584501));
      double double2 = MathUtils.log(0, (-1L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1459L);
      doubleArray0[1] = 1.0;
      int int1 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1564), 9);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,564, k = 9
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float float0 = 843.1605F;
      int int0 = (-1);
      float float1 = MathUtils.round(843.1605F, (-1), 1);
      int int1 = (-1);
      try { 
        MathUtils.pow((long) 1, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      long long0 = MathUtils.sign(2107L);
      long long1 = MathUtils.subAndCheck((long) 0, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long2 = MathUtils.pow((-1196L), 3899L);
      double double1 = MathUtils.factorialLog(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      double double2 = MathUtils.nextAfter((-984.0418659595412), 0.0);
      BigInteger bigInteger2 = bigInteger1.mod(bigInteger0);
      double double3 = MathUtils.nextAfter(1.0, 0.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger1, bigInteger1);
      long long3 = MathUtils.sign(479001600L);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 1;
      int int1 = MathUtils.sign(1);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      int int3 = (-94);
      try { 
        MathUtils.pow((-94), (-94));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-94^-94)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      long long0 = (-919L);
      try { 
        MathUtils.pow(bigInteger0, (-919L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-919)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 820;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(344, 820);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 344, k = 820
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 4209;
      int int1 = (-652);
      try { 
        MathUtils.pow(4209, (-652));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,209^-652)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 4.9E-324);
      int int0 = MathUtils.hash(4.9E-324);
      double double1 = MathUtils.nextAfter(1, (-501.19604406504));
      short short0 = MathUtils.sign((short) (-952));
      try { 
        MathUtils.pow((-1L), (int) (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1, 1);
      double double1 = MathUtils.factorialDouble(1853);
      int int0 = MathUtils.hash((-351.277578));
      float float0 = MathUtils.sign((-1192.4052F));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-351.277578);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.normalizeAngle((-351.277578), 1.0);
      double double4 = MathUtils.factorialLog(0);
      double double5 = MathUtils.log((-351.277578), (-1.0));
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      long long1 = MathUtils.subAndCheck((long) 1853, 0L);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-626L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-626)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathUtils.nextAfter(0.0, 0.0);
      byte byte0 = MathUtils.indicator((byte)0);
      int int0 = MathUtils.pow(1, 375L);
      double double1 = MathUtils.factorialDouble(1);
      byte byte1 = MathUtils.sign((byte) (-97));
      int int1 = MathUtils.addAndCheck(1, 2480);
      boolean boolean0 = MathUtils.equals(799.0127, (double) (byte) (-97), (double) (byte)1);
      long long0 = MathUtils.subAndCheck((long) 1, 0L);
      boolean boolean1 = MathUtils.equals((double) (byte)1, 265.1598, 4.9E-324);
      boolean boolean2 = MathUtils.equals((double[]) null, (double[]) null);
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = new BigInteger(2480, 2480, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 720L);
      byte byte2 = MathUtils.sign((byte)0);
      int int2 = MathUtils.mulAndCheck(0, 1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1563.71);
      doubleArray0[1] = 610.001746145;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)30;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = bigInteger0.intValue();
      int int1 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = bigInteger0.abs();
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
      double double0 = MathUtils.log((-363.636161), 1.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-363.636161);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = Double.NaN;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.indicator(0.0);
      long long0 = MathUtils.subAndCheck(1735L, 0L);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      double double4 = MathUtils.cosh(0.0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3539);
      intArray0[2] = 0;
      intArray0[3] = 21;
      intArray0[4] = 2034;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      float float0 = MathUtils.round((-527.2838F), 0);
      double double0 = MathUtils.round((double) (short)1, (int) (short)0, 0);
      long long0 = MathUtils.binomialCoefficient(67, 0);
      int int0 = MathUtils.sign((int) (short)0);
      int int1 = MathUtils.sign((-341));
      long long1 = MathUtils.pow(1366L, 1247L);
      double double1 = MathUtils.normalizeAngle(0, 0.0);
      double double2 = MathUtils.sinh(0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-341);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-341);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      double double4 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = MathUtils.round((-2188.2212F), (-472));
      double double0 = MathUtils.normalizeAngle((-472), (-2188.2212F));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int0 = MathUtils.lcm((-472), 0);
      double double1 = MathUtils.round((-4.9E-324), 0, 0);
      int int1 = MathUtils.lcm(0, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-472);
      intArray0[2] = 0;
      intArray0[3] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      float float1 = MathUtils.sign((float) 0);
      double double3 = MathUtils.distance(intArray0, intArray0);
      int int2 = MathUtils.addAndCheck(1, 0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 1201;
      int int1 = MathUtils.subAndCheck(400, 1201);
      long long0 = MathUtils.mulAndCheck((long) 1201, (long) 1201);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1442401L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int2 = MathUtils.hash((double) (-801));
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int3 = 9;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9, (-1064761344));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-391);
      intArray0[1] = (-391);
      intArray0[2] = (-391);
      intArray0[4] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.nextAfter(Double.NEGATIVE_INFINITY, 0.0);
      boolean boolean0 = MathUtils.equals(3339.950089, (double) (-391));
      double double1 = MathUtils.sign(Double.NEGATIVE_INFINITY);
      int int1 = MathUtils.addAndCheck((-391), 0);
      int int2 = MathUtils.lcm(0, (-391));
      long long0 = MathUtils.subAndCheck((long) 0, 0L);
      int int3 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      short short0 = MathUtils.indicator((short)0);
      float float0 = MathUtils.round((float) (short)0, (int) (short)0);
      int int1 = MathUtils.indicator((-1));
      long long0 = MathUtils.pow(0L, 0);
      int int2 = MathUtils.mulAndCheck(0, 0);
      double double0 = MathUtils.indicator((-33.28218));
      try { 
        MathUtils.pow(1L, (-690));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-690)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1773L, 1773L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1773L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 3853.6975406;
      doubleArray0[6] = (double) 1773L;
      doubleArray0[7] = (double) 0L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1773.0);
      double double0 = MathUtils.sinh(0.0);
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, (-111));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-632.0206897500125);
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-632.0206897500125);
      doubleArray1[3] = (-632.0206897500125);
      doubleArray1[4] = (-632.0206897500125);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray1);
      long long0 = MathUtils.binomialCoefficient(685, 685);
      int int0 = MathUtils.mulAndCheck(685, (-1));
      double double1 = MathUtils.round(0.0, (-1));
      double double2 = MathUtils.cosh(0.0);
      short short0 = MathUtils.indicator((short)2807);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathUtils.indicator(3338.14687);
      short short0 = MathUtils.indicator((short) (-1));
      int int0 = MathUtils.lcm(701, 0);
      int int1 = MathUtils.addAndCheck((int) (short) (-1), 701);
      long long0 = MathUtils.binomialCoefficient(0, (-210));
      byte byte0 = MathUtils.sign((byte)0);
      long long1 = MathUtils.indicator((long) 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (short) (-1);
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = MathUtils.addAndCheck(0, 1720);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
      double double0 = MathUtils.sign(1290.1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1), 495);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 495
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(17, 17);
      double double0 = MathUtils.indicator((-2953.336245590085));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftRight(14);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 2157L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 34;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 2157L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 34);
      long long0 = MathUtils.addAndCheck((long) 17, 2157L);
      long long1 = MathUtils.mulAndCheck((long) 34, (long) 14);
      // Undeclared exception!
      try { 
        MathUtils.factorial(680);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(Integer.MIN_VALUE, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1L, 0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 0L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(3205, 3205);
      double double0 = MathUtils.sign((double) 10272025);
      int int1 = (-1);
      try { 
        MathUtils.pow((BigInteger) null, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = 1712.404;
      int int0 = (-1567);
      // Undeclared exception!
      try { 
        MathUtils.round(1712.404, (-1567), (-2599));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      long long1 = MathUtils.subAndCheck(0L, (-314L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-314L);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (-314L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long2 = MathUtils.indicator(0L);
      float float0 = MathUtils.sign(489.1244F);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      float float1 = MathUtils.indicator(0.0F);
      int int0 = MathUtils.hash((double) 314L);
      int int1 = 8;
      int int2 = MathUtils.indicator(8);
      double double1 = 762.813668871;
      double double2 = MathUtils.round(762.813668871, 8);
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double4 = MathUtils.indicator(0.0);
      try { 
        MathUtils.pow(1757L, (-314L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,757^-314)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(5451, 0);
      int int0 = MathUtils.pow((-1215), 0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.factorialLog(170);
      float float0 = MathUtils.round((float) 170, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 706.5730622457876;
      doubleArray0[1] = (double) 170;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.nextAfter(0.0, (-1.0));
      byte byte0 = MathUtils.indicator((byte)101);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-3526));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-3,526)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = (-1L);
      long long1 = MathUtils.indicator((-1L));
      long long2 = (-1L);
      long long3 = (-1074L);
      try { 
        MathUtils.pow((-1L), (-1074L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1,074)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = MathUtils.indicator(52);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (-304));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) Float.NaN;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-119);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-4024), byteArray0);
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = MathUtils.gcd((-3925), (-3925));
      int int1 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.round(330.028930179, (-950));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.lcm(5, 5);
      boolean boolean0 = MathUtils.equals((double) 5, (double) 5, 5);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = MathUtils.lcm((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = 2;
      int int1 = MathUtils.pow(0, 2);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      byte byte0 = MathUtils.sign((byte)21);
      float float0 = MathUtils.sign(0.0F);
      int int1 = MathUtils.hash(1572.5267);
      int int2 = 13;
      int int3 = MathUtils.pow(126, 13);
      long long0 = (-1276L);
      long long1 = MathUtils.mulAndCheck((-1276L), (long) 396769581);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.indicator((-4077.24025));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-4077.24025);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-4077.24025);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = (-977);
      double double2 = MathUtils.round(0.0, (-977));
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-977));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -977
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      int int0 = (-964);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-964));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -964
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      double double1 = MathUtils.log(0.0, 8.94659);
      double double2 = MathUtils.sign(0.0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[0];
      double double3 = MathUtils.distance(intArray0, intArray1);
      int int0 = MathUtils.pow(0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1214);
      intArray0[1] = 4;
      intArray0[2] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 2353);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      int int0 = MathUtils.subAndCheck(0, 0);
      double double1 = MathUtils.normalizeAngle(0.0, 1.0);
      short short0 = MathUtils.indicator((short)0);
      long long0 = MathUtils.pow((long) 0, (int) (short)1);
      long long1 = MathUtils.addAndCheck((long) 0, 0L);
      int int1 = 1532;
      // Undeclared exception!
      try { 
        MathUtils.factorial(1532);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3575.822608;
      doubleArray0[1] = 1735.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 3357.0;
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.round(1.0F, 1435547459);
      float float1 = MathUtils.sign((float) 1435547459);
      float float2 = MathUtils.indicator(1.0F);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 0, 1435547459);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,435,547,459, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 3095;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(3095, 0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) 3095);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 979.72961539, 0.0);
      try { 
        MathUtils.pow((-1), (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1467.7;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 721.9162168753;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.2250738585072014E-308;
      doubleArray0[5] = 10.0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = MathUtils.factorialLog(3964);
      int int0 = 0;
      double double1 = MathUtils.binomialCoefficientDouble(3964, 0);
      double double2 = MathUtils.log(3964, 28882.83672556682);
      double double3 = MathUtils.binomialCoefficientLog(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0), 0, 3964);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.cosh(335.360311571636);
      long long0 = MathUtils.pow(3031L, 792);
      double double1 = MathUtils.round(939.38, 308);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = MathUtils.pow(646, 22L);
      short short0 = MathUtils.sign((short)16);
      // Undeclared exception!
      try { 
        MathUtils.round(489.1244F, (-1593), (-1505755136));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,505,755,136, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float float0 = MathUtils.round(2243.0F, 993);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      int int1 = MathUtils.compareTo(0, 0, 6.283185307179586);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = MathUtils.round(1.0, 1030);
      int int0 = MathUtils.lcm((-1), 0);
      long long0 = MathUtils.sign((-2385L));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1761), (-1761));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,761
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = MathUtils.indicator(39916800L);
      double double0 = MathUtils.normalizeAngle(1L, 39916800L);
      try { 
        MathUtils.pow(0, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1436.9288772306961), 0.0, (-2405.1));
      double double0 = MathUtils.sign((-452.2851851));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.indicator((-1873L));
      boolean boolean0 = MathUtils.equals((double) 1, (double) (-1873L));
      long long1 = MathUtils.pow((-823L), 1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = MathUtils.sign(6.283185307179586);
      int int0 = MathUtils.mulAndCheck(0, 0);
      int int1 = MathUtils.sign(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(4503599627370495L, 0L);
      boolean boolean0 = MathUtils.equals((-4402.87), 0.0, (-2201.03));
      byte byte0 = MathUtils.indicator((byte)1);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float float0 = MathUtils.sign(1.31044E7F);
      int int0 = 452;
      double double0 = MathUtils.factorialLog(452);
      double double1 = MathUtils.binomialCoefficientDouble(452, 452);
      float float1 = MathUtils.indicator(1.31044E7F);
      float float2 = MathUtils.indicator(1.0F);
      int int1 = MathUtils.indicator(452);
      long long0 = (-2147483648L);
      long long1 = MathUtils.mulAndCheck((long) 1, (-2147483648L));
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 452;
      intArray0[2] = 1;
      intArray0[3] = 1;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      try { 
        MathUtils.normalizeArray(doubleArray0, 1.0F);
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float float0 = MathUtils.round((-1444.021F), 406);
      int int0 = MathUtils.gcd(16, 0);
      int int1 = MathUtils.pow(16, (long) 406);
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (double) 0;
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = MathUtils.gcd(0, 529);
      double double0 = MathUtils.binomialCoefficientLog(0, (-408824225));
      byte byte0 = MathUtils.sign((byte)7);
      int int4 = MathUtils.gcd(135, (-3535));
      float float1 = MathUtils.indicator(Float.NaN);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-2804), Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      float float0 = MathUtils.round((-527.2838F), 0);
      double double0 = MathUtils.round((double) (short)1, (int) (short)0, 0);
      long long0 = MathUtils.binomialCoefficient(67, 0);
      int int0 = MathUtils.sign((int) (short)0);
      int int1 = MathUtils.sign((-341));
      long long1 = 1366L;
      long long2 = MathUtils.pow(1366L, 1247L);
      double double1 = MathUtils.normalizeAngle(0, 0.0);
      double double2 = MathUtils.sinh(0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-341);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-341);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      double double4 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1247L, 0, 2884);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,884, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float float0 = MathUtils.round((-427.1F), (-3904));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-427.1F);
      doubleArray0[1] = (double) (-3904);
      doubleArray0[2] = (double) (-3904);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) (-427.1F);
      doubleArray0[6] = (double) Float.NaN;
      doubleArray0[7] = (double) (-427.1F);
      doubleArray0[8] = (double) Float.NaN;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.cosh(2717.68);
      int int1 = MathUtils.sign(938);
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = MathUtils.sign(2026);
      float float1 = MathUtils.indicator(222.01F);
      float float2 = MathUtils.sign(222.01F);
      double double0 = MathUtils.sign((double) 0.0F);
      double double1 = MathUtils.nextAfter((-1315.484), (-45.09019002526));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 222.01F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (-1315.484);
      doubleArray0[3] = (double) 222.01F;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (-1315.484);
      doubleArray0[6] = (double) 2026;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.lcm((-905), 1);
      long long0 = MathUtils.pow((-1662L), (long) 2026);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double double1 = MathUtils.indicator((-1126.4581762));
      double double2 = MathUtils.factorialDouble(153);
      double double3 = MathUtils.round((double) 153, 3147);
      long long0 = MathUtils.addAndCheck(194L, (long) 153);
      int[] intArray0 = new int[5];
      intArray0[0] = 153;
      intArray0[1] = 153;
      intArray0[2] = 0;
      intArray0[3] = 3147;
      intArray0[4] = 153;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.006343905096134E269;
      int int1 = MathUtils.hash(doubleArray0);
      double double4 = MathUtils.scalb((-1.0), (-2768));
      double double5 = MathUtils.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftRight(1);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger0.max(bigInteger2);
      float float0 = bigInteger2.floatValue();
      BigInteger bigInteger4 = bigInteger0.min(bigInteger1);
      int int0 = 1;
      int int1 = bigInteger2.signum();
      BigInteger bigInteger5 = bigInteger0.shiftLeft(1);
      BigInteger bigInteger6 = bigInteger0.shiftRight(0);
      BigInteger bigInteger7 = bigInteger0.shiftRight(107);
      BigInteger bigInteger8 = bigInteger0.subtract(bigInteger2);
      byte[] byteArray0 = bigInteger2.toByteArray();
      BigInteger bigInteger9 = MathUtils.pow(bigInteger0, 107);
      BigInteger bigInteger10 = MathUtils.pow(bigInteger2, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(107);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(303, 0);
      long long0 = MathUtils.sign((long) 303);
      int int1 = MathUtils.pow(0, 389);
      int int2 = MathUtils.sign(303);
      int int3 = MathUtils.compareTo(0.0, (-1425.5872014756), 1729.1021096850195);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = MathUtils.subAndCheck(20, 20);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1596);
      intArray0[2] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.sign((double) (-1596));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-61));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
