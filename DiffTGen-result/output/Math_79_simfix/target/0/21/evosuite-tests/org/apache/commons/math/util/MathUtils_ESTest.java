/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 02 13:34:30 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.pow((-317), 1452L);
      int int1 = MathUtils.lcm((-317), 16);
      float float0 = MathUtils.round(1279.0F, 16);
      double double0 = MathUtils.factorialDouble(62);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(823, 823);
      float float0 = MathUtils.indicator(Float.NaN);
      short short0 = MathUtils.sign((short)229);
      double double1 = MathUtils.factorialDouble(110);
      double double2 = MathUtils.log(0.0, 1295.89592162);
      long long0 = MathUtils.pow(0L, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 823;
      doubleArray0[5] = 1.588245541522966E178;
      doubleArray0[6] = (double) Float.NaN;
      doubleArray0[7] = (double) 0L;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1295.89592162;
      doubleArray1[1] = -0.0;
      doubleArray1[2] = (double) (short)229;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) Float.NaN;
      doubleArray1[5] = 1295.89592162;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) 823;
      double double3 = MathUtils.distance(doubleArray0, doubleArray1);
      int int0 = MathUtils.addAndCheck(4, (int) (short)1);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      int[] intArray0 = new int[6];
      intArray0[0] = 5;
      intArray0[1] = (int) (short)229;
      intArray0[2] = (-1193);
      intArray0[3] = (int) (short)229;
      intArray0[4] = (int) (short)1;
      intArray0[5] = 5;
      double double4 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)78);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)78;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (int) (byte)78;
      intArray0[5] = (int) (byte)78;
      double double0 = MathUtils.distance(intArray0, intArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow(bigInteger0, 2146429840);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = MathUtils.sign(3L);
      int int0 = MathUtils.indicator((-2298));
      int int1 = MathUtils.mulAndCheck((-1), 21);
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, (double) (-1), 0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2298), (-2298));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,298
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.sign((double) (short)0);
      boolean boolean0 = MathUtils.equals((double) (short)1, (double) (short)1);
      int int0 = MathUtils.pow(0, 0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-2);
      byteArray0[0] = (byte) (-2);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-512^-512)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = MathUtils.scalb(483.01082918881775, 1807);
      int[] intArray0 = new int[7];
      intArray0[0] = 1807;
      intArray0[1] = 1807;
      intArray0[2] = 1807;
      intArray0[3] = 0;
      intArray0[4] = 1087;
      intArray0[5] = 1807;
      intArray0[6] = 1807;
      double double1 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.indicator((float) 0);
      double double2 = MathUtils.scalb(1807, 0);
      float float1 = MathUtils.round(Float.NaN, 145);
      int int0 = MathUtils.compareTo(1807.0, Float.NaN, 145);
      double double3 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) 1807, (-2403.20201420808), 1807);
      long long0 = MathUtils.addAndCheck((long) 1087, (long) 1087);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.3668722064787249E-70);
      doubleArray0[2] = (double) 1807;
      doubleArray0[3] = (-1023.655510824221);
      doubleArray0[4] = (double) 1807;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = 483.01082918881775;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double4 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = (-572L);
      long long1 = 1L;
      long long2 = MathUtils.pow((-572L), 1L);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(698, (-3829));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = 0;
      int int2 = MathUtils.gcd(0, 0);
      int int3 = 1030;
      // Undeclared exception!
      try { 
        MathUtils.factorial(1030);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1356.0, 738.0);
      double double0 = MathUtils.normalizeAngle(0.0, 1411.0);
      int int0 = MathUtils.indicator(66);
      int int1 = MathUtils.indicator((-3935));
      short short0 = MathUtils.indicator((short)21);
      byte byte0 = MathUtils.indicator((byte)94);
      int int2 = MathUtils.subAndCheck((-1), (-2999));
      byte byte1 = MathUtils.sign((byte)1);
      int int3 = MathUtils.lcm(66, 2998);
      short short1 = MathUtils.sign((short)8);
      double double1 = MathUtils.binomialCoefficientDouble((short)1, (-1));
      long long0 = MathUtils.pow(0L, 766);
      float float0 = MathUtils.indicator((float) 98934);
      byte byte2 = MathUtils.indicator((byte)1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-927.7622345);
      doubleArray0[1] = (double) 98934;
      doubleArray0[2] = (double) (byte)94;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 2998;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (-3935);
      intArray0[3] = (int) (byte)94;
      intArray0[4] = (int) (byte)1;
      intArray0[5] = (int) (short)1;
      intArray0[6] = (int) (byte)94;
      intArray0[7] = (int) (byte)1;
      int int4 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-2518), 1846);
      double double0 = MathUtils.round((-655.432925), (-2518));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1846;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.gcd(1846, (-4364));
      byte byte0 = MathUtils.sign((byte) (-121));
      int int2 = MathUtils.compareTo(Double.NaN, 0.0, (byte) (-121));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((byte) (-121));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -121
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.sign((-1L));
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.sign(0.0F);
      double double2 = MathUtils.cosh(0.0F);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 1073616769);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,073,616,769
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = MathUtils.hash(1849.9812587469341);
      float float0 = MathUtils.round((float) (-1886704624), 0, 0);
      double double0 = MathUtils.sign(1849.9812587469341);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1849.9812587469341;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.normalizeAngle((-1.0), 0.0);
      int int1 = MathUtils.compareTo(1849.9812587469341, 0.0, (-62.36133453));
      int int2 = MathUtils.sign(2190);
      double double3 = MathUtils.normalizeAngle(152.6174089, 968.9734436028591);
      float float1 = MathUtils.indicator((-1870.4418F));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = MathUtils.pow(3153, 3153);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      BigInteger bigInteger1 = bigInteger0.shiftLeft((byte) (-72));
      byte byte0 = (byte)9;
      byteArray0[1] = (byte)9;
      byte byte1 = (byte)52;
      // Undeclared exception!
      try { 
        bigInteger0.add((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.subAndCheck(0L, 0L);
      int int0 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0L, (double) 0L, 4194304);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = MathUtils.compareTo(2743.849, 2743.849, 1.1102230246251565E-16);
      long long0 = MathUtils.factorial(0);
      int int1 = MathUtils.addAndCheck((-1387), (-1387));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2743.849;
      doubleArray0[1] = 2743.849;
      doubleArray0[2] = (double) (-2774);
      doubleArray0[3] = 1.1102230246251565E-16;
      doubleArray0[4] = (double) (-2774);
      doubleArray0[5] = (double) (-1387);
      int int2 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(1.1102230246251565E-16, (-1247603455), 1);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(3137L, 2432902008176640000L);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1033);
      intArray0[1] = 287;
      intArray0[2] = 0;
      intArray0[3] = (-1436);
      intArray0[4] = 195;
      intArray0[5] = (-818);
      intArray0[6] = 216;
      intArray0[7] = 3084;
      intArray0[8] = (-3240);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.addAndCheck(4131, 2688);
      float float0 = MathUtils.indicator((float) 6819);
      double double0 = MathUtils.nextAfter((-1033), 287);
      int int2 = MathUtils.indicator((-1412));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1513, 9);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.round((-1.0), 0, (int) (short)0);
      short short1 = (short) (-4470);
      short short2 = MathUtils.indicator((short) (-4470));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((short) (-4470), (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -4,470, k = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 683.6;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.round((-1.0), 1831);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.sign(683.6);
      boolean boolean0 = MathUtils.equals((-1267.59627), 0.0, 1831);
      double double4 = MathUtils.sign((double) 1831);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 1831, 1831);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,831, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 435.5961706;
      doubleArray0[1] = (-1643.89485361927);
      doubleArray0[2] = (-2526.9499);
      doubleArray0[3] = (-2113.0395042);
      doubleArray0[4] = 3276.0467;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 147.52478;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm(1916, 1916);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int[] intArray1 = new int[6];
      intArray1[0] = 1916;
      intArray1[1] = 1916;
      intArray1[2] = 1916;
      intArray1[3] = 1916;
      intArray1[4] = 0;
      intArray1[5] = 1916;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray1, intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = (-1L);
      long long1 = MathUtils.pow((-1L), 20922789888000L);
      int int0 = (-1373);
      int int1 = MathUtils.pow((-1373), 488L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1373), (-1373));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,373
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)11);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)11;
      doubleArray0[1] = (double) (byte)11;
      doubleArray0[2] = (double) (byte)11;
      doubleArray0[3] = 646.88933002184;
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = (-1005.4);
      doubleArray0[6] = (double) (byte)11;
      doubleArray0[7] = (double) (byte)1;
      doubleArray0[8] = (double) (byte)11;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = MathUtils.factorial(20);
      long long1 = MathUtils.pow(2432902008176640000L, 2432902008176640000L);
      double double0 = MathUtils.factorialLog(20);
      float float0 = 0.0F;
      float float1 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = MathUtils.nextAfter(Double.POSITIVE_INFINITY, 0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2558L);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      int int1 = 1842;
      // Undeclared exception!
      try { 
        MathUtils.factorial(1842);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round(Double.POSITIVE_INFINITY, 0, 0);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.5;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = (-1057);
      try { 
        MathUtils.pow((-1057), (-1057));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,057^-1,057)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 681.6476282208279;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-2289.1);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((-2205L), (-2205L));
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.indicator(1618.323574723483);
      int int0 = MathUtils.compareTo(1790.0, 681.6476282208279, 1790.0);
      double double3 = MathUtils.factorialLog(0);
      double double4 = MathUtils.factorialLog(0);
      double double5 = MathUtils.normalizeAngle(681.6476282208279, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double6 = MathUtils.round(178.1106298315, 15);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 648;
      int int1 = MathUtils.pow(648, (long) 648);
      int int2 = MathUtils.lcm(0, 648);
      int int3 = 0;
      int int4 = MathUtils.lcm(367, 0);
      double double0 = MathUtils.log(1181.8803911164139, 1238.5967109158);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 648, 0, 648);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 648, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-820L), (-820L));
      float float0 = MathUtils.indicator(1515.79F);
      double double0 = MathUtils.cosh(472.33976);
      int int0 = MathUtils.hash((-229.284));
      double double1 = MathUtils.indicator((double) 672400L);
      double double2 = MathUtils.scalb(936.696103181435, 1195879194);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(1195879194, 1195879194);
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = MathUtils.indicator((-3712.802F));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-3712.802F));
      int[] intArray0 = new int[3];
      intArray0[0] = 2229;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign(0L);
      long long1 = MathUtils.mulAndCheck((-647L), 0L);
      int int0 = MathUtils.indicator(5);
      float float1 = MathUtils.round((float) (-647L), 61, 0);
      long long2 = MathUtils.pow(899L, (long) 2229);
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray0, 1);
      int int1 = MathUtils.hash(10.0);
      double double1 = MathUtils.round((double) 0, (-1));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0L, 0.0, 1076101120);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-715.1840139601222);
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-1.0), (-1.0), 1599.36693);
      int int0 = MathUtils.indicator(714);
      int int1 = MathUtils.gcd(2153, 2153);
      int int2 = MathUtils.gcd(2153, 2153);
      // Undeclared exception!
      try { 
        MathUtils.factorial(2153);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1367.3855123316, 3.141592653589793);
      double double1 = MathUtils.factorialLog(1126);
      double double2 = MathUtils.normalizeAngle(0.5, 2810.034086522945);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 3.141592653589793, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      double double0 = MathUtils.binomialCoefficientDouble(1, 0);
      long long0 = MathUtils.addAndCheck(3628800L, 2177L);
      int int1 = (-1);
      int int2 = MathUtils.subAndCheck(0, (-1));
      boolean boolean0 = MathUtils.equals(1.0, (double) 0, (double) 1);
      double double1 = MathUtils.factorialDouble(0);
      int int3 = 21;
      int int4 = MathUtils.pow(0, 21);
      int int5 = MathUtils.lcm(0, 21);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 3030);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = (-511);
      int int1 = MathUtils.lcm((-511), (-511));
      float float0 = MathUtils.round((float) (-511), 1030);
      short short0 = (short) (-1000);
      short short1 = MathUtils.sign((short) (-1000));
      double double0 = MathUtils.factorialDouble(1030);
      int int2 = MathUtils.gcd((short) (-1000), (-511));
      try { 
        MathUtils.pow((long) (short) (-1), (long) (short) (-1000));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1,000)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-4.9E-324), (-4.9E-324));
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = bigInteger0.toString();
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 1084);
      long long0 = MathUtils.subAndCheck((long) 1084, (-749L));
      float float1 = MathUtils.indicator((-689.5F));
      int int0 = MathUtils.lcm(1084, 1728);
      long long1 = 1689L;
      long long2 = MathUtils.mulAndCheck(1689L, (long) 468288);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1252));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,252
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      float float0 = MathUtils.indicator((float) 0);
      double double0 = MathUtils.indicator((double) 1.0F);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (-3129.9974256);
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.nextAfter(0.0, 2210.9861061109395);
      float float0 = MathUtils.sign((-522.0F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = bigInteger0.shiftRight(4532);
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      boolean boolean0 = bigInteger0.isProbablePrime(1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 100);
      double double1 = MathUtils.binomialCoefficientLog(1, 0);
      int int0 = MathUtils.sign(0);
      long long1 = MathUtils.subAndCheck((long) 0, (long) 100);
      int int1 = MathUtils.lcm(100, 1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 29791;
      intArray0[1] = 29791;
      intArray0[2] = 29791;
      intArray0[3] = 29791;
      intArray0[4] = 29791;
      intArray0[5] = 29791;
      intArray0[6] = 29791;
      intArray0[7] = 29791;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long2 = MathUtils.pow(0L, 29791);
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = 1977;
      double double0 = MathUtils.binomialCoefficientDouble(1977, 0);
      // Undeclared exception!
      MathUtils.factorialLog(29791);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      float float0 = MathUtils.sign((float) (short)0);
      boolean boolean0 = MathUtils.equals(0.0, (double) 0.0F);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)0;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.round(0.0F, (-291));
      boolean boolean0 = MathUtils.equals((double) Float.NaN, (double) 0.0F, (double) Float.NaN);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3714), 2958);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,714, k = 2,958
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1);
      int int0 = 2251;
      float float0 = MathUtils.round((float) (short)1, 2251);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-606.048));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.sinh((byte)0);
      float float0 = MathUtils.round((float) (byte)0, 547);
      long long0 = MathUtils.addAndCheck(5040L, (long) (byte)0);
      int int1 = MathUtils.compareTo(5040L, 1.0, 0.0);
      double double1 = MathUtils.indicator((double) 5040L);
      double double2 = MathUtils.round((-667.5048570269703), 1);
      long long1 = MathUtils.mulAndCheck((long) 1, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.log(Double.NaN, Double.NaN);
      int int0 = MathUtils.pow(9, (long) 9);
      double double1 = MathUtils.round(Double.NaN, 387420489, 0);
      double double2 = MathUtils.cosh(0.0);
      int int1 = MathUtils.addAndCheck(387420489, 17);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (double) 387420489;
      doubleArray0[6] = Double.NaN;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigInteger0.isProbablePrime((-1559));
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      BigInteger bigInteger2 = bigInteger0.nextProbablePrime();
      float float0 = bigInteger0.floatValue();
      int int0 = MathUtils.pow(0, 0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger1);
      double double0 = MathUtils.round((double) 0, (-2381), 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.pow(973L, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1559);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 512;
      intArray0[1] = 2086;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 12;
      intArray1[2] = 0;
      intArray1[3] = 512;
      intArray1[4] = 0;
      intArray1[5] = 2086;
      intArray1[6] = 19;
      intArray1[7] = 2086;
      int int1 = MathUtils.distanceInf(intArray0, intArray1);
      int int2 = MathUtils.hash((double) 0);
      double double0 = MathUtils.sinh(2086);
      int int3 = MathUtils.subAndCheck(0, 1);
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 215.6471904429;
      doubleArray0[3] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[2];
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = (-624.193796118929);
      boolean boolean0 = MathUtils.equals((-624.193796118929), (-2937.2007), 0.0);
      float float0 = 0.0F;
      float float1 = MathUtils.sign(0.0F);
      int int0 = (-1106);
      // Undeclared exception!
      try { 
        MathUtils.equals((-2937.2007), (-1900.9592971241), (-1106));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = MathUtils.round((-679.0F), 1025, 6);
      long long0 = MathUtils.binomialCoefficient(6, 0);
      short short0 = MathUtils.indicator((short)2312);
      short short1 = MathUtils.sign((short)2312);
      int int0 = MathUtils.hash(1.0);
      double double0 = MathUtils.nextAfter(0.0, (-679.0F));
      byte byte0 = MathUtils.indicator((byte)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 17;
      intArray0[6] = 0;
      intArray0[7] = 1292;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 19;
      int int1 = MathUtils.mulAndCheck(0, 19);
      int int2 = (-1600);
      double double0 = MathUtils.scalb((-207.7342), (-1600));
      int int3 = MathUtils.hash((-1664.4));
      double double1 = MathUtils.scalb((-1793.809580683667), 9);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1600);
      intArray0[1] = 19;
      int int4 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 9);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 9
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathUtils.scalb((-10.1428670967638), 107);
      int[] intArray0 = new int[6];
      intArray0[0] = 107;
      intArray0[1] = 107;
      intArray0[2] = 107;
      intArray0[3] = 107;
      intArray0[4] = 107;
      intArray0[5] = 107;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger1.abs();
      BigInteger bigInteger3 = bigInteger0.andNot(bigInteger1);
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.indicator(0.0);
      long long0 = 1796L;
      long long1 = MathUtils.mulAndCheck(1796L, 6L);
      int int0 = (-2145);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2145));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,145
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 1668);
      int int1 = MathUtils.lcm((-568), 0);
      int[] intArray0 = new int[0];
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      short short0 = MathUtils.sign((short)624);
      int int3 = MathUtils.compareTo((-879.4866), (-714.027898934), 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1668;
      doubleArray0[2] = (-879.4866);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (short)624;
      int int4 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      double double0 = bigInteger0.doubleValue();
      byte[] byteArray0 = new byte[2];
      float float0 = bigInteger0.floatValue();
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)47;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, 0L);
      int int0 = MathUtils.sign((-2159));
      double double0 = MathUtils.indicator((-557.186));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 812;
      intArray0[6] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1L, 0L);
      int int0 = MathUtils.hash((double) 1L);
      int int1 = MathUtils.pow(1072693248, 1072693248);
      long long1 = (-152L);
      try { 
        MathUtils.pow((-152L), (-152L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-152^-152)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 1L);
      long long1 = MathUtils.sign(2710L);
      int int0 = 0;
      long long2 = MathUtils.binomialCoefficient(0, 0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0, 622);
      short short0 = MathUtils.sign((short) (-272));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (-1053.425125);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) 622;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = MathUtils.factorial(1);
      double double0 = MathUtils.round((-1.0), 1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1.0));
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = (-919L);
      long long1 = MathUtils.mulAndCheck((-919L), 331L);
      boolean boolean0 = MathUtils.equals((double) (-304189L), (double) (-919L));
      int int0 = 1;
      int int1 = MathUtils.subAndCheck(1, 1);
      try { 
        MathUtils.pow((-1206L), (-2147483648L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,206^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-103.590182);
      doubleArray0[1] = (-1918.06282212);
      doubleArray0[2] = (-2005.40518398);
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = (-1601.78737132699);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-103.590182));
      int int0 = 2702;
      int int1 = (-2814);
      int int2 = MathUtils.subAndCheck(2702, (-2814));
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      try { 
        MathUtils.pow(2702, (-2814));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,702^-2,814)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathUtils.nextAfter(0.0, 2210.9861061109395);
      float float0 = MathUtils.sign((-522.0F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long0 = bigInteger0.longValueExact();
      byte byte0 = bigInteger0.byteValueExact();
      int int0 = (-1);
      boolean boolean0 = bigInteger0.isProbablePrime((-1));
      int int1 = 100;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 100);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = 9218868437227405312L;
      long long1 = MathUtils.pow(9218868437227405312L, 0L);
      int int0 = 9;
      boolean boolean0 = MathUtils.equals(3130.15644, (-1332.8983920382482), 9);
      int int1 = MathUtils.hash((double) 9218868437227405312L);
      double double0 = MathUtils.nextAfter(9218868437227405312L, 1138752512);
      int[] intArray0 = new int[0];
      double double1 = MathUtils.distance(intArray0, intArray0);
      short short0 = MathUtils.sign((short)0);
      long long2 = MathUtils.factorial(0);
      long long3 = MathUtils.indicator((long) (short)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1592.1849202;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (-349.79949634616);
      doubleArray0[4] = 0.0;
      doubleArray0[0] = 1611.51079763;
      doubleArray0[6] = (-2528.3823);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(87, 2096);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.mulAndCheck(331, 2096);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1597;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte)88);
      long long0 = MathUtils.pow((long) 0, 0L);
      int int1 = MathUtils.lcm(1195, (-829));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 609.8352;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1, 1);
      double double0 = MathUtils.cosh(0);
      float float0 = MathUtils.round((float) 1, (-1521));
      long long0 = MathUtils.pow((long) 1, 1);
      double double1 = MathUtils.sign(0.0);
      double double2 = MathUtils.cosh(1);
      int int1 = 1;
      long long1 = MathUtils.factorial(1);
      BigInteger bigInteger0 = BigInteger.ONE;
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1L);
      short short1 = MathUtils.indicator((short) (-1687));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1521));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,521
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      float float0 = MathUtils.indicator((float) 0);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      int int1 = MathUtils.subAndCheck(0, 0);
      byte byte0 = MathUtils.indicator((byte)8);
      int int2 = 2;
      int int3 = MathUtils.subAndCheck((int) (byte)1, 2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.sign((-1.0));
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1779);
      float float0 = MathUtils.round((float) 1779, 1583);
      double double1 = MathUtils.normalizeAngle(Double.POSITIVE_INFINITY, 0.5);
      short short0 = MathUtils.sign((short)792);
      float float1 = MathUtils.indicator(Float.NaN);
      double double2 = MathUtils.normalizeAngle(0.5, 1583);
      int int0 = MathUtils.pow(1583, 1583);
      double double3 = MathUtils.scalb((short)792, 1928384975);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)792;
      doubleArray0[1] = (double) 1779;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = 1.886310464363301E142;
      doubleArray0[4] = (double) 1779;
      doubleArray0[5] = 0.5;
      doubleArray0[6] = (double) 1779;
      doubleArray0[7] = (double) (short)792;
      doubleArray0[8] = (double) 1779;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3368.3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(21, 21);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 21;
      doubleArray0[1] = (double) 42;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.sign((-1548));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)6;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 1);
      float float0 = MathUtils.round(1780.22F, 21, 1);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 6;
      long long0 = MathUtils.factorial(6);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = (double) 720L;
      doubleArray0[2] = (double) 720L;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 720L;
      doubleArray0[5] = (double) 720L;
      doubleArray0[6] = (double) 720L;
      doubleArray0[7] = (double) 6;
      doubleArray0[8] = (double) 720L;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 50.62;
      doubleArray1[1] = (double) 6;
      doubleArray1[2] = 1.1102230246251565E-16;
      double double0 = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 720L;
      doubleArray1[5] = (double) 720L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      int int1 = 11;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 11);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.sign((long) 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)0);
      double double2 = MathUtils.sinh((-4898.146177897677));
      double double3 = MathUtils.binomialCoefficientDouble(463, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.pow((byte)0);
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.pow(1);
      int int0 = bigInteger0.bitCount();
      long long1 = bigInteger0.longValueExact();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 1);
      float float0 = MathUtils.indicator((float) 463);
      double double4 = MathUtils.indicator(0.0);
      int int1 = MathUtils.gcd(0, 5);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte byte0 = (byte) (-5);
      byte byte1 = MathUtils.sign((byte) (-5));
      long long0 = MathUtils.indicator((long) (byte) (-5));
      long long1 = (-2947L);
      long long2 = (-960L);
      long long3 = MathUtils.subAndCheck((-2947L), (-960L));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      float float0 = MathUtils.indicator((float) 0);
      double double0 = MathUtils.indicator((double) 1.0F);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[4] = (-3129.9974256);
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 0;
      double double1 = MathUtils.distanceInf(doubleArray1, doubleArray1);
      long long0 = MathUtils.pow(0L, (long) 1);
      long long1 = MathUtils.binomialCoefficient(1, (-929));
      double double2 = MathUtils.binomialCoefficientDouble(843, 0);
      int int1 = MathUtils.hash(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0, 0);
      float float1 = MathUtils.indicator(0.0F);
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)11);
      double double0 = MathUtils.sinh((-450.0));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (-450.0);
      doubleArray0[4] = (double) (byte)11;
      doubleArray0[5] = (-450.0);
      doubleArray0[6] = (-1.3535891383934992E195);
      doubleArray0[7] = (-450.0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.3535891383934992E195);
      doubleArray1[1] = (double) (byte)11;
      doubleArray1[2] = (-4757.17034414);
      doubleArray1[3] = (-450.0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = MathUtils.pow(3751L, 0);
      int int0 = MathUtils.gcd(9, 0);
      long long1 = MathUtils.indicator(1L);
      float float0 = MathUtils.sign((float) 1L);
      int int1 = MathUtils.pow(0, (long) 9);
      byte byte0 = MathUtils.sign((byte) (-1));
      double double0 = MathUtils.nextAfter(1L, 0);
      int int2 = MathUtils.hash(0.0);
      int int3 = MathUtils.mulAndCheck(0, 5);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-122));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -122
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double double0 = MathUtils.binomialCoefficientLog(1340, 1340);
      int int0 = MathUtils.lcm(0, 1340);
      int int1 = MathUtils.addAndCheck(0, 0);
      double double1 = MathUtils.round(2390.0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(3555, 3555);
      boolean boolean0 = MathUtils.equals(1.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      short short0 = bigInteger3.shortValueExact();
      BigInteger bigInteger4 = bigInteger0.max(bigInteger3);
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 0L);
      int int0 = MathUtils.addAndCheck((-1808), (-1808));
      BigInteger bigInteger6 = bigInteger3.max(bigInteger0);
      float float1 = MathUtils.round(1481.405F, 1687);
      BigInteger bigInteger7 = BigInteger.ZERO;
      BigInteger bigInteger8 = MathUtils.pow(bigInteger7, bigInteger3);
      BigInteger bigInteger9 = MathUtils.pow(bigInteger1, bigInteger2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-2110), 1);
      long long0 = MathUtils.subAndCheck(720L, 720L);
      short short0 = MathUtils.indicator((short)5);
      long long1 = MathUtils.addAndCheck((long) (short)5, 87178291200L);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.compareTo((byte)0, (byte)0, (byte)0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.mulAndCheck((int) (byte)0, (-552));
      int int3 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.sign((long) 29791);
      double double0 = MathUtils.normalizeAngle(0.0, 1L);
      int int4 = (-1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      int int0 = MathUtils.compareTo(1.0F, (-779.861889269602), (-779.861889269602));
      int int1 = (-2199);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-2199), 3846);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      int int1 = MathUtils.subAndCheck(0, 0);
      int int2 = MathUtils.lcm(341, 1238);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 341;
      doubleArray0[1] = (-1544.24941537);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 422158;
      doubleArray0[4] = (double) 422158;
      doubleArray0[5] = (double) 341;
      doubleArray0[6] = (double) 341;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 422158.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.hash(2127.67);
      double double0 = MathUtils.scalb(0.0, 0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1460), (-1460));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,460
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      double double0 = MathUtils.factorialLog((short)0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short)0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.nextAfter(0, 0);
      double double1 = MathUtils.sign((-1429.74535));
      int int1 = MathUtils.addAndCheck(801, 0);
      int int2 = MathUtils.sign(801);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      int int4 = MathUtils.pow(0, 0L);
      int int5 = MathUtils.hash(1261.58);
      long long0 = MathUtils.sign(713L);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-465), 0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      short short0 = MathUtils.sign((short)2727);
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3583.2766696);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2686.159191725);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-464.0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathUtils.nextAfter(1158.97216, 1158.97216);
      boolean boolean0 = MathUtils.equals((-2749.0), Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.sign((-2417.850132));
      long long0 = MathUtils.subAndCheck(1486L, 1486L);
      int int0 = MathUtils.compareTo((-44.35954994182676), (-256.0), (-2417.850132));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-256.0);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (-256.0);
      doubleArray0[3] = (-44.35954994182676);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      short short0 = (short)1;
      short short1 = MathUtils.indicator((short)1);
      int int1 = MathUtils.compareTo(0L, (-309.104995268), 1121.7911990341765);
      long long1 = MathUtils.mulAndCheck((long) 1, 0L);
      float float0 = MathUtils.indicator((float) 1);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = (-1477);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 1538;
      intArray0[5] = 61;
      intArray0[6] = 4160;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(8, 1173);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 8, k = 1,173
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.factorial(66);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.gcd(5701, 0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      short short0 = MathUtils.sign((short)5);
      double double0 = MathUtils.sign((double) 0.0F);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2910.1721);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3547.7702722);
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.mulAndCheck((long) 1960612594, 1L);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.round((-1.0), 0);
      int int0 = MathUtils.compareTo(0, (-1.0), (-1.0));
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1, 0, 2627);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,627, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = 0;
      float float1 = MathUtils.round((-1.0F), 0);
      double double0 = MathUtils.round(1098.171, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals(1098.171, (double) (-1.0F), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 413.01;
      doubleArray0[2] = 1616.043199918;
      doubleArray0[3] = 1868.73767;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = 2764;
      boolean boolean0 = MathUtils.equals(0.0, 635.2409, 2764);
      byte byte0 = MathUtils.sign((byte) (-124));
      double double1 = MathUtils.indicator(1616.043199918);
      try { 
        MathUtils.pow((long) (byte) (-1), (int) (byte) (-124));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-124)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.sign(561.9);
      long long0 = MathUtils.pow(1230L, 8);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1615.05507474, 0.0, 1648);
      try { 
        MathUtils.pow((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = (-1302);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, (-1302));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(915);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)77);
      double double0 = MathUtils.factorialDouble((byte)77);
      double double1 = MathUtils.sinh(206.599075066);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) (byte)77);
      double double2 = MathUtils.cosh(1452.12);
      long long0 = MathUtils.subAndCheck(925L, (long) (byte)1);
      int int0 = MathUtils.sign((int) (byte)77);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathUtils.sinh(161.946546994);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.scalb(10.0, 1);
      double double1 = MathUtils.factorialDouble(0);
      byte byte0 = MathUtils.indicator((byte) (-99));
      int int0 = MathUtils.lcm((byte) (-1), 2120);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      long long0 = MathUtils.sign(1570L);
      long long1 = MathUtils.subAndCheck(1L, (long) (short)1);
      int int0 = MathUtils.mulAndCheck(1533, 1533);
      int int1 = MathUtils.pow((int) (short)1, (long) 2350089);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.log(1167.884203748, (-1999.8142543612));
      float float0 = MathUtils.indicator((-745.4327F));
      double double1 = MathUtils.cosh(1167.884203748);
      float float1 = MathUtils.indicator((-1.0F));
      float float2 = MathUtils.sign((-1.0F));
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 10;
      intArray0[3] = 2066;
      intArray0[4] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 0;
      BigInteger bigInteger1 = bigInteger0.flipBit(0);
      int int1 = bigInteger0.intValue();
      MockRandom mockRandom0 = new MockRandom(10);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte)104;
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger2 = BigInteger.probablePrime(1030, mockRandom0);
      BigInteger bigInteger3 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger4 = bigInteger0.andNot(bigInteger3);
      try { 
        MathUtils.pow(bigInteger0, (-2078));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-2,078)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 8;
      try { 
        MathUtils.pow(8, (-1846L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (8^-1,846)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (-1));
      double double0 = MathUtils.nextAfter((-1), 0.0);
      double double1 = MathUtils.nextAfter(140.76105, (-2740.6937346968853));
      long long0 = MathUtils.addAndCheck((long) (-1), 0L);
      byte byte0 = MathUtils.sign((byte)0);
      short short0 = MathUtils.sign((short)0);
      double double2 = MathUtils.normalizeAngle((byte)0, (-2740.6937346968853));
      double double3 = MathUtils.cosh(3.141592653589793);
      double double4 = MathUtils.factorialDouble(382);
      int int0 = MathUtils.hash(4211.577877641011);
      int int1 = MathUtils.gcd((short)0, 1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2740.6937346968853);
      doubleArray0[1] = 140.76105;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-1350929752);
      doubleArray0[4] = 140.76105;
      doubleArray0[5] = (double) (-1350929752);
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.log(0.0, 0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.abs();
      BigInteger bigInteger2 = bigInteger0.negate();
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger3);
      float float0 = 0.0F;
      int int0 = (-1665);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-1665), (-1665));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,665, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.pow(330);
      boolean boolean0 = bigInteger0.testBit(20);
      float float0 = bigInteger0.floatValue();
      int int0 = bigInteger0.signum();
      boolean boolean1 = bigInteger0.testBit(330);
      String string0 = bigInteger0.toString(20);
      boolean boolean2 = bigInteger0.isProbablePrime(330);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0);
      int int1 = MathUtils.lcm(0, 20);
      double double0 = MathUtils.binomialCoefficientDouble(330, 20);
      double double1 = MathUtils.sign((-4.9E-324));
      long long0 = MathUtils.factorial(0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger1, 1536L);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-813));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -813
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = MathUtils.lcm(1393, 856);
      boolean boolean0 = MathUtils.equals(0.0, (double) 856);
      short short0 = MathUtils.sign((short) (-985));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = (-2415);
      int int1 = MathUtils.mulAndCheck((-2415), 0);
      double double0 = MathUtils.nextAfter((-2415), 1.0);
      byte byte0 = MathUtils.sign((byte)0);
      int int2 = 7;
      int int3 = MathUtils.lcm(7, (-1604));
      short short0 = MathUtils.indicator((short) (byte)0);
      double double1 = MathUtils.round(0.0, (-1604));
      double double2 = 1637.6456123881;
      double double3 = MathUtils.cosh(1637.6456123881);
      double double4 = MathUtils.indicator((double) 0);
      long long0 = MathUtils.mulAndCheck(1568L, 479001600L);
      int int4 = 8;
      int int5 = MathUtils.sign(8);
      int int6 = (-2376);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2376), 8);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,376, k = 8
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(287L, (-903L));
      long long1 = MathUtils.binomialCoefficient(6, 6);
      int int0 = MathUtils.lcm(627, 6);
      double double0 = MathUtils.round((double) 6, (-1463));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1190L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1254;
      doubleArray0[3] = (double) 627;
      doubleArray0[4] = (-12.0611556464106);
      doubleArray0[5] = (double) 287L;
      doubleArray0[6] = (double) 6;
      doubleArray0[7] = (double) 627;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 603.536761598);
      double double2 = MathUtils.nextAfter(603.536761598, 287.0);
      int int1 = MathUtils.compareTo(6.0, (-12.0611556464106), 627.0);
      long long2 = MathUtils.pow((long) 1254, 188L);
      int int2 = MathUtils.sign(0);
      double double3 = MathUtils.normalizeAngle(1254.0, 603.536761598);
      float float0 = MathUtils.round((float) 188L, (-2013), 6);
      double double4 = MathUtils.binomialCoefficientLog(1254, (-1463));
      int int3 = MathUtils.hash(doubleArray0);
      double double5 = MathUtils.nextAfter(6, (-724.0));
      int int4 = MathUtils.indicator(Integer.MIN_VALUE);
  }
}
