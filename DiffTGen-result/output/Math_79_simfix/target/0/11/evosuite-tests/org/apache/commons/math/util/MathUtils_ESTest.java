/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 02 13:31:28 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.gcd(1952257861, 9);
      long long0 = MathUtils.mulAndCheck((long) 9, (long) 1952257861);
      double double0 = MathUtils.sign(2664.994231);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2664.994231;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1952257861;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 2664.994231;
      doubleArray0[6] = (double) 1952257861;
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = 2192.350893;
      doubleArray0[4] = 2192.350893;
      doubleArray0[5] = 2192.350893;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 603.172);
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.sinh(0.0);
      float float1 = MathUtils.indicator(0.0F);
      byte byte0 = MathUtils.sign((byte)23);
      double double1 = MathUtils.cosh(1131.8);
      long long0 = MathUtils.sign((-219L));
      long long1 = MathUtils.indicator(506L);
      double double2 = MathUtils.normalizeAngle(0.0F, 0.0);
      long long2 = MathUtils.mulAndCheck((-1L), 0L);
      double double3 = MathUtils.round(1231.543765, 0, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = 1;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (int) (byte)23;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (int) (byte)1;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.pow(13, 2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-23), (-23));
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, (double) (-46), (double) (-23));
      int int1 = MathUtils.hash((double) (-46));
      int[] intArray0 = new int[2];
      intArray0[0] = (-2381);
      intArray0[1] = (-46);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.round((float) (-2381), (-2381));
      double double0 = MathUtils.sign(1.1102230246251565E-16);
      long long0 = MathUtils.mulAndCheck((-1L), (long) (-2381));
      short short0 = MathUtils.sign((short)1582);
      double double1 = MathUtils.cosh(Float.NaN);
      short short1 = MathUtils.indicator((short)1582);
      int int3 = MathUtils.pow((int) (short)1, (long) (short)1);
      float float1 = MathUtils.sign((float) 2381L);
      double double2 = MathUtils.binomialCoefficientLog(45, (-2381));
      float float2 = MathUtils.round((float) 1, (-1072));
      BigInteger bigInteger0 = BigInteger.ONE;
      long long1 = MathUtils.binomialCoefficient(45, 0);
      long long2 = MathUtils.factorial((short)1);
      int int4 = MathUtils.subAndCheck((-23), (-46));
      float float3 = MathUtils.round((-508.3833F), (-46), 0);
      long long3 = MathUtils.pow((long) (-2381), (int) (short)1);
      int int5 = MathUtils.lcm(23, 5);
      try { 
        MathUtils.pow(bigInteger0, (-2355L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,355)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(2473);
      long long0 = MathUtils.mulAndCheck(48050L, 745L);
      long long1 = MathUtils.binomialCoefficient(2473, 2473);
      double double1 = MathUtils.scalb(1L, (-1572));
      double double2 = MathUtils.indicator((double) 745L);
      double double3 = MathUtils.nextAfter((-1572), 1.0);
      int int0 = 1;
      double double4 = MathUtils.factorialLog(1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 48050L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long2 = MathUtils.pow(4220L, 745L);
      long long3 = MathUtils.binomialCoefficient(2473, 1);
      int int1 = MathUtils.mulAndCheck(2145958446, 1);
      int int2 = MathUtils.addAndCheck(1, 285);
      long long4 = MathUtils.sign(0L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(16, 286);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 16, k = 286
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = MathUtils.nextAfter(Double.POSITIVE_INFINITY, (-1.0));
      int int0 = 13;
      double double1 = MathUtils.factorialDouble(13);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.2270208E9;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)2137);
      double double2 = MathUtils.nextAfter(1362.16418, (-401.4834));
      int int1 = (-2146286147);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (short)1, 1431655765, (-2146286147));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,146,286,147, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = MathUtils.pow(881L, 881L);
      long long1 = MathUtils.indicator(997630358679325809L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = bigInteger0.doubleValue();
      double double1 = MathUtils.factorialLog(0);
      BigInteger bigInteger2 = bigInteger1.add(bigInteger0);
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger bigInteger4 = bigInteger1.flipBit(0);
      BigInteger bigInteger5 = bigInteger1.subtract(bigInteger3);
      long long2 = bigInteger1.longValueExact();
      BigInteger bigInteger6 = bigInteger1.shiftLeft(0);
      BigInteger bigInteger7 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger8 = bigInteger0.shiftRight(882);
      int int1 = MathUtils.compareTo(4.9E-324, 0, 1.0);
      int int2 = bigInteger0.intValueExact();
      int int3 = MathUtils.compareTo(0.0, 4.9E-324, 4.9E-324);
      int[] intArray0 = new int[2];
      intArray0[0] = 882;
      intArray0[1] = 0;
      int int4 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.indicator((float) 0);
      byte byte0 = MathUtils.indicator((byte)21);
      int int5 = MathUtils.mulAndCheck(882, 0);
      int int6 = MathUtils.mulAndCheck((-127), (-2519));
      long long3 = MathUtils.subAndCheck((-671L), 0L);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.compareTo(1.0, 1.0, 2191.16104142052);
      double double0 = MathUtils.cosh(1.0);
      int int1 = (-715827883);
      // Undeclared exception!
      try { 
        MathUtils.round(1.5430806348152437, (-715827883), 0);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(130, 130);
      long long0 = MathUtils.binomialCoefficient(130, 130);
      double double1 = MathUtils.nextAfter(0.0, 3792.14445);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = 4.9E-324;
      doubleArray0[2] = (-2658.7618972522);
      doubleArray0[3] = (double) 130;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 4.9E-324);
      long long1 = MathUtils.pow((-1008L), 0L);
      int[] intArray0 = new int[7];
      intArray0[0] = 130;
      intArray0[1] = 130;
      intArray0[2] = 130;
      intArray0[3] = 130;
      intArray0[4] = 587;
      intArray0[5] = 1;
      intArray0[6] = 130;
      double double3 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.mulAndCheck(17, 1);
      double double4 = MathUtils.nextAfter((-1.0), (-1.0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-342L), 1362L);
      long long1 = MathUtils.subAndCheck(0L, 2432902008176640000L);
      int[] intArray0 = new int[9];
      intArray0[0] = 61;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = (-1997);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-3811);
      intArray0[7] = 325;
      intArray0[8] = 1;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)88);
      boolean boolean1 = MathUtils.equals((double) (-3811), (double) (-1));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float float0 = MathUtils.sign((-3415.8F));
      byte byte0 = MathUtils.sign((byte) (-30));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3430));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,430
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 6;
      double double0 = MathUtils.factorialLog(6);
      float float0 = MathUtils.sign((float) 6);
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.binomialCoefficient(0, (-1));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1), 845);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 845
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = MathUtils.compareTo(1831.67, 1092.125220301618, 1092.125220301618);
      short short0 = MathUtils.indicator((short)1173);
      int int1 = MathUtils.gcd((short)1173, 0);
      long long0 = MathUtils.mulAndCheck((long) 1173, 283L);
      short short1 = MathUtils.sign((short)1);
      short short2 = MathUtils.indicator((short)1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 283L;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) 1173;
      doubleArray0[3] = 1092.125220301618;
      doubleArray0[4] = 1092.125220301618;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = 1092.125220301618;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow(1L, 0);
      long long2 = MathUtils.pow(283L, (long) 0);
      double double0 = MathUtils.binomialCoefficientDouble((short)1, 0);
      double double1 = MathUtils.binomialCoefficientLog(1502, 443);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (int) (short)1;
      intArray0[2] = 0;
      intArray0[3] = (int) (short)1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 356;
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float float0 = MathUtils.round((-583.81F), (-549), 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.log((-1974.5641977656073), (-1130.0));
      long long0 = MathUtils.pow(653L, 653L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftRight(5);
      int int0 = bigInteger0.signum();
      BigInteger bigInteger2 = bigInteger0.abs();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 5;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 5;
      intArray0[6] = 5;
      intArray0[7] = 5;
      intArray0[8] = 5;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      int int2 = MathUtils.lcm(0, 2);
      double double0 = MathUtils.factorialLog(0);
      int int3 = MathUtils.lcm(0, 0);
      long long0 = 0L;
      long long1 = (-1629L);
      long long2 = MathUtils.mulAndCheck(0L, (-1629L));
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0), (-1663), (-1663));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-216.266), (-216.266), 762);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-216.266);
      doubleArray0[1] = (-216.266);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1542.35559797;
      doubleArray0[4] = (double) 762;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 762;
      doubleArray0[7] = (double) 762;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-216.266);
      doubleArray1[1] = 1542.35559797;
      doubleArray1[2] = 1542.35559797;
      doubleArray1[3] = 1542.35559797;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 762;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 993L);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1929;
      intArray0[2] = 2780;
      intArray0[3] = 1737;
      intArray0[4] = (-876);
      int[] intArray1 = new int[6];
      intArray1[0] = 1737;
      intArray1[1] = 2780;
      intArray1[2] = 1737;
      intArray1[3] = 2780;
      intArray1[4] = (-1438);
      intArray1[5] = 1737;
      int int0 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = MathUtils.scalb(6.0, 16);
      double double1 = MathUtils.binomialCoefficientLog(16, 16);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.flipBit(16);
      BigInteger bigInteger3 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 3524L);
      int int0 = MathUtils.indicator(16);
      int[] intArray0 = new int[8];
      intArray0[0] = 16;
      intArray0[1] = 1;
      intArray0[2] = 749;
      intArray0[3] = 16;
      intArray0[4] = 1;
      intArray0[5] = 16;
      intArray0[6] = 1;
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      boolean boolean0 = MathUtils.equals((double) 0, 1.1102230246251565E-16, 0.0);
      double double0 = MathUtils.round((double) 1L, 3373, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3373;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.indicator((double) 3373);
      double double2 = MathUtils.round((-1.0), 0);
      short short0 = MathUtils.sign((short)1469);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3373;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      int int2 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1.0));
      } catch(ArithmeticException e) {
         //
         // Array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(3768, 3768);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int1 = bigInteger0.bitCount();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)83;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 3768);
      float float0 = MathUtils.round((float) 1L, 284, 2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1371.276934);
      doubleArray0[1] = 2535.696419247189;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-68));
      boolean boolean0 = MathUtils.equals(2535.696419247189, (-1371.276934), (double) (byte) (-1));
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-68);
      intArray0[1] = 2045;
      intArray0[2] = (int) (byte) (-68);
      intArray0[3] = (int) (byte) (-68);
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = (int) (byte) (-1);
      intArray0[6] = (int) (byte) (-68);
      intArray0[7] = (int) (byte) (-1);
      int[] intArray1 = new int[1];
      intArray1[0] = (-1814);
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 302.1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 301.59289474462014;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 301.59289474462014;
      doubleArray0[4] = 301.59289474462014;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1585.02;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-25));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-87.033486637061), 0.0, 0.0);
      short short0 = MathUtils.sign((short)610);
      float float0 = MathUtils.round((float) (short)1, 772);
      int int0 = MathUtils.hash((double[]) null);
      boolean boolean1 = MathUtils.equals((-925.37942308517), 0.0);
      short short1 = MathUtils.sign((short)610);
      int int1 = MathUtils.gcd(772, 245);
      double double0 = MathUtils.round((-911.57732), (-3813));
      int int2 = MathUtils.gcd((short)1, (short)1);
      double double1 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = MathUtils.hash(1689.96);
      long long0 = MathUtils.pow(777L, 1252464499);
      long long1 = MathUtils.subAndCheck((-2605L), 743L);
      double double0 = MathUtils.normalizeAngle((-3348L), (-2395.4137140508));
      int[] intArray0 = new int[0];
      double double1 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 743L;
      doubleArray0[1] = (double) 777L;
      doubleArray0[2] = (double) 777L;
      doubleArray0[3] = (double) (-1160517812900733607L);
      doubleArray0[4] = (-2392.955833308703);
      doubleArray0[5] = (double) 1252464499;
      doubleArray0[6] = (double) 743L;
      doubleArray0[7] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.hash(1881.71107267474);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1676806786, 1676806786);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = MathUtils.indicator((-2653L));
      int int0 = 4628;
      int int1 = MathUtils.pow(4628, 14);
      int int2 = (-1633);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-2653L), (-1879048192), (-1633));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,633, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      int int0 = MathUtils.addAndCheck((-1605), (-1605));
      int int1 = 0;
      double double0 = MathUtils.factorialLog(0);
      int int2 = MathUtils.mulAndCheck((-1605), (-3210));
      long long0 = MathUtils.subAndCheck(2646L, 2646L);
      int int3 = MathUtils.addAndCheck((-3121), 9);
      double[] doubleArray0 = new double[0];
      int int4 = MathUtils.hash(doubleArray0);
      boolean boolean1 = MathUtils.equals((double) (-1605), 2914.64902361);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 2646L, 2914.64902361, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)63);
      int int0 = 0;
      float float0 = MathUtils.round((float) (byte)63, 0);
      short short0 = MathUtils.sign((short) (-3529));
      long long0 = MathUtils.pow(5656L, 0);
      int int1 = MathUtils.subAndCheck((-1744), (int) (byte)63);
      int int2 = MathUtils.addAndCheck(0, (-2136));
      long long1 = MathUtils.mulAndCheck(2930L, (long) (byte)1);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-22);
      byte byte0 = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)89;
      byte byte1 = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.abs();
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = BigInteger.ZERO;
      BigInteger bigInteger4 = bigInteger2.or(bigInteger3);
      BigInteger bigInteger5 = bigInteger0.or(bigInteger2);
      boolean boolean0 = bigInteger0.testBit((byte)114);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-92,571,870,976^-92,571,870,976)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1.0), 0.0);
      boolean boolean0 = MathUtils.equals((-1.0), 4.9E-324);
      int int0 = MathUtils.indicator((-631));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow((long) (-1), (-1402));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1,402)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      int int0 = 2264;
      int int1 = MathUtils.mulAndCheck(2264, 0);
      double double0 = MathUtils.round(0.0, 0, 0);
      long long0 = MathUtils.mulAndCheck((long) 0, 3295L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 3295L;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = 1084;
      int int3 = MathUtils.addAndCheck(1084, (-3347));
      long long1 = MathUtils.indicator(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte byte0 = bigInteger0.byteValueExact();
      // Undeclared exception!
      try { 
        bigInteger0.clearBit((-3347));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-3650L), (-156L));
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.indicator((double) 0.0F);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo((-3806L), 0.5, 1.0);
      int int1 = MathUtils.gcd((-1), (-1));
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = MathUtils.compareTo((-3806L), (-3650L), (-3806L));
      // Undeclared exception!
      try { 
        MathUtils.round((-1304.733119), (-4421), (-436));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = (-1390);
      int int1 = MathUtils.addAndCheck((-1390), (-1390));
      double double0 = MathUtils.cosh(2.2250738585072014E-308);
      float float0 = MathUtils.sign((float) (-2780));
      byte byte0 = (byte)2;
      byte byte1 = MathUtils.sign((byte)2);
      float float1 = MathUtils.indicator((float) (byte)1);
      int int2 = (-4476);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 1.0F, 0.0, (-4476));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = MathUtils.hash(1675.7661859733);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (-745248519), 0.0, (-745248519));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round(0.0, 0);
      float float0 = MathUtils.indicator(Float.NaN);
      double double1 = MathUtils.sign(0.0);
      int int1 = MathUtils.hash(1794.3442588557);
      short short0 = (short)265;
      short short1 = MathUtils.sign((short)265);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)265;
      doubleArray0[2] = (double) (short)265;
      doubleArray0[3] = (double) (-973556932);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 265.0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.indicator(968.8562321);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 968.8562321;
      doubleArray0[5] = 968.8562321;
      doubleArray0[6] = 968.8562321;
      doubleArray0[7] = 968.8562321;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 968.8562321;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray1);
      int int0 = MathUtils.indicator(1538);
      double double2 = MathUtils.distanceInf(doubleArray1, doubleArray1);
      int int1 = MathUtils.pow(67, (long) 1538);
      long long0 = MathUtils.indicator((long) 1538);
      double double3 = MathUtils.nextAfter(0.0, 968.8562321);
      double double4 = MathUtils.cosh(0.0);
      byte byte0 = MathUtils.sign((byte)121);
      int int2 = MathUtils.gcd(3651, 3651);
      float float0 = MathUtils.indicator((float) 3651);
      double double5 = MathUtils.factorialDouble(1659);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-760), 1168);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 408;
      doubleArray0[1] = (double) 408;
      doubleArray0[2] = (double) (-760);
      doubleArray0[3] = (double) (-760);
      doubleArray0[4] = (double) 1168;
      doubleArray0[5] = (-2479.2);
      doubleArray0[6] = (double) 408;
      int int1 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.round(Float.NaN, (-760));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      long long1 = MathUtils.indicator(0L);
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.sinh(1.0);
      boolean boolean0 = MathUtils.equals((double) 1L, (-2590.04250471556));
      long long2 = MathUtils.mulAndCheck((-1210L), (-957L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (-957L);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.1752011936438014;
      doubleArray0[6] = (-2590.04250471556);
      doubleArray0[7] = (double) 1L;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialDouble((byte)0);
      double double3 = MathUtils.log(1157970L, 442.790554);
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      boolean boolean1 = bigInteger0.equals(object0);
      byte byte1 = bigInteger0.byteValueExact();
      BigInteger bigInteger1 = bigInteger0.setBit((byte)0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 1669);
      double double4 = MathUtils.scalb((-2211.6360626), 1669);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = (-1652);
      int int1 = MathUtils.indicator((-1652));
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float float0 = MathUtils.sign((-778.9016F));
      short short0 = MathUtils.indicator((short) (-875));
      try { 
        MathUtils.pow((-3109L), (-935L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,109^-935)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        MathUtils.pow(0L, (-1525L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,525)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 1;
      int int1 = MathUtils.lcm(1, (-4577));
      double double0 = MathUtils.sign((double) 4577);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-4577);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-4577);
      doubleArray0[4] = (double) (-4577);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1322.4878995009;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.round(6.283185307179586, 4577);
      double double3 = MathUtils.sign(390.340865463);
      double double4 = MathUtils.binomialCoefficientLog(369, 1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 4577;
      intArray0[3] = 1;
      int[] intArray1 = new int[1];
      intArray1[0] = (-4577);
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = MathUtils.pow(2814L, 2814L);
      int int0 = MathUtils.compareTo(2814L, 0L, 2814L);
      double double0 = MathUtils.log(0, 0);
      int int1 = MathUtils.pow(0, (long) 0);
      double double1 = MathUtils.scalb(1, 0);
      int int2 = MathUtils.gcd(4194304, 4194304);
      int int3 = MathUtils.sign((-1));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 4194304;
      doubleArray0[2] = (double) (-1);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.normalizeAngle((-1.0), 0.0);
      double double4 = MathUtils.indicator(116.441662952);
      long long1 = MathUtils.mulAndCheck(2814L, (long) 4194304);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short short0 = MathUtils.indicator((short)563);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) (short)1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient((short)563, (short)563);
      boolean boolean0 = MathUtils.equals(0.0, 1.0, 1.0);
      double double1 = MathUtils.scalb(0.0, (short)1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 1359;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1359, 285);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      byte byte0 = MathUtils.indicator((byte)67);
      long long0 = MathUtils.binomialCoefficient((byte)67, (-2352));
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 1;
      int int1 = (-3165);
      MockRandom mockRandom0 = new MockRandom();
      int int2 = mockRandom0.nextInt();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-3165), mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-3629);
      int int1 = MathUtils.indicator((-3629));
      int int2 = 66;
      double double0 = MathUtils.binomialCoefficientLog(66, (-3629));
      int int3 = 753;
      int int4 = MathUtils.gcd(753, 753);
      long long0 = 39916800L;
      long long1 = MathUtils.sign(39916800L);
      double double1 = (-341.691314);
      double double2 = MathUtils.indicator((-341.691314));
      double double3 = MathUtils.factorialLog(66);
      int int5 = (-2428);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2428));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,428
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = MathUtils.pow(160, 386);
      byte byte0 = (byte)98;
      byte byte1 = MathUtils.sign((byte)98);
      int int1 = 1;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float float0 = MathUtils.sign(3352.84F);
      int int0 = MathUtils.indicator(1);
      double double0 = MathUtils.indicator((-4140.1));
      int int1 = MathUtils.compareTo(708.059270128, (-1.0), (-4.9E-324));
      short short0 = MathUtils.indicator((short) (-1287));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4.9E-324);
      doubleArray0[1] = (double) (short) (-1);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1.0));
      int int2 = MathUtils.lcm(17, (short) (-1287));
      int int3 = MathUtils.gcd(17, (short) (-1287));
      short short1 = MathUtils.sign((short) (-1134));
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) (short) (-1287);
      double double1 = MathUtils.distance(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathUtils.nextAfter(0.0, 0.0);
      float float0 = MathUtils.sign(2135.592F);
      boolean boolean0 = MathUtils.equals((double) 2135.592F, 4.9E-324, 7);
      double double1 = MathUtils.factorialDouble(1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-234));
      double double0 = MathUtils.cosh((short) (-234));
      double double1 = MathUtils.cosh((short) (-1));
      int int0 = MathUtils.compareTo((short) (-1), 2.1080396231041644E101, 889.38827712451);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.sign(0.0);
      long long0 = MathUtils.mulAndCheck((long) (byte)0, 0L);
      double double1 = MathUtils.indicator(0.0);
      boolean boolean0 = MathUtils.equals((double) 0L, (double) 0L, (-928.51));
      long long1 = MathUtils.binomialCoefficient(0, (byte)0);
      long long2 = MathUtils.indicator((long) 0);
      byte byte1 = MathUtils.indicator((byte)0);
      long long3 = MathUtils.pow(1903L, 0L);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2945.4);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = 3116;
      boolean boolean0 = MathUtils.equals((-3486.4901774054088), (-2945.4), 3116);
      int int1 = MathUtils.lcm(1047, 3116);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1047, 3116, 3262452);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 3,262,452, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1732.034545246), (-1732.034545246));
      // Undeclared exception!
      try { 
        MathUtils.factorial(35);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float float0 = MathUtils.sign((-2002.922F));
      int int0 = MathUtils.gcd((-240), (-240));
      int int1 = MathUtils.mulAndCheck(2500, (-240));
      double double0 = MathUtils.log((-2693.22725965), 0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      int int0 = MathUtils.lcm(2442, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      boolean boolean0 = MathUtils.equals((double) (short)1, (double) (short)0);
      double double0 = MathUtils.binomialCoefficientDouble((short)1, (short)0);
      long long0 = MathUtils.pow((long) (short)1, 61);
      double double1 = MathUtils.cosh((short)0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      float float0 = MathUtils.sign(0.0F);
      float float1 = MathUtils.sign(0.0F);
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.factorial(0);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = (int) (byte)0;
      intArray1[2] = (int) (byte)1;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray1, intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = (-359);
      int int1 = 0;
      double double0 = MathUtils.round((-194.5635695), (-359), 0);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      short short0 = (short)18;
      short short1 = MathUtils.sign((short)18);
      int int2 = 0;
      int int3 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.scalb((-1494.0), 66);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1085, 1085);
      long long0 = MathUtils.indicator((-2078L));
      int int1 = 1;
      double double0 = MathUtils.binomialCoefficientDouble(1, 0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = MathUtils.gcd((-1096), 0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = MathUtils.hash(1036.9781430778);
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      int int1 = MathUtils.indicator(31);
      int[] intArray0 = new int[9];
      intArray0[0] = (-557386690);
      intArray0[1] = 31;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 31;
      intArray0[5] = (-557386690);
      intArray0[6] = (-557386690);
      intArray0[7] = 31;
      intArray0[8] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = MathUtils.indicator((-554.787));
      int int0 = MathUtils.compareTo((-554.787), (-554.787), Double.NaN);
      int int1 = MathUtils.mulAndCheck(0, 0);
      int int2 = MathUtils.pow((-1), 0);
      double double1 = MathUtils.binomialCoefficientLog(1, (-1));
      boolean boolean0 = MathUtils.equals((double) 0, (double) 1);
      int int3 = (-842);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-842));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -842
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.log(2503.5621269, 0.0);
      int int0 = MathUtils.compareTo(2503.5621269, 0.0, Double.NEGATIVE_INFINITY);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      long long0 = MathUtils.mulAndCheck((long) 1, (long) 1);
      long long1 = MathUtils.mulAndCheck((long) 1, (long) 0);
      short short0 = MathUtils.sign((short)12);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (short)12;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 2503.5621269;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = 0.0;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      try { 
        MathUtils.normalizeArray(doubleArray0, 1.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 5
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float float0 = MathUtils.round((-2544.2917F), 0);
      short short0 = MathUtils.sign((short) (-1504));
      // Undeclared exception!
      try { 
        MathUtils.factorial((short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)65;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (int) (byte) (-117));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-23,038,665,228,223^-117)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sign(0.0);
      short short0 = (short) (-1);
      short short1 = MathUtils.sign((short) (-1));
      // Undeclared exception!
      try { 
        MathUtils.factorial((short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 1467;
      int int1 = (-1802);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 1467, (-1802));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,802, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-177));
      int int0 = MathUtils.compareTo((short) (-1), (short) (-1), 0.0);
      int int1 = MathUtils.subAndCheck((int) (short) (-1), (int) (short) (-1));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = MathUtils.gcd(13, 13);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-1426));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (65,536^-1,426)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(Float.NaN);
      double double0 = MathUtils.indicator((double) Float.NaN);
      int int0 = 12;
      double double1 = MathUtils.factorialLog(12);
      double double2 = MathUtils.cosh(12);
      float float2 = MathUtils.round((float) 12, 902);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.flipBit(12);
      int int1 = (-939);
      // Undeclared exception!
      try { 
        bigInteger2.setBit((-939));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = MathUtils.indicator(Double.NaN);
      double double1 = MathUtils.nextAfter(Double.NaN, 0.0);
      short short0 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 265.453325;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 3560.722341098618;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = (-1543);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-1543), 3896);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 3,896, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-118);
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = 21;
      long long0 = MathUtils.binomialCoefficient(21, (-118));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 21;
      doubleArray0[1] = (double) 21;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-118);
      doubleArray0[6] = (double) 21;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      try { 
        MathUtils.pow((-1412), (-1412));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,412^-1,412)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2369L), (-9218868437227405313L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-9218868437227405313L);
      doubleArray0[1] = (double) 9218868437227402944L;
      doubleArray0[2] = (double) (-9218868437227405313L);
      doubleArray0[3] = (double) (-2369L);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 9218868437227402944L;
      doubleArray1[1] = (double) (-2369L);
      doubleArray1[2] = (double) 9218868437227402944L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathUtils.scalb(1.0, 66);
      double double1 = MathUtils.factorialDouble(66);
      double double2 = MathUtils.binomialCoefficientLog(66, 66);
      double double3 = MathUtils.log(0.0, 5.443449390774456E92);
      int int0 = MathUtils.pow(10, 10);
      int int1 = MathUtils.addAndCheck(66, 0);
      double double4 = MathUtils.normalizeAngle(5.443449390774456E92, 66);
      int[] intArray0 = new int[0];
      double double5 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck((long) 66, (-1L));
      double double6 = MathUtils.nextAfter(1.0, 0.0);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.sign(2597L);
      int int0 = MathUtils.lcm((-692), (-692));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2597L;
      doubleArray0[1] = (double) (-692);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow(0L, (long) 692);
      double double1 = MathUtils.nextAfter(1.1102230246251565E-16, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(52, 52);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      long long1 = MathUtils.pow((long) 0, 3);
      double double0 = MathUtils.scalb(0, 3);
      long long2 = MathUtils.mulAndCheck(1L, (-1L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1L;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = 4030L;
      long long1 = MathUtils.addAndCheck(121645100408832000L, 4030L);
      int int0 = 0;
      int int1 = (-3071);
      int int2 = MathUtils.gcd(0, (-3071));
      int int3 = MathUtils.addAndCheck(0, 3071);
      int int4 = MathUtils.indicator(1);
      double double0 = MathUtils.round((double) 4030L, 1, 1);
      long long2 = MathUtils.indicator((long) 1);
      double double1 = MathUtils.sinh(4030L);
      double double2 = MathUtils.sign((double) (-3071));
      int int5 = (-2680);
      try { 
        MathUtils.pow((-3071), (-2680));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,071^-2,680)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2000.566);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.sign(1.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)10;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.indicator((-708));
      int int1 = 768;
      int int2 = MathUtils.pow(768, 0L);
      float float0 = MathUtils.sign(84.96F);
      float float1 = (-540.1F);
      int int3 = (-909);
      float float2 = MathUtils.round((-540.1F), (-909));
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-540.1F), (-708), (-909));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1190.11984089031, 1190.11984089031);
      int int0 = MathUtils.pow(0, 0);
      double double1 = MathUtils.log((-2096.516), (-2096.516));
      long long0 = MathUtils.subAndCheck((-849L), (long) 0);
      double double2 = MathUtils.scalb(Double.NaN, 1);
      double double3 = MathUtils.round(1.0, (-1));
      double double4 = MathUtils.binomialCoefficientDouble(1, (-1009));
      int int1 = MathUtils.hash((-2971.108557121936));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-849L);
      doubleArray0[1] = (-2096.516);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 3086.006548567062;
      doubleArray0[5] = (double) 1416341210;
      doubleArray0[6] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-910), (-2043));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -910
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2485L, 121645100408832000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(27L, 479001600L);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      boolean boolean0 = MathUtils.equals((-1.0), 2.0);
      long long0 = MathUtils.pow((long) (short)0, 52);
      double double0 = MathUtils.binomialCoefficientLog(1072, (short)0);
      boolean boolean1 = MathUtils.equals(0.0, (-3384.8767250741), 161);
      double double1 = MathUtils.binomialCoefficientDouble(1072, 161);
      byte byte0 = MathUtils.sign((byte)0);
      long long1 = MathUtils.subAndCheck((-1123L), 0L);
      double double2 = MathUtils.binomialCoefficientDouble((byte)0, (-1565));
      double double3 = MathUtils.factorialLog(636);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1833);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = bigInteger1.modPow(bigInteger2, bigInteger3);
      BigInteger bigInteger5 = bigInteger0.gcd(bigInteger1);
      String string0 = bigInteger1.toString(1833);
      BigInteger bigInteger6 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger7 = bigInteger0.gcd(bigInteger1);
      long long0 = (-1173L);
      try { 
        MathUtils.pow(bigInteger0, (-1173L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,173)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      float float1 = MathUtils.round(1571.6995F, 1);
      double double0 = MathUtils.normalizeAngle(674.9602024900316, 1571.7F);
      double double1 = MathUtils.nextAfter(674.9602024900316, 0.0);
      short short0 = MathUtils.sign((short)738);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(16, 20);
      long long0 = MathUtils.binomialCoefficient(20, 16);
      double double0 = MathUtils.sinh(209.6443);
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = MathUtils.compareTo(20, 16, 36);
      float float0 = MathUtils.round((float) (byte)0, 20);
      long long1 = MathUtils.mulAndCheck(0L, (long) (byte)1);
      double double1 = MathUtils.normalizeAngle(1.0, (-590.67));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float float0 = MathUtils.round(2133.744F, 0, 1);
      byte byte0 = MathUtils.indicator((byte)11);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2435.0);
      doubleArray0[1] = 2239.282;
      doubleArray0[2] = 1079.7359673799754;
      doubleArray0[3] = 586.7525733;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(261.01F);
      long long0 = MathUtils.pow(2562L, 1888);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(329, 329);
      long long0 = MathUtils.subAndCheck((long) 329, (long) 329);
      int int0 = MathUtils.compareTo(387.913858333098, 0.0, 1.0);
      double double1 = MathUtils.factorialDouble(1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1245;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.sign(1);
      int int3 = MathUtils.mulAndCheck(1, (-516));
      long long1 = MathUtils.sign((-973L));
      double double2 = MathUtils.sign(387.913858333098);
      int int4 = MathUtils.addAndCheck(1691, 1765);
      int[] intArray1 = new int[6];
      intArray1[0] = 299;
      intArray1[1] = (-516);
      intArray1[2] = 1;
      intArray1[3] = 1245;
      intArray1[4] = (-516);
      intArray1[5] = 1;
      double double3 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4522.75165606374;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.sign((long) 66916153);
      int int1 = MathUtils.sign(66916153);
      byte byte0 = MathUtils.indicator((byte) (-103));
      long long1 = MathUtils.subAndCheck((long) 1, (long) (byte) (-1));
      int int2 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals((double) (byte) (-1), (-1.0), (double) 2L);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int3 = MathUtils.addAndCheck(0, 66916153);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 2389;
      int int1 = MathUtils.pow(2389, 575L);
      boolean boolean0 = MathUtils.equals(2.0, (-1037.259));
      long long0 = MathUtils.sign((-1795L));
      long long1 = MathUtils.pow((-1795L), 0);
      int int2 = MathUtils.indicator(0);
      int int3 = MathUtils.gcd(0, 0);
      long long2 = MathUtils.pow((-1L), 0);
      int int4 = (-403);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-403), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -403, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-7));
      byte byte1 = MathUtils.indicator((byte) (-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      int int0 = bigInteger0.compareTo(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger1.divideAndRemainder(bigInteger0);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(991, 1108);
      long long0 = MathUtils.pow((-1521L), 991);
      int int1 = MathUtils.mulAndCheck(1108, (-117));
      long long1 = MathUtils.subAndCheck((long) (-117), 6836143638016000751L);
      long long2 = MathUtils.factorial(0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 3958, 0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.nextAfter(180.666806304295, 0.0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      short short0 = MathUtils.sign((short)750);
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.scalb(0, 1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (short)1;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(2746, 2746);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 1133);
      boolean boolean0 = MathUtils.equals((-443.069753), (-443.069753));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-443.069753);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.sign(0.0);
      long long0 = MathUtils.addAndCheck(0L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = MathUtils.pow(2, (long) 2);
      short short0 = MathUtils.sign((short)0);
      int int1 = MathUtils.lcm(1634, 2);
      double double0 = MathUtils.scalb(1865.8290547135, (-2597));
      double double1 = MathUtils.round((double) (short)0, 297);
      int int2 = MathUtils.pow(1106, (int) (short)0);
      double double2 = MathUtils.indicator((-40.07525));
      short short1 = MathUtils.sign((short)0);
      double double3 = MathUtils.sign(1865.8290547135);
      int int3 = MathUtils.sign(2);
      int[] intArray0 = new int[1];
      intArray0[0] = 3229;
      int int4 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float float0 = (-3136.0F);
      float float1 = MathUtils.sign((-3136.0F));
      int int0 = MathUtils.lcm(84, 1);
      boolean boolean0 = MathUtils.equals((double) 84, (-1675.24358462), 84);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-522));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -522
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1034), 5);
      int int1 = MathUtils.lcm(1905, (-294));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 572.7656969649896;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-231.49);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)52);
      int int1 = MathUtils.pow(20, 1633L);
      double double1 = MathUtils.factorialDouble((short)52);
      int int2 = MathUtils.pow(1981, 0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 4194304);
      double double0 = MathUtils.scalb(4194304, 0);
      byte byte0 = MathUtils.sign((byte)0);
      double double1 = MathUtils.factorialDouble(1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 4194304.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 4194304.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 4194304.0);
      short short0 = MathUtils.sign((short)0);
      int int1 = MathUtils.addAndCheck(0, 0);
      int int2 = MathUtils.sign((-622));
      long long0 = MathUtils.sign(0L);
      int int3 = MathUtils.sign(19);
      float float0 = MathUtils.sign(208.2575F);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.nextAfter(3626.6178, 3626.6178);
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      int int2 = (-593);
      int int3 = MathUtils.addAndCheck((-593), 0);
      float float0 = MathUtils.round((float) (-593), (-593));
      int int4 = (-134);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-134), (-839));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -134
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = (-3373);
      int int1 = MathUtils.indicator((-3373));
      float float0 = MathUtils.round((float) (-1), (-1));
      int int2 = 5;
      try { 
        MathUtils.pow(5, (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (5^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1726.0), (-787.1137135697893), (-787.1137135697893));
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1201;
      intArray0[3] = 474;
      intArray0[4] = (-288);
      intArray0[5] = 61;
      intArray0[6] = 622;
      intArray0[7] = (-1);
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 1201;
      intArray1[4] = (-1);
      intArray1[5] = 61;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      int int0 = (-1897);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1897));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,897
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float float0 = MathUtils.sign((-373.0F));
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.pow(21L, 1241);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-798), 1030);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1030;
      doubleArray0[1] = (double) (-1828);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.sign(0.0);
      int int1 = MathUtils.subAndCheck(619, 1030);
      double double2 = MathUtils.sinh(0.0);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 2510);
      boolean boolean0 = MathUtils.equals(0.0, (double) 0);
      double double0 = MathUtils.factorialDouble(14);
      int int1 = MathUtils.compareTo(4.9E-324, 2510, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      short short0 = MathUtils.sign((short)0);
      boolean boolean1 = MathUtils.equals((double) (-1), 0.0, 0.0);
      int int2 = MathUtils.addAndCheck((int) (short)0, 14);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      int int0 = MathUtils.indicator(1);
      int int1 = MathUtils.pow(0, 0L);
      long long0 = MathUtils.factorial((byte)0);
      int int2 = MathUtils.sign(1);
      double double0 = MathUtils.binomialCoefficientLog((byte)1, 1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1356.735668076889;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[3] = 10.0;
      int int3 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.sign((short) (byte)1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = MathUtils.pow(2814L, 2814L);
      int int0 = MathUtils.compareTo(2814L, 0L, 2814L);
      double double0 = MathUtils.log(0, 0);
      int int1 = MathUtils.pow(0, (long) 0);
      int int2 = MathUtils.gcd(4194304, 4194304);
      int int3 = MathUtils.sign((-1));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 4194304;
      doubleArray0[2] = (double) (-1);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.normalizeAngle((-1.0), 0.0);
      double double3 = MathUtils.indicator(116.441662952);
      int int4 = MathUtils.indicator((-1));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(540, 0);
      int int1 = MathUtils.hash(0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3672.09;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)108);
      int int2 = MathUtils.mulAndCheck((-456), (-1212));
      int int3 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2613));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,613
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.shiftRight(2104);
      BigInteger bigInteger3 = bigInteger0.modPow(bigInteger1, bigInteger1);
      int int0 = bigInteger0.signum();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.indicator((-1119.0F));
      short short0 = MathUtils.indicator((short) (-1186));
      double double0 = MathUtils.scalb(2.2250738585072014E-308, 1426);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1699);
      int int0 = (-2642);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2642), (-2642));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,642
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 3736.070610661);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 115.42;
      doubleArray0[1] = 3736.070610661;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3736.070610661;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 115.42;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      int int0 = MathUtils.pow(0, (long) 0);
      int int1 = MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.sinh((-2722.0));
      int int0 = MathUtils.compareTo(0.0, Double.NEGATIVE_INFINITY, (-1.0));
      long long0 = MathUtils.subAndCheck(0L, 0L);
      float float0 = MathUtils.round((float) 0L, 3073);
      boolean boolean0 = MathUtils.equals(0.0, Double.POSITIVE_INFINITY, 3073);
      double double1 = MathUtils.round(Double.NEGATIVE_INFINITY, 3073, 1);
      int[] intArray0 = new int[2];
      intArray0[0] = 3073;
      intArray0[1] = 1;
      double double2 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.sign(0);
      int int1 = MathUtils.gcd(0, 142);
      boolean boolean0 = MathUtils.equals(480.9230335528, 1.1102230246251565E-16, 497);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathUtils.scalb((-1074.467658396), 10);
      double double1 = MathUtils.sign((double) 10);
      long long0 = MathUtils.subAndCheck((long) 10, 2091L);
      float float0 = MathUtils.indicator((-1.0F));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathUtils.round((-1050.421983), 1, 0);
      long long0 = MathUtils.sign((long) 1);
      int int0 = MathUtils.subAndCheck(0, 1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-1050.421983);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.indicator((-1.0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = MathUtils.gcd(1852, (-1596));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1886L, 0L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1886L;
      doubleArray0[1] = (double) 1886L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash((double) 0L);
      double double1 = MathUtils.factorialDouble(0);
      int int1 = MathUtils.pow(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1), 12);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 12
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2494.5326;
      doubleArray0[3] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1707, (-1));
      int int0 = MathUtils.lcm((-1), (-1));
      double double1 = MathUtils.round(2506.7896564826815, 0);
      long long0 = MathUtils.factorial(0);
      double double2 = MathUtils.normalizeAngle(5007.637511815248, (-1));
      boolean boolean0 = MathUtils.equals((double) (-1), 0.0);
      int int1 = MathUtils.mulAndCheck(0, 1707);
      short short0 = MathUtils.sign((short)1);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1707;
      intArray0[3] = (int) (short)1;
      intArray0[4] = 0;
      intArray0[5] = 1707;
      intArray0[6] = 0;
      intArray0[7] = 1707;
      intArray0[8] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 2389;
      int int1 = MathUtils.pow(2389, 575L);
      boolean boolean0 = MathUtils.equals(2.0, (-1037.259));
      long long0 = MathUtils.sign((-1795L));
      long long1 = MathUtils.pow((-1795L), 0);
      int int2 = MathUtils.indicator(0);
      int int3 = 0;
      int int4 = MathUtils.gcd(0, 0);
      long long2 = MathUtils.pow((-1L), 0);
      int int5 = (-403);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-403), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -403, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = 1729.57;
      double double2 = 0.0;
      boolean boolean0 = MathUtils.equals((-4.9E-324), 1729.57, 0.0);
      int int0 = MathUtils.pow(0, (long) 0);
      double double3 = MathUtils.factorialDouble(1128);
      float float0 = MathUtils.indicator((float) 1128);
      double double4 = MathUtils.cosh((-4.9E-324));
      double double5 = MathUtils.log(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1128;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 118.26128653001);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 21;
      int int1 = MathUtils.addAndCheck(21, 21);
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, (double) 42, (double) 21);
      int int2 = MathUtils.hash((double) 42);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2381);
      intArray0[1] = 42;
      int int3 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.round((float) (-2381), (-2381));
      double double0 = MathUtils.sign(1.1102230246251565E-16);
      long long0 = MathUtils.mulAndCheck((-1L), (long) (-2381));
      short short0 = (short)1582;
      short short1 = MathUtils.sign((short)1582);
      double double1 = MathUtils.cosh(Float.NaN);
      short short2 = MathUtils.indicator((short)1582);
      int int4 = MathUtils.pow((int) (short)1, (long) (short)1);
      float float1 = MathUtils.sign((float) 2381L);
      int int5 = 45;
      double double2 = MathUtils.binomialCoefficientLog(45, (-2381));
      int int6 = (-1072);
      float float2 = MathUtils.round((float) 1, (-1072));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.remainder(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.modInverse(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger0.flipBit((-2381));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = MathUtils.gcd(975, 61);
      float float0 = MathUtils.sign((-1020.001F));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1020.001F);
      doubleArray0[2] = (double) 975;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-1.0F);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)124);
      int int1 = MathUtils.addAndCheck(61, (int) (byte)124);
      long long1 = MathUtils.addAndCheck(0L, (long) 61);
      long long2 = MathUtils.indicator((long) (byte)124);
      double double1 = MathUtils.sinh(0.0);
      int int2 = MathUtils.hash(0.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-282.1084));
      try { 
        MathUtils.pow(17, (-1532L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (17^-1,532)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      float float0 = MathUtils.indicator(0.0F);
      double double0 = MathUtils.nextAfter(1L, 1L);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.mulAndCheck(4503599627370496L, 0L);
      int int0 = MathUtils.compareTo((-1.0), 1.0000000000000002, 0L);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = MathUtils.indicator(0);
      double double5 = MathUtils.round(3385.0, (-4004));
      double double6 = MathUtils.distance(intArray0, intArray0);
      double double7 = MathUtils.sinh((-1.0));
      int int2 = MathUtils.subAndCheck(0, 20);
      float float1 = MathUtils.sign((float) 0);
      float float2 = MathUtils.round((float) 0, 0);
      boolean boolean1 = MathUtils.equals(0.0, 0.0, 249);
  }
}
