/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 13:40:50 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ComponentSampleModel;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.EventListener;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.DebugGraphics;
import javax.swing.JComponent;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.multi.MultiTreeUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.MarkerAxisBand;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.axis.Timeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.UnitType;
import org.jfree.data.RangeType;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "135";
      stringArray0[1] = "135";
      stringArray0[2] = "";
      stringArray0[3] = "135";
      stringArray0[4] = "135";
      stringArray0[5] = "135";
      stringArray0[6] = "135";
      SymbolAxis symbolAxis0 = new SymbolAxis("135", stringArray0);
      double double0 = symbolAxis0.calculateHighestVisibleTickValue();
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(symbolAxis0, (-4175.885271544), (-4175.885271544), 0.05, 85.2124, symbolAxis0.DEFAULT_AXIS_LABEL_FONT);
      symbolAxis0.setMarkerBand(markerAxisBand0);
      symbolAxis0.setAutoTickUnitSelection(true, false);
      symbolAxis0.setLabelAngle(1.0);
      String[] stringArray1 = symbolAxis0.getSymbols();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@c,w%?6";
      stringArray0[1] = "@c,w%?6";
      stringArray0[2] = "@c,w%?6";
      stringArray0[3] = "@c,w%?6";
      stringArray0[4] = "@c,w%?6";
      stringArray0[5] = "@c,w%?6";
      SymbolAxis symbolAxis0 = new SymbolAxis("@c,w%?6", stringArray0);
      PeriodAxis periodAxis0 = new PeriodAxis("@c,w%?6");
      RegularTimePeriod regularTimePeriod0 = periodAxis0.getFirst();
      symbolAxis0.setGridBandPaint(periodAxis0.DEFAULT_TICK_MARK_PAINT);
      DateAxis dateAxis0 = new DateAxis();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      dateAxis0.setUpArrow(line2D_Float0);
      Date date0 = dateAxis0.getMaximumDate();
      Font font0 = dateAxis0.getTickLabelFont();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("N?JnJH;o&=m");
      subCategoryAxis0.setLabel((String) null);
      TickUnitSource tickUnitSource0 = DateAxis.createStandardDateTickUnits();
      boolean boolean0 = subCategoryAxis0.isTickMarksVisible();
      Stroke stroke0 = subCategoryAxis0.getAxisLineStroke();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.2, 3.0);
      cyclicNumberAxis0.setAxisLineVisible(false);
      cyclicNumberAxis0.setBoundMappedToLastCycle(false);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("N?JnJH;o&=m");
      logarithmicAxis0.setFixedAutoRange((-180.0));
      logarithmicAxis0.setFixedAutoRange(629.9);
      logarithmicAxis0.zoomRange(1.5707963267948966, 1.5707963267948966);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("N?JnJH;o&=m");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "Gv>";
      PeriodAxis periodAxis0 = new PeriodAxis("Gv>");
      Plot plot0 = null;
      periodAxis0.setPlot((Plot) null);
      periodAxis0.setTickMarksVisible(false);
      Class<String> class0 = String.class;
      periodAxis0.setMinorTickTimePeriodClass(class0);
      periodAxis0.setAutoTickUnitSelection(true, true);
      // Undeclared exception!
      try { 
        periodAxis0.setTickLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2804.376636739, 3052.89818, "yFGS");
      Paint paint0 = cyclicNumberAxis0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      RectangleInsets rectangleInsets0 = dateAxis0.getLabelInsets();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("wy'F4");
      String string0 = "zHozdm3((Xv3C<";
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("zHozdm3((Xv3C<", piePlot3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-1873), (-1873), (double) 0.0F, (-467.47477681), chartRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Width (-1873) and height (-1873) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelURL("oz)eMkN,a");
      categoryAxis3D0.setUpperMargin(5.0);
      float float0 = categoryAxis3D0.getMaximumCategoryLabelWidthRatio();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.setLabelToolTip("S35zwA|%)MRru8");
      periodAxis0.setVisible(false);
      periodAxis0.setMinorTickMarkInsideLength(0.0F);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      boolean boolean0 = logarithmicAxis0.getAutoRangeNextLogFlag();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      extendedCategoryAxis0.setAxisLineStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      extendedCategoryAxis0.removeCategoryLabelToolTip(2.0F);
      extendedCategoryAxis0.addSubLabel(logarithmicAxis0.DEFAULT_TICK_UNIT, "");
      String string0 = logarithmicAxis0.makeTickLabel(0.05);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1657.797351), 2.0F);
      cyclicNumberAxis0.setAdvanceLinePaint(extendedCategoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      cyclicNumberAxis0.setBoundMappedToLastCycle(true);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart("0", waferMapPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 12, (double) 0.0F, (-1715.849106491), chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Point point0 = new Point(500, 10);
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle2D rectangle2D0 = extendedCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1607.0F, 3479.5F, (-257.88837F), 2037.724F);
      Rectangle2D rectangle2D1 = rectangle2D_Float0.createIntersection(rectangle0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(2929);
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.draw(graphics2D0, 2.302585092994046, rectangle2D0, rectangle2D1, rectangleEdge0, (PlotRenderingInfo) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Value");
      Graphics2D graphics2D0 = null;
      double double0 = (-12.0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      extendedCategoryAxis0.setVisible(false);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      boolean boolean0 = true;
      Rectangle2D rectangle2D0 = extendedCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0, true, true);
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      rectangle0.setFrame(0.0, 0.0, (-2916.995322270843), 0.0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      EntityCollection entityCollection0 = null;
      chartRenderingInfo0.clear();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.findSubplot((PlotRenderingInfo) null, (Point2D) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "ud%+O[X-uSi|2y}_2r";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      timeZone0.setID("ud%+O[X-uSi|2y}_2r");
      String string1 = timeZone0.getDisplayName();
      int int0 = timeZone0.getOffset(900000L);
      DateAxis dateAxis0 = new DateAxis("ud%+O[X-uSi|2y}_2r", timeZone0);
      Timeline timeline0 = dateAxis0.getTimeline();
      Font font0 = dateAxis0.getLabelFont();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 0, "");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.05);
      String string2 = numberTickUnit0.valueToString(0.05);
      SymbolAxis symbolAxis0 = null;
      try {
        symbolAxis0 = new SymbolAxis("", (String[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("2n4G9shS:");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DrawingSupplier drawingSupplier0 = defaultPolarItemRenderer0.getDrawingSupplier();
      thermometerPlot0.setDrawingSupplier((DrawingSupplier) null);
      thermometerPlot0.setOutlineVisible(false);
      boolean boolean0 = extendedCategoryAxis0.equals(thermometerPlot0);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(extendedCategoryAxis0);
      extendedCategoryAxis0.notifyListeners(axisChangeEvent0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4253.58775, (-1467.65), "");
      double double0 = (-3340.722);
      JInternalFrame jInternalFrame0 = new JInternalFrame("BAOa7V(s~Bd;u>CQNX>");
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      JDesktopPane jDesktopPane0 = jInternalFrame_JDesktopIcon0.getDesktopPane();
      CompoundBorder compoundBorder0 = new CompoundBorder();
      TitledBorder titledBorder0 = null;
      try {
        titledBorder0 = new TitledBorder(compoundBorder0, "", 1800, 1800, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT);
      } catch(IllegalArgumentException e) {
         //
         // 1800 is not a valid title justification.
         //
         verifyException("javax.swing.border.TitledBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1956.0992964699), (-3229.6452458085046), "SansSerif");
      cyclicNumberAxis0.setTickMarkOutsideLength(0.0F);
      boolean boolean0 = cyclicNumberAxis0.isBoundMappedToLastCycle();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0, 0.0, "org.jfree.chart.axis.Axis");
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'c' argument.");
      cyclicNumberAxis0.setTickMarkStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      cyclicNumberAxis0.setFixedDimension((-3993.967740897082));
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      cyclicNumberAxis0.setLabel("org.jfree.chart.axis.Axis");
      int int0 = zoneInfo0.getOffset((long) 500);
      int int1 = zoneInfo0.getOffset(0L);
      cyclicNumberAxis0.setAutoRangeIncludesZero(false);
      periodAxis0.setTimeZone(zoneInfo0);
      cyclicNumberAxis0.setAdvanceLinePaint(periodAxis0.DEFAULT_TICK_MARK_PAINT);
      float float0 = periodAxis0.getMinorTickMarkInsideLength();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(":N87z}");
      double double0 = logarithmicAxis0.computeLogCeil(1.0E-8);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("`(");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.05);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Paint paint0 = meterPlot0.getDialOutlinePaint();
      Font font0 = new Font("1@o<5c", 10, 10);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'insets' argument.", font0, meterPlot0, true);
      meterPlot0.removeChangeListener(jFreeChart0);
      extendedCategoryAxis0.setTickLabelPaint((Comparable) "`(", (Paint) null);
      extendedCategoryAxis0.addSubLabel("`(", "4Pe8&#mx/.3m~$3-");
      Paint paint1 = extendedCategoryAxis0.getTickLabelPaint((Comparable) 1.0F);
      Stroke stroke0 = extendedCategoryAxis0.getTickMarkStroke();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DateTickUnit dateTickUnit0 = new DateTickUnit(0, 0);
      Font font0 = categoryAxis0.getTickLabelFont((Comparable) dateTickUnit0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setNegativeArrowVisible(true);
      logarithmicAxis0.setStrictValuesFlag(false);
      categoryAxis0.setLabelToolTip("");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis(":");
      Paint paint0 = numberAxis0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryPlot categoryPlot0 = ganttRenderer0.getPlot();
      subCategoryAxis0.addChangeListener((AxisChangeListener) null);
      boolean boolean0 = subCategoryAxis0.equals(ganttRenderer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2374.09587, 0.0, "");
      cyclicNumberAxis0.setPeriod(10);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.computeLogCeil(501.58253);
      int int0 = subCategoryAxis0.getMaximumCategoryLabelLines();
      CategoryAnchor categoryAnchor0 = CategoryAnchor.END;
      int int1 = 0;
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JSpinner jSpinner0 = new JSpinner();
      DebugGraphics debugGraphics1 = new DebugGraphics(debugGraphics0, jSpinner0);
      SystemColor systemColor0 = SystemColor.textHighlightText;
      Color color0 = Color.blue;
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(500, systemColor0, (Color) null, color0, color0);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jSpinner0, (Border) softBevelBorder0, 500, 1, 10, 500);
      // Undeclared exception!
      try { 
        debugGraphics1.getClipBounds(rectangle0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateAxis dateAxis0 = new DateAxis("q;Z", timeZone0);
      boolean boolean0 = dateAxis0.equals(timeZone0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(500, (-3821), 500);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 500
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "'@km_F~";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1326.29), (-1326.29), "'@km_F~");
      String string1 = cyclicNumberAxis0.getLabel();
      int int0 = 0;
      Day day0 = null;
      try {
        day0 = new Day(0, 0, 0);
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(109.33890248875969);
      double double0 = cyclicNumberAxis0.getOffset();
      String string0 = cyclicNumberAxis0.getLabelToolTip();
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, cyclicNumberAxis0.DEFAULT_RANGE);
      double double1 = (-225.27);
      Button button0 = null;
      try {
        button0 = new Button((String) null);
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "org.jfree.chart.axis.DateAxis";
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.axis.DateAxis");
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      dateAxis0.setTickLabelInsets(rectangleInsets0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      dateAxis0.setTickUnit(dateTickUnit0, false, false);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 4);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, dateAxis0, dateAxis0, highLowRenderer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("!T9;dWd/");
      logarithmicAxis0.setStrictValuesFlag(true);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 1880.622473811, 1880.622473811, 2.302585092994046, 1880.622473811);
      logarithmicAxis0.setTickLabelInsets(rectangleInsets0);
      logarithmicAxis0.setAllowNegativesFlag(false);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("F8WaXO'Mb0n0!7l7si");
      categoryAxis3D0.setAxisLineVisible(true);
      float float0 = categoryAxis3D0.getTickMarkInsideLength();
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("Null 'paint' argument.", (Plot) null);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'c' argument.");
      categoryAxis0.setCategoryLabelPositionOffset(4785);
      categoryAxis0.setLabel("org.jfree.data.xy.XYBarDataset");
      Object object0 = categoryAxis0.clone();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'c' argument.");
      Object object1 = categoryAxis3D0.clone();
      categoryAxis3D0.setLabelInsets(categoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.setAllowNegativesFlag(true);
      double double0 = logarithmicAxis0.adjustedPow10(1333.205813849171);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5114.306321065, 0.0);
      RangeType rangeType0 = cyclicNumberAxis0.getRangeType();
      cyclicNumberAxis0.setLabel("Null 'stroke' argument.");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      int int0 = 0;
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 0.0F, (double) 2.0F, 3.141592653589793);
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      Font font0 = categoryAxis0.DEFAULT_AXIS_LABEL_FONT.deriveFont(0, affineTransform1);
      categoryAxis0.setLabelFont(font0);
      DateAxis dateAxis0 = new DateAxis();
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(500, 814, 0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0, 1.0);
      cyclicNumberAxis0.setTickLabelsVisible(true);
      double double0 = cyclicNumberAxis0.getCycleBound();
      double double1 = cyclicNumberAxis0.getFixedDimension();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      String[] stringArray1 = symbolAxis0.getSymbols();
      String[] stringArray2 = symbolAxis0.getSymbols();
      boolean boolean0 = symbolAxis0.isTickLabelsVisible();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-1), 0);
      } catch(IllegalArgumentException e) {
         //
         // Width (-1) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "Requires StatisticalCategoryDataset.";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Requires StatisticalCategoryDataset.");
      Object object0 = subCategoryAxis0.clone();
      subCategoryAxis0.setTickLabelPaint((Comparable) "Requires StatisticalCategoryDataset.", (Paint) null);
      Paint paint0 = subCategoryAxis0.getTickLabelPaint((Comparable) "Requires StatisticalCategoryDataset.");
      boolean boolean0 = subCategoryAxis0.isAxisLineVisible();
      Graphics2D graphics2D0 = null;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 2.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      float[][] floatArray1 = new float[0][8];
      ValueAxis valueAxis0 = null;
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray1, (ValueAxis) null, (ValueAxis) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'domainAxis' argument.
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-119.21776), (-119.21776), "Null 'font' argument.");
      cyclicNumberAxis0.resizeRange(3.0);
      double double0 = cyclicNumberAxis0.getLabelAngle();
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.setID("Null 'font' argument.");
      DateAxis dateAxis0 = new DateAxis("Null 'font' argument.", timeZone0);
      dateAxis0.setTickLabelFont(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT);
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      int int0 = cyclicNumberAxis0.calculateVisibleTickCount();
      cyclicNumberAxis0.setAdvanceLinePaint(dateAxis0.DEFAULT_AXIS_LINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      Plot plot0 = null;
      cyclicNumberAxis0.setPlot((Plot) null);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Zoom_In");
      double double0 = 0.0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2.0F;
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, (RenderingHints) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 500;
      intArray0[1] = (-1849);
      intArray0[2] = 500;
      ComponentSampleModel componentSampleModel0 = null;
      try {
        componentSampleModel0 = new ComponentSampleModel(82, 500, (-536), (-1849), 500, intArray0, intArray0);
      } catch(IllegalArgumentException e) {
         //
         // Width (500) and height (-536) must be > 0
         //
         verifyException("java.awt.image.SampleModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Second second0 = new Second();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("&J,;-QQ$_iml", regularTimePeriod0, second0);
      periodAxis0.configure();
      Object object0 = periodAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      float float0 = dateAxis0.getTickMarkOutsideLength();
      String string0 = "Null 'stroke' argument.";
      Year year0 = new Year(dateAxis0.DEFAULT_ANCHOR_DATE);
      Calendar calendar0 = MockCalendar.getInstance();
      long long0 = year0.getMiddleMillisecond(calendar0);
      Locale locale0 = JComponent.getDefaultLocale();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Paint paint0 = areaRenderer0.getSeriesFillPaint(500);
      // Undeclared exception!
      try { 
        dateAxis0.setTickLabelPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1501.9093), 714.69436, "");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(0.05);
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1148.860049, false, customXYToolTipGenerator0);
      XYURLGenerator xYURLGenerator0 = candlestickRenderer0.getURLGenerator(10, 500);
      xYBoxAndWhiskerRenderer0.setBaseURLGenerator((XYURLGenerator) null);
      Paint paint0 = xYBoxAndWhiskerRenderer0.getArtifactPaint();
      cyclicNumberAxis0.setTickLabelPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "qK6Xa\"Yv|#HfPu1V7U";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("qK6Xa\"Yv|#HfPu1V7U");
      logarithmicAxis0.setTickMarksVisible(true);
      // Undeclared exception!
      try { 
        logarithmicAxis0.setTickUnit((NumberTickUnit) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'unit' argument.
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1028.70092244273, 1028.70092244273);
      cyclicNumberAxis0.setTickMarkInsideLength((-479.6046F));
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      LegendItemCollection legendItemCollection0 = stackedAreaRenderer0.getLegendItems();
      Paint paint0 = stackedAreaRenderer0.getBaseItemLabelPaint();
      cyclicNumberAxis0.setLabelPaint(paint0);
      cyclicNumberAxis0.setAxisLineStroke(stackedAreaRenderer0.DEFAULT_STROKE);
      boolean boolean0 = cyclicNumberAxis0.isAxisLineVisible();
      DateAxis dateAxis0 = new DateAxis();
      int int0 = (-1371);
      int int1 = 0;
      int int2 = 63;
      int int3 = 0;
      // Undeclared exception!
      try { 
        DateFormat.getDateInstance(63);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 63
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1563.36735519, "Null 'state' argument.");
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Stroke stroke0 = areaRenderer0.getItemStroke(500, 0);
      cyclicNumberAxis0.advanceLineStroke = stroke0;
      cyclicNumberAxis0.setUpperMargin(1563.36735519);
      cyclicNumberAxis0.setAxisLineVisible(false);
      cyclicNumberAxis0.setAxisLineVisible(true);
      cyclicNumberAxis0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Date date0 = dateAxis0.getMaximumDate();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CategoryPlot categoryPlot0 = stackedAreaRenderer0.getPlot();
      boolean boolean0 = dateAxis0.hasListener((EventListener) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      stackedAreaRenderer0.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      stringArray0[1] = null;
      stringArray0[2] = null;
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      String string0 = symbolAxis0.valueToString(0.05);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, "90");
      cyclicNumberAxis0.setTickLabelsVisible(true);
      boolean boolean1 = cyclicNumberAxis0.isBoundMappedToLastCycle();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      Minute minute0 = new Minute(date0);
      long long0 = minute0.getMiddleMillisecond();
      Second second0 = new Second(12, minute0);
      long long1 = second0.getSerialIndex();
      Second second1 = Second.parseSecond("O0lr'^,UV");
      periodAxis0.setLast(second0);
      cyclicNumberAxis0.setAdvanceLinePaint(categoryPlot0.DEFAULT_OUTLINE_PAINT);
      periodAxis0.setMinorTickMarkInsideLength(1.0F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("Null 'insets' argument.");
      dateAxis0.setTickLabelsVisible(true);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0, (String) null);
      cyclicNumberAxis0.setBoundMappedToLastCycle(true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(535.642072097138, "zYR)4n\"](N4Jq9~");
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setTickMarkPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'paint' argument.");
      boolean boolean0 = extendedCategoryAxis0.isTickLabelsVisible();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(4296, "Null 'paint' argument.", 4296, 4296, 4296, 4296, (-3108), 0, 4296, 0, 0, (-3108), 4296);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 4296
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate((-1), 0, 0);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0);
      regularTimePeriod0.peg(mockGregorianCalendar0);
      long long0 = regularTimePeriod0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      RegularTimePeriod regularTimePeriod1 = week0.previous();
      long long1 = regularTimePeriod0.getLastMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("", regularTimePeriod0, regularTimePeriod0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.NEGATIVE_INFINITY);
      int int1 = cyclicNumberAxis0.calculateVisibleTickCount();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("#s#)i[S", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, (Plot) null, true);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "";
      PeriodAxis periodAxis0 = new PeriodAxis("");
      LookupTable lookupTable0 = null;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0);
      float float0 = cyclicNumberAxis0.getTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1181.686), 0.0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      Stroke stroke0 = stackedAreaRenderer0.lookupSeriesOutlineStroke(10);
      cyclicNumberAxis0.setAdvanceLineStroke(stroke0);
      cyclicNumberAxis0.setUpperMargin(0.0);
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      String string0 = numberTickUnit0.valueToString(0.05);
      cyclicNumberAxis0.setTickUnit(numberTickUnit0, false, false);
      DateAxis dateAxis0 = new DateAxis("R!5WfJ&I\"'uKt8o>)[");
      Date date0 = dateAxis0.getMinimumDate();
      CategoryAxis categoryAxis0 = new CategoryAxis("0");
      int int0 = categoryAxis0.getMaximumCategoryLabelLines();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(1284.508);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      JTree jTree0 = new JTree((TreeNode) null, true);
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      TreePath treePath0 = synthTreeUI0.getPathForRow(jTree0, 10);
      // Undeclared exception!
      try { 
        multiTreeUI0.getPathBounds(jTree0, (TreePath) null);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = null;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      XYToolTipGenerator xYToolTipGenerator0 = null;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = null;
      try {
        timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, (String) null, (String) null, (String) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.urls.TimeSeriesURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("r*JNxv1");
      logarithmicAxis0.centerRange(0.0);
      Color color0 = Color.blue;
      logarithmicAxis0.setAxisLinePaint(color0);
      logarithmicAxis0.zoomRange((-180.0), (-180.0));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "r*JNxv1";
      stringArray0[1] = "r*JNxv1";
      stringArray0[2] = "r*JNxv1";
      stringArray0[3] = "r*JNxv1";
      stringArray0[4] = "r*JNxv1";
      stringArray0[5] = "r*JNxv1";
      stringArray0[6] = "r*JNxv1";
      stringArray0[7] = "r*JNxv1";
      stringArray0[8] = "r*JNxv1";
      SymbolAxis symbolAxis0 = new SymbolAxis("r*JNxv1", stringArray0);
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(500);
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jDesktopPane0, 366, (-1093), (-1093), 366);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("r*JNxv1");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CrosshairState crosshairState0 = new CrosshairState(false);
      Point2D point2D0 = crosshairState0.getAnchor();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.findSubplot(plotRenderingInfo0, (Point2D) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }
}
