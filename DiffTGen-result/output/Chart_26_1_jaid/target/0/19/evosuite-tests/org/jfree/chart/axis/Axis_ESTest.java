/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 13:40:50 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ICC_Profile;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.math.BigInteger;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import java.time.temporal.TemporalAmount;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.JList;
import javax.swing.JTabbedPane;
import javax.swing.JTree;
import javax.swing.plaf.basic.BasicListUI;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.plaf.multi.MultiTabbedPaneUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickMarkPosition;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.StandardTickUnitSource;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnit;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.RangeType;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.DateRange;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".qLZ-3}d\"O[,_";
      stringArray0[1] = ".qLZ-3}d\"O[,_";
      SymbolAxis symbolAxis0 = new SymbolAxis(".qLZ-3}d\"O[,_", stringArray0);
      boolean boolean0 = true;
      symbolAxis0.setAutoRangeMinimumSize(0.005, true);
      // Undeclared exception!
      try { 
        symbolAxis0.setTickLabelPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = null;
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Stroke stroke0 = candlestickRenderer0.getItemOutlineStroke(0, 1866);
      categoryAxis3D0.setTickMarkStroke(stroke0);
      Object object0 = categoryAxis3D0.clone();
      Week week0 = Week.parseWeek((String) null);
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis((String) null, (RegularTimePeriod) null, (RegularTimePeriod) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SansSerif";
      SymbolAxis symbolAxis0 = new SymbolAxis("sc]SoU>g4xg-p0", stringArray0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.axis.PeriodAxis");
      extendedCategoryAxis0.setCategoryLabelPositionOffset(0);
      Paint paint0 = symbolAxis0.getAxisLinePaint();
      symbolAxis0.setAxisLineVisible(true);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      numberFormat0.setMaximumIntegerDigits((-1));
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-2025.185556862675), numberFormat0);
      symbolAxis0.setTickUnit(numberTickUnit0);
      Color color0 = (Color)XYLine3DRenderer.DEFAULT_WALL_PAINT;
      symbolAxis0.setTickLabelPaint(color0);
      Plot plot0 = extendedCategoryAxis0.getPlot();
      extendedCategoryAxis0.setLabelPaint(color0);
      TimeZone timeZone0 = TimeZone.getDefault();
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("Null 'insets' argument.", (RegularTimePeriod) null, (RegularTimePeriod) null, timeZone0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      Paint paint0 = numberAxis0.getTickMarkPaint();
      numberAxis0.setUpperBound(355.4);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(500, 5416.62501);
      numberAxis0.setNumberFormatOverride((NumberFormat) null);
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(500, "", 0, 0, 1845, (-2395), 0, 400, (-2395), (-204), 0, 10, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 400
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = null;
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      int int0 = zoneInfo0.getOffset(2678400000L);
      TickUnitSource tickUnitSource0 = DateAxis.createStandardDateTickUnits((TimeZone) zoneInfo0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setSubLabelPaint(categoryAxis0.DEFAULT_TICK_MARK_PAINT);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.setHorizontalAlignment(0);
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setLabelPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      Month month0 = new Month();
      Date date0 = month0.getEnd();
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'paint' argument.", month0, month0);
      Stroke stroke0 = periodAxis0.getMinorTickMarkStroke();
      boolean boolean0 = periodAxis0.isTickLabelsVisible();
      Font font0 = periodAxis0.getLabelFont();
      SymbolAxis symbolAxis0 = null;
      try {
        symbolAxis0 = new SymbolAxis("Null 'paint' argument.", (String[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.setLabel("EN>~wXViQh;*OZI(Q");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Period period0 = Period.ofDays(1600);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      long long0 = period0.toTotalMonths();
      ChronoLocalDate chronoLocalDate0 = localDate0.minus((TemporalAmount) period0);
      boolean boolean0 = categoryAxis3D0.equals(chronoLocalDate0);
      NumberAxis numberAxis0 = new NumberAxis("f~0xv.?Y>l)");
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) categoryAxis3D0;
      objectArray0[1] = (Object) synthTreeUI0;
      objectArray0[2] = (Object) localDate0;
      objectArray0[3] = (Object) isoChronology0;
      JTree jTree0 = new JTree(objectArray0);
      TreePath treePath0 = jTree0.getLeadSelectionPath();
      Rectangle rectangle0 = synthTreeUI0.getPathBounds(jTree0, (TreePath) null);
      int int0 = synthTreeUI0.getAccessibleChildrenCount(jTree0);
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      // Undeclared exception!
      try { 
        numberAxis0.java2DToValue((-3158.7), (Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("oY");
      PiePlot piePlot0 = new PiePlot();
      Stroke stroke0 = piePlot0.getLabelLinkStroke();
      categoryAxis0.setAxisLineStroke(stroke0);
      categoryAxis0.setCategoryMargin(1.0E-7);
      CategoryLabelPositions categoryLabelPositions0 = categoryAxis0.getCategoryLabelPositions();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("oY");
      subCategoryAxis0.setLabelInsets(piePlot0.DEFAULT_INSETS);
      // Undeclared exception!
      try { 
        subCategoryAxis0.setSubLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'state' argument.");
      TextBox textBox0 = new TextBox("Null 'state' argument.");
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      extendedCategoryAxis0.setLabelInsets(rectangleInsets0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.2, "Null 'state' argument.");
      double double0 = cyclicNumberAxis0.getCycleBound();
      String string0 = "";
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(true, (OHLCDataItem[]) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getXDate(0, (-3143));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "Chart_Properties";
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      boolean boolean0 = stackedBarRenderer3D0.equals(defaultKeyedValues2DDataset0);
      stackedBarRenderer3D0.setDrawBarOutline(true);
      Range range0 = stackedBarRenderer3D0.findRangeBounds(defaultKeyedValues2DDataset0);
      defaultKeyedValues2DDataset0.setValue(1927.2086498957, (Comparable) 3.0, (Comparable) "Chart_Properties");
      ModuloAxis moduloAxis0 = new ModuloAxis("Chart_Properties", (Range) null);
      Paint paint0 = stackedBarRenderer3D0.lookupSeriesOutlinePaint(500);
      PolarPlot polarPlot0 = new PolarPlot();
      moduloAxis0.addChangeListener(polarPlot0);
      // Undeclared exception!
      try { 
        moduloAxis0.resizeRange(1115.9733776792, 2.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "wQSd6qb1";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("wQSd6qb1");
      boolean boolean0 = logarithmicAxis0.getExpTickLabelsFlag();
      logarithmicAxis0.setTickMarkOutsideLength(0.0F);
      String string1 = null;
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      int int0 = 0;
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge(0);
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.createLabel(true, 0.0F, rectangleEdge0, (Graphics2D) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.G2TextMeasurer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis3D0);
      categoryAxis3D0.notifyListeners(axisChangeEvent0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Be34M:iJA");
      int[] intArray0 = new int[5];
      intArray0[0] = 336;
      intArray0[1] = 500;
      intArray0[2] = (-1055);
      intArray0[3] = 0;
      intArray0[4] = 336;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)23;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 336, intArray0, 2, 500, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "]d&@`qeK~";
      stringArray0[1] = "]d&@`qeK~";
      stringArray0[2] = "]d&@`qeK~";
      stringArray0[3] = "]d&@`qeK~";
      stringArray0[4] = "]d&@`qeK~";
      stringArray0[5] = "]d&@`qeK~";
      stringArray0[6] = "]d&@`qeK~";
      SymbolAxis symbolAxis0 = new SymbolAxis("]d&@`qeK~", stringArray0);
      Stroke stroke0 = symbolAxis0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2996.15602183, (String) null);
      cyclicNumberAxis0.setTickMarkInsideLength((-1147.0F));
      String string0 = cyclicNumberAxis0.getLabel();
      cyclicNumberAxis0.setVisible(false);
      Font font0 = TextFragment.DEFAULT_FONT;
      cyclicNumberAxis0.setLabelFont(font0);
      CategoryAxis categoryAxis0 = new CategoryAxis("The 'week' argument must be in the range 1 - 53.");
      double double0 = categoryAxis0.getLowerMargin();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "The 'week' argument must be in the range 1 - 53.";
      stringArray0[5] = null;
      stringArray0[6] = "The 'week' argument must be in the range 1 - 53.";
      SymbolAxis symbolAxis0 = new SymbolAxis("The 'week' argument must be in the range 1 - 53.", stringArray0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(500, 500, 0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(500, "");
      symbolAxis0.setLabelURL("");
      NumberFormat numberFormat0 = cyclicNumberAxis0.getNumberFormatOverride();
      symbolAxis0.setNumberFormatOverride((NumberFormat) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      boolean boolean0 = symbolAxis0.equals(combinedDomainCategoryPlot0);
      String string0 = cyclicNumberAxis0.getLabelURL();
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      Graphics2D graphics2D0 = null;
      BasicListUI basicListUI0 = new BasicListUI();
      Stack<SubCategoryAxis> stack0 = new Stack<SubCategoryAxis>();
      JList<SubCategoryAxis> jList0 = new JList<SubCategoryAxis>(stack0);
      // Undeclared exception!
      try { 
        basicListUI0.getCellBounds(jList0, 6, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicListUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      ModuloAxis moduloAxis0 = new ModuloAxis("IN\u0000?aTKQt", (Range) null);
      moduloAxis0.setAutoTickIndex(0);
      moduloAxis0.setAxisLineVisible(true);
      StandardTickUnitSource standardTickUnitSource0 = new StandardTickUnitSource();
      Range range1 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      TickUnit tickUnit0 = standardTickUnitSource0.getCeilingTickUnit((TickUnit) moduloAxis0.DEFAULT_TICK_UNIT);
      // Undeclared exception!
      try { 
        moduloAxis0.estimateMaximumTickLabelWidth((Graphics2D) null, tickUnit0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      Range range0 = stackedBarRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      Paint paint0 = moduloAxis0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "org.jfree.chart.plot.CategoryPlot");
      cyclicNumberAxis0.resizeRange(0.0, 0.0);
      cyclicNumberAxis0.setAutoTickUnitSelection(false, true);
      boolean boolean0 = cyclicNumberAxis0.isTickMarksVisible();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.plot.CategoryPlot");
      double double0 = logarithmicAxis0.computeLogCeil(0.0);
      String string0 = logarithmicAxis0.getLabel();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "");
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      Date date0 = segmentedTimeline0.getDate((-1788L));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 2.5E11, (-26.7058531), (-1788L), 3.0, 2.5E11);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 3114.84045673, 0.05, 0.0, (-3335.86887756224), 1736.283683364);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, (-1788L), 0.0, 0.0, (-2208988800000L), (-26.7058531));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 3600000L, 0.05, (-1788L), 0.05, (-3335.86887756224));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, 900000L, 0.0, 3.0, (-1788L), 0.0);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(0.05, oHLCDataItemArray0);
      boolean boolean0 = cyclicNumberAxis0.hasListener(defaultOHLCDataset0);
      boolean boolean1 = cyclicNumberAxis0.isAxisLineVisible();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("", regularTimePeriod0, month0);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("M}l\"}$K>Kf;(O\"Ma%", true, 0.05, 500);
      categoryPointerAnnotation0.setArrowLength(1.5707963267948966);
      Font font0 = categoryPointerAnnotation0.getFont();
      periodAxis0.setTickLabelFont(font0);
      boolean boolean0 = periodAxis0.isVisible();
      periodAxis0.configure();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = 0.0;
      long long0 = regularTimePeriod0.getLastMillisecond();
      MultiTabbedPaneUI multiTabbedPaneUI0 = new MultiTabbedPaneUI();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(500, (-1477), 273, (-1477), 273);
      month0.peg(mockGregorianCalendar0);
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      // Undeclared exception!
      try { 
        multiTabbedPaneUI0.getTabBounds(jTabbedPane0, 500);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Quarter quarter0 = new Quarter();
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      String string0 = regularTimePeriod0.toString();
      String string1 = categoryAxis3D0.getCategoryLabelToolTip(regularTimePeriod0);
      Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
      categoryAxis3D0.setTickLabelFont(font0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Q2/2014");
      double double0 = 0.0;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      // Undeclared exception!
      try { 
        Plot.resolveRangeAxisLocation(axisLocation0, (PlotOrientation) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      String string0 = numberAxis0.getLabelToolTip();
      DateAxis dateAxis0 = new DateAxis();
      Graphics2D graphics2D0 = null;
      char[] charArray0 = new char[0];
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 2.0F, 0.05, 5.0E8, (double) 2.0F);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext(affineTransform0, (Object) null, extendedCategoryAxis0);
      } catch(IllegalArgumentException e) {
         //
         // AA hint:null
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      combinedDomainCategoryPlot0.clearDomainMarkers(500);
      moduloAxis0.removeChangeListener(combinedDomainCategoryPlot0);
      moduloAxis0.resizeRange(232.92271026409406);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'insets' argument.");
      boolean boolean0 = logarithmicAxis0.getExpTickLabelsFlag();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("kEuI1J>*_Z$Nt$a");
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getTickPaint();
      subCategoryAxis0.setTickMarkPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1939.18);
      Locale locale0 = new Locale("", "ZY4omuVrA", "");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits(locale0);
      cyclicNumberAxis0.setLabelToolTip("");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = ">He'B':k9Y~i|K";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(">He'B':k9Y~i|K");
      logarithmicAxis0.smallLogFlag = false;
      logarithmicAxis0.setLog10TickLabelsFlag(false);
      DateAxis dateAxis0 = new DateAxis(">He'B':k9Y~i|K");
      dateAxis0.setRange(logarithmicAxis0.DEFAULT_RANGE);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(">He'B':k9Y~i|K");
      categoryAxis3D0.setTickMarksVisible(false);
      categoryAxis3D0.setUpperMargin(0.05);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(500, (-864), 500);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 500
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.setLabel("");
      Class class0 = periodAxis0.getAutoRangeTimePeriodClass();
      periodAxis0.setFixedAutoRange((-2287.9018419));
      periodAxis0.setLabelURL("cw31_o9}($1qRNXf");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("6~&F{&6");
      boolean boolean0 = logarithmicAxis0.getLog10TickLabelsFlag();
      DateAxis dateAxis0 = new DateAxis("");
      dateAxis0.setRange(0.05, 2554.76);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'font' argument.");
      boolean boolean1 = extendedCategoryAxis0.equals((Object) null);
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 500);
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 500
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("L4fuu}r6wNv,");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      periodAxis0.setLabelPaint(color0);
      Paint paint0 = periodAxis0.getMinorTickMarkPaint();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      int int0 = categoryAxis0.getMaximumCategoryLabelLines();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("org.jfree.data.resources.DataPackageResources");
      numberAxis0.configure();
      boolean boolean0 = numberAxis0.isTickLabelsVisible();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<CombinedRangeCategoryPlot> class0 = CombinedRangeCategoryPlot.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      numberAxis0.setAutoRangeIncludesZero(true);
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.data.resources.DataPackageResources", fixedMillisecond0, fixedMillisecond0);
      periodAxis0.setFirst(fixedMillisecond0);
      periodAxis0.setMinorTickMarksVisible(true);
      DateAxis dateAxis0 = new DateAxis((String) null);
      boolean boolean1 = dateAxis0.equals("org.jfree.data.resources.DataPackageResources");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "org.jfree.chart.block.AbstractBlock";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.chart.block.AbstractBlock");
      double double0 = 236.30740593;
      subCategoryAxis0.setFixedDimension(236.30740593);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      int int0 = (-1505);
      Font font0 = defaultPolarItemRenderer0.getSeriesItemLabelFont((-1505));
      // Undeclared exception!
      try { 
        subCategoryAxis0.setLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1371.0), (-1371.0), "B/*3F");
      cyclicNumberAxis0.setRange((-1371.0), (-1371.0));
      boolean boolean0 = cyclicNumberAxis0.isAdvanceLineVisible();
      PeriodAxis periodAxis0 = new PeriodAxis("%|j4Ud#A<K8rh:@P8");
      Class class0 = periodAxis0.getMajorTickTimePeriodClass();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis((-2141.702317135937));
      RangeType rangeType0 = cyclicNumberAxis1.getRangeType();
      cyclicNumberAxis0.setRangeType(rangeType0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Null 'stroke' argument.";
      stringArray0[1] = "CONTRACT";
      stringArray0[2] = "Null 'stroke' argument.";
      stringArray0[3] = "Null 'stroke' argument.";
      stringArray0[4] = "%|j4Ud#A<K8rh:@P8";
      periodAxis0.setLabelFont(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT);
      stringArray0[5] = "B/*3F";
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'stroke' argument.", stringArray0);
      String string0 = symbolAxis0.valueToString(500);
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("5*");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getPlotArea();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(1);
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.calculateCategorySize(500, (Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(millisecond0.DEFAULT_TIME_ZONE);
      millisecond0.peg(mockGregorianCalendar0);
      Date date0 = millisecond0.getEnd();
      PeriodAxis periodAxis0 = new PeriodAxis("", millisecond0, millisecond0, millisecond0.DEFAULT_TIME_ZONE);
      PeriodAxisLabelInfo[] periodAxisLabelInfoArray0 = periodAxis0.getLabelInfo();
      DateAxis dateAxis0 = new DateAxis("");
      dateAxis0.setInverted(false);
      Date date1 = dateAxis0.getMinimumDate();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("3]w");
      Paint paint0 = subCategoryAxis0.getSubLabelPaint();
      Font font0 = subCategoryAxis0.getTickLabelFont((Comparable) true);
      dateAxis0.setVerticalTickLabels(true);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.05);
      cyclicNumberAxis0.setLabelFont(dateAxis0.DEFAULT_TICK_LABEL_FONT);
      cyclicNumberAxis0.setAdvanceLinePaint(dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
      dateAxis0.setMaximumDate(date0);
      int int0 = 1299;
      MultiListUI multiListUI0 = new MultiListUI();
      JList<Integer> jList0 = new JList<Integer>();
      // Undeclared exception!
      try { 
        multiListUI0.getCellBounds(jList0, 0, 1318);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Paint paint0 = dateAxis0.getAxisLinePaint();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "]";
      stringArray0[1] = "]";
      stringArray0[2] = "]";
      SymbolAxis symbolAxis0 = new SymbolAxis("]", stringArray0);
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((String) null, symbolAxis0.DEFAULT_AXIS_LABEL_FONT, (Plot) null, true);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("%");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, (-1020.45276F), (-667.1066F), 0.0F);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge();
      // Undeclared exception!
      try { 
        categoryAxis3D0.drawAxisLine((Graphics2D) null, 0.0F, rectangle2D_Float0, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis(".lc ");
      ModuloAxis moduloAxis0 = new ModuloAxis(".lc ", dateAxis0.DEFAULT_DATE_RANGE);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(6237.997809382682, numberFormat0);
      moduloAxis0.setTickMarkInsideLength((-1574.4F));
      moduloAxis0.setTickUnit(numberTickUnit0);
      moduloAxis0.resizeRange((double) 2.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.6428571428571429);
      cyclicNumberAxis0.setAdvanceLineVisible(false);
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(500, second0);
      PeriodAxis periodAxis0 = new PeriodAxis("DatasetRenderingOrder.FORWARD", millisecond0, second0, second0.DEFAULT_TIME_ZONE);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
      cyclicNumberAxis0.setPlot(spiderWebPlot0);
      Class<PiePlot> class0 = PiePlot.class;
      periodAxis0.setMajorTickTimePeriodClass(class0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 2.0);
      Paint paint0 = cyclicNumberAxis0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("N>p><2l%");
      periodAxis0.setTickMarksVisible(false);
      PeriodAxisLabelInfo[] periodAxisLabelInfoArray0 = periodAxis0.getLabelInfo();
      Stroke stroke0 = periodAxis0.getTickMarkStroke();
      String string0 = "Null 'insets' argument.";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Null 'insets' argument.");
      numberAxis3D0.configure();
      Graphics2D graphics2D0 = null;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      int int0 = plotRenderingInfo0.getSubplotIndex(point2D_Double0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        numberAxis3D0.draw((Graphics2D) null, 0.0, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      Range range0 = meterPlot0.getRange();
      dateAxis0.setRange(range0, true, true);
      Font font0 = dateAxis0.getTickLabelFont();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      float float0 = categoryAxis0.getMaximumCategoryLabelWidthRatio();
      ModuloAxis moduloAxis0 = new ModuloAxis("vcoXkI>;eTXjP=xNt9e", range0);
      moduloAxis0.resizeRange(0.05);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Graphics2D graphics2D0 = null;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      // Undeclared exception!
      try { 
        dateAxis0.drawTickMarksAndLabels((Graphics2D) null, 0.2, rectangle2D0, rectangle2D_Float0, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      thermometerPlot0.setOutlineStroke(basicStroke0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      float float0 = valueAxis0.getTickMarkInsideLength();
      boolean boolean0 = valueAxis0.isVisible();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Font font0 = defaultPolarItemRenderer0.getBaseItemLabelFont();
      DecimalFormatSymbols decimalFormatSymbols0 = null;
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("Null 'paint' argument.", (DecimalFormatSymbols) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "/Qy7^R1(iV'PI oU4c");
      DateAxis dateAxis0 = new DateAxis("V[O\"iCvc|<7,", simpleTimeZone0);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      RectangleInsets rectangleInsets0 = categoryMarker0.getLabelOffset();
      dateAxis0.setTickLabelInsets(rectangleInsets0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("Null 'name' argument.");
      double double0 = dateAxis0.getFixedDimension();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0);
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[7];
      int int0 = 0;
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("I^W*1fgZwm");
      String string0 = categoryAxis3D0.getCategoryLabelToolTip("I^W*1fgZwm");
      float float0 = categoryAxis3D0.getTickMarkInsideLength();
      Graphics2D graphics2D0 = null;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(1);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("baseTimeline is not aligned", regularTimePeriod0, regularTimePeriod0);
      periodAxis0.setMinorTickMarksVisible(true);
      long long0 = regularTimePeriod0.getFirstMillisecond();
      DateAxis dateAxis0 = new DateAxis("");
      String string0 = "org.jfree.chart.axis.Axis";
      ModuloAxis moduloAxis0 = new ModuloAxis("org.jfree.chart.axis.Axis", dateAxis0.DEFAULT_RANGE);
      moduloAxis0.setUpperBound(0.05);
      int int0 = moduloAxis0.calculateVisibleTickCount();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Class class0 = periodAxis0.getMajorTickTimePeriodClass();
      categoryAxis0.setLabelURL("@@<=6x.e6gg2]h!uN6");
      Object object0 = moduloAxis0.clone();
      int int1 = 3309;
      int[] intArray0 = new int[0];
      BigInteger bigInteger0 = BigInteger.ZERO;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 3309, intArray0, 3309, 381, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-1.0), "org.jfree.chart.axis.Axis");
      String string0 = "cK^";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("cK^");
      double double0 = categoryAxis3D0.getLowerMargin();
      String string1 = null;
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      MockDate mockDate0 = new MockDate(0, (-1), 6, 0, 0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Date date0 = dateTickUnit0.rollDate((Date) mockDate0, timeZone0);
      Hour hour0 = null;
      try {
        hour0 = new Hour(date0, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("h.nh4.E4q6j7&kT{_");
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      Color color0 = Color.getColor("h.nh4.E4q6j7&kT{_", (Color) systemColor0);
      categoryAxis0.setTickLabelPaint((Comparable) "h.nh4.E4q6j7&kT{_", (Paint) systemColor0);
      categoryAxis0.setLabelAngle(255.0);
      categoryAxis0.setTickLabelsVisible(false);
      categoryAxis0.setCategoryLabelPositionOffset(0);
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.configure();
      TimeZone timeZone0 = TimeZone.getDefault();
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      Date date0 = dateAxis0.getMaximumDate();
      DateTickMarkPosition dateTickMarkPosition0 = dateAxis0.getTickMarkPosition();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.autoAdjustRange();
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2.0F;
      floatArray0[1] = 2.0F;
      floatArray0[2] = (float) 500;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 500;
      Kernel kernel0 = new Kernel(0, 500, floatArray0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", thermometerPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1407, 500, chartRenderingInfo0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, 2);
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (2) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("k%K~TM}hI8S");
      periodAxis0.setMinorTickMarkInsideLength(2005.0F);
      Class class0 = periodAxis0.getMajorTickTimePeriodClass();
      boolean boolean0 = periodAxis0.equals(class0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?uC~z[O++y}o/x";
      stringArray0[1] = "k%K~TM}hI8S";
      stringArray0[2] = "k%K~TM}hI8S";
      stringArray0[3] = "k%K~TM}hI8S";
      stringArray0[4] = "vv:5NK9TXfw`";
      stringArray0[5] = "vv:5NK9TXfw`";
      stringArray0[6] = "k%K~TM}hI8S";
      SymbolAxis symbolAxis0 = new SymbolAxis("vv:5NK9TXfw`", stringArray0);
      double double0 = (-706.2348632981);
      periodAxis0.setLabel("{0");
      double[] doubleArray0 = new double[0];
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "Null 'stroke' argument.";
      TimeZone timeZone0 = TimeZone.getDefault();
      DateAxis dateAxis0 = new DateAxis("Null 'stroke' argument.", timeZone0);
      // Undeclared exception!
      try { 
        dateAxis0.setRange((-3578.0), (-3578.0));
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3671.0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RectangleInsets rectangleInsets0 = categoryPlot0.getAxisOffset();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      categoryPlot0.setRangeAxes(valueAxisArray0);
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      BasicTreeUI.NodeDimensionsHandler basicTreeUI_NodeDimensionsHandler0 = metalTreeUI0.new NodeDimensionsHandler();
      int int0 = (-2089);
      Rectangle rectangle0 = basicTreeUI_NodeDimensionsHandler0.getNodeDimensions(rectangleInsets0, (-2089), 10, true, (Rectangle) null);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      // Undeclared exception!
      try { 
        rectangleInsets0.createAdjustedRectangle((Rectangle2D) null, lengthAdjustmentType0, lengthAdjustmentType0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }
}
