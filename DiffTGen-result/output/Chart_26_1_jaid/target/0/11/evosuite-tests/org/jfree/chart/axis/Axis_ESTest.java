/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 13:36:36 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.event.ContainerListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.awt.image.RescaleOp;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.sql.Connection;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.time.ZoneId;
import java.util.Date;
import java.util.EventListener;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.DebugGraphics;
import javax.swing.JRadioButton;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.GridArrangement;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(885.9682884845, 885.9682884845);
      String string0 = cyclicNumberAxis0.getLabel();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Yg~zJ/SQ>(bj");
      boolean boolean0 = extendedCategoryAxis0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      MockDate mockDate0 = (MockDate)DateAxis.DEFAULT_ANCHOR_DATE;
      dateAxis0.setMinimumDate(mockDate0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("(xetP^>%064+]G;,", regularTimePeriod0, regularTimePeriod0, regularTimePeriod0.DEFAULT_TIME_ZONE);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 500;
      floatArray0[1] = 2.0F;
      float[] floatArray1 = new float[0];
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Wk_OmtPQPmc&|}OlF", dateAxis0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray1, renderingHints0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(500, 2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      float float0 = categoryAxis0.getTickMarkInsideLength();
      DateAxis dateAxis0 = new DateAxis("aDNi_N");
      Range range0 = dateAxis0.getRange();
      Object object0 = dateAxis0.clone();
      DateTickUnit dateTickUnit0 = new DateTickUnit(0, 0);
      dateAxis0.setTickUnit(dateTickUnit0, true, true);
      dateAxis0.setLabelInsets(categoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      TimeZone timeZone0 = TimeZone.getDefault();
      Frame frame0 = null;
      try {
        frame0 = new Frame();
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          NumberAxis3D numberAxis3D0 = new NumberAxis3D();
          boolean boolean0 = numberAxis3D0.isTickMarksVisible();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
          SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
          BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
          byte[] byteArray0 = new byte[9];
          byteArray0[0] = (byte)0;
          byteArray0[1] = (byte) (-102);
          byteArray0[2] = (byte) (-43);
          byteArray0[3] = (byte)0;
          byteArray0[4] = (byte) (-16);
          byteArray0[5] = (byte)12;
          byteArray0[6] = (byte) (-52);
          byteArray0[7] = (byte)107;
          byteArray0[8] = (byte)10;
          int int0 = bufferedInputStream0.read(byteArray0, (int) (byte)0, 0);
          // Undeclared exception!
          try { 
            Font.createFont(500, (InputStream) bufferedInputStream0);
          } catch(IllegalArgumentException e) {
             //
             // font format not recognized
             //
             verifyException("java.awt.Font", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Stroke stroke0 = spiderWebPlot0.getBaseSeriesOutlineStroke();
      cyclicNumberAxis0.advanceLineStroke = stroke0;
      cyclicNumberAxis0.setBoundMappedToLastCycle(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Null 'font' argument.";
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'font' argument.", stringArray0);
      symbolAxis0.setGridBandsVisible(true);
      symbolAxis0.setTickMarksVisible(true);
      double double0 = 255.0;
      JFreeChart jFreeChart0 = new JFreeChart("Null 'font' argument.", symbolAxis0.DEFAULT_TICK_LABEL_FONT, spiderWebPlot0, false);
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JRadioButton jRadioButton0 = new JRadioButton();
      DebugGraphics debugGraphics1 = new DebugGraphics(debugGraphics0, jRadioButton0);
      // Undeclared exception!
      try { 
        debugGraphics1.getClipBounds();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2332.19495989742), (-2332.19495989742));
      cyclicNumberAxis0.setLabelToolTip((String) null);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      double double0 = logarithmicAxis0.computeLogCeil(2.5);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("qIpk&4W-i0*6");
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-1.0), (-2332.19495989742), 0.0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 669);
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 669
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "SansSerif";
      ModuloAxis moduloAxis0 = new ModuloAxis("SansSerif", (Range) null);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      int int0 = 0;
      moduloAxis0.setFixedDimension((double) stackedAreaRenderer0.ZERO);
      moduloAxis0.setDownArrow(stackedAreaRenderer0.DEFAULT_SHAPE);
      Stroke stroke0 = stackedAreaRenderer0.getSeriesStroke(0);
      // Undeclared exception!
      try { 
        moduloAxis0.setAxisLineStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(253.39, 253.39);
      double double0 = 1.0E-5;
      boolean boolean0 = false;
      RingPlot ringPlot0 = new RingPlot();
      Stroke stroke0 = ringPlot0.getSectionOutlineStroke(true);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setTickMarkStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "W]";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("W]");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      subCategoryAxis0.removeChangeListener(thermometerPlot0);
      subCategoryAxis0.addSubCategory("W]");
      subCategoryAxis0.setTickLabelPaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1490.332192), 1394.23977115, "W]");
      cyclicNumberAxis0.setAdvanceLineStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      PeriodAxis periodAxis0 = new PeriodAxis("W]");
      Day day0 = null;
      try {
        day0 = new Day((SerialDate) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'serialDate' argument.
         //
         verifyException("org.jfree.data.time.Day", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.addSubCategory("");
      subCategoryAxis0.setLabelURL("}!`j!O8N");
      boolean boolean0 = subCategoryAxis0.equals("");
      Comparable<ThermometerPlot> comparable0 = null;
      float float0 = 0.0F;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("}!`j!O8N", (Plot) null);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'paint' argument.");
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      categoryAxis3D0.setPlot(spiderWebPlot0);
      double double0 = categoryAxis3D0.getCategoryMargin();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Null 'paint' argument.";
      stringArray0[1] = "Null 'paint' argument.";
      stringArray0[2] = "Null 'paint' argument.";
      stringArray0[3] = "Null 'paint' argument.";
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'paint' argument.", stringArray0);
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation(500);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      // Undeclared exception!
      try { 
        symbolAxis0.refreshTicksHorizontal(graphics2D0, (Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1027.104132979, 3.0);
      Locale locale0 = Locale.JAPAN;
      cyclicNumberAxis0.setAutoRange(false, false);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      cyclicNumberAxis0.setNumberFormatOverride(numberFormat0);
      cyclicNumberAxis0.setAxisLineVisible(true);
      Stroke stroke0 = cyclicNumberAxis0.getAxisLineStroke();
      String string0 = "";
      MockDate mockDate0 = new MockDate(0L);
      Year year0 = new Year(mockDate0);
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(0, year0);
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Nwv");
      Color color0 = DebugGraphics.flashColor();
      numberAxis3D0.setVisible(false);
      float[] floatArray0 = color0.getComponents((float[]) null);
      numberAxis3D0.setTickMarkPaint(color0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Nwv");
      subCategoryAxis0.setLowerMargin(0.05);
      subCategoryAxis0.setSubLabelPaint(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      double double0 = numberAxis3D0.calculateLowestVisibleTickValue();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Nwv";
      stringArray0[1] = "Nwv";
      stringArray0[2] = "Nwv";
      stringArray0[3] = "Nwv";
      stringArray0[4] = "Nwv";
      stringArray0[5] = "Nwv";
      stringArray0[6] = "Nwv";
      stringArray0[7] = "Nwv";
      stringArray0[8] = "Unknown data";
      SymbolAxis symbolAxis0 = new SymbolAxis("Nwv", stringArray0);
      Graphics2D graphics2D0 = null;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      float float0 = categoryAxis0.getTickMarkOutsideLength();
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      double double0 = (-2502.289);
      JTableHeader jTableHeader0 = new JTableHeader();
      int int0 = 0;
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryPlot categoryPlot0 = ganttRenderer0.getPlot();
      GridArrangement gridArrangement0 = new GridArrangement(10, 10);
      BlockContainer blockContainer0 = new BlockContainer();
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("", categoryAxis0.DEFAULT_TICK_LABEL_FONT, (Plot) null, true);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ZOOM_RESET_RANGE");
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 2.0F;
      doubleArray1[1] = 0.05;
      doubleArray1[2] = (double) 2.0F;
      doubleArray1[3] = (double) 2.0F;
      doubleArray1[4] = 0.2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.2;
      doubleArray2[1] = 0.2;
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = (double) 0.0F;
      doubleArray2[4] = (double) 0.0F;
      doubleArray2[5] = 0.2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.05;
      doubleArray3[1] = 0.05;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (double) 2.0F;
      doubleArray4[1] = (double) 2.0F;
      doubleArray4[2] = 0.2;
      doubleArray4[3] = 0.2;
      doubleArray4[4] = 0.2;
      doubleArray4[5] = (double) 0.0F;
      doubleArray4[6] = (double) 2.0F;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultIntervalCategoryDataset0);
      Paint paint0 = spiderWebPlot0.getLabelPaint();
      subCategoryAxis0.setTickMarkPaint(paint0);
      Paint paint1 = subCategoryAxis0.getTickLabelPaint((Comparable) "ZOOM_RESET_RANGE");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateFormat dateFormat0 = dateAxis0.getDateFormatOverride();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      Object object0 = logarithmicAxis0.clone();
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'state' argument.");
      CategoryAnchor categoryAnchor0 = CategoryAnchor.END;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0, 2.0F, 2.0F, 0.8F);
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      Rectangle rectangle0 = new Rectangle(dimension1);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.createUnion(rectangle0);
      double double0 = categoryAxis0.getCategoryJava2DCoordinate(categoryAnchor0, 0, 0, rectangle2D0, (RectangleEdge) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, 0, "");
      double double1 = cyclicNumberAxis0.getCycleBound();
      TickUnitSource tickUnitSource0 = NumberAxis.createStandardTickUnits();
      categoryAxis0.setTickLabelPaint(dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1109.169), "");
      NumberTickUnit numberTickUnit0 = cyclicNumberAxis0.getTickUnit();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.remove(containerListener0, containerListener0);
      ContainerListener containerListener2 = AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      boolean boolean0 = categoryAxis3D0.hasListener((EventListener) null);
      categoryAxis3D0.setMaximumCategoryLabelLines(10);
      NumberFormat numberFormat0 = cyclicNumberAxis0.getNumberFormatOverride();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      boolean boolean1 = logarithmicAxis0.getAllowNegativesFlag();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("}!80jhGwwQCMQJ$%9~8");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(dateAxis0);
      JFreeChart jFreeChart0 = axisChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      dateAxis0.setTickMarksVisible(false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      double double0 = dateAxis0.valueToJava2D(891.7947420061, rectangle0, (RectangleEdge) null);
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      String string0 = categoryAxis0.getCategoryLabelToolTip(680);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      Object object0 = cyclicNumberAxis0.clone();
      cyclicNumberAxis0.setAutoTickUnitSelection(false, false);
      cyclicNumberAxis0.setAutoRangeMinimumSize(2858.723069, false);
      cyclicNumberAxis0.setAutoRangeStickyZero(true);
      cyclicNumberAxis0.setTickMarkInsideLength((-1602.0F));
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      int int0 = (-636);
      MockDate mockDate0 = new MockDate(5, 6, (-636), (-636), 3, (-1856));
      Date date0 = dateTickUnit0.rollDate((Date) mockDate0);
      int int1 = (-2908);
      int int2 = (-7);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2908), "", (-1314), 500, 2, 1300, 4, 4, 3, (-1751), 12, (-7), (-1557));
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1314
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "org.jfree.chart.renderer.category.AreaRenderer");
      SystemColor systemColor0 = SystemColor.activeCaption;
      cyclicNumberAxis0.setAxisLinePaint(systemColor0);
      cyclicNumberAxis0.setFixedAutoRange(0.0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("org.jfree.chart.renderer.category.AreaRenderer");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(2485.185567602885, choiceFormat0);
      cyclicNumberAxis0.setTickUnit(numberTickUnit0);
      cyclicNumberAxis0.centerRange(0.0);
      String string0 = "o_[(6b+y>h^'";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-240), "Null 'stroke' argument.", 0, 44, 0, (-1880), 2755, 500, (-1880), 0, (-1712), 0, 10);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -1880
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = null;
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      int int0 = 1601;
      byte[] byteArray0 = null;
      int int1 = 4;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1275, 1601, (byte[]) null, 1601, false, 4);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = (-451.0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-451.0), "@");
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null);
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 0.0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1889.8325), 0.0);
      Locale locale0 = new Locale("K&kc;5%g+9*/R0Q<4g<", "K&kc;5%g+9*/R0Q<4g<", "K&kc;5%g+9*/R0Q<4g<");
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits(locale0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      String string0 = zoneId0.toString();
      cyclicNumberAxis0.setLowerBound((-1889.8325));
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("Null 'paint' argument.", (RegularTimePeriod) null, (RegularTimePeriod) null, timeZone0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 334.11356174873794);
      String string0 = " //'8SXx:6'Mi>7cw|";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("", (String) null, (String) null, (String) null);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxis0.setTickLabelInsets(thermometerPlot0.DEFAULT_INSETS);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "H1Ep)e";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("H1Ep)e");
      String string1 = subCategoryAxis0.getCategoryLabelToolTip("H1Ep)e");
      subCategoryAxis0.setTickMarkOutsideLength(0.0F);
      boolean boolean0 = subCategoryAxis0.equals((Object) null);
      NumberAxis numberAxis0 = new NumberAxis();
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2.0F;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(370, 500, chartRenderingInfo0);
      int[] intArray0 = new int[7];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 0;
      intArray0[3] = 500;
      intArray0[4] = 370;
      intArray0[5] = 10;
      intArray0[6] = 10;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 10, intArray0, 370, true, 370, 0);
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("{kyt1 QC>NumQ=tA@");
      extendedCategoryAxis0.setLabelURL("{kyt1 QC>NumQ=tA@");
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      extendedCategoryAxis0.setSubLabelPaint(color0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      String string0 = logarithmicAxis0.makeTickLabel(0.0);
      NumberTickUnit numberTickUnit0 = logarithmicAxis0.getTickUnit();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.setSubLabelPaint(logarithmicAxis0.DEFAULT_AXIS_LINE_PAINT);
      Paint paint0 = subCategoryAxis0.getTickLabelPaint();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3401.13244818), 536.734);
      double double0 = cyclicNumberAxis0.getCycleBound();
  }
}
