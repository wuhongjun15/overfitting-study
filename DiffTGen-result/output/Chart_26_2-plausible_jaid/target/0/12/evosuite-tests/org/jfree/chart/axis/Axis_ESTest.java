/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 08:44:08 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.font.FontRenderContext;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.RescaleOp;
import java.math.BigInteger;
import java.text.NumberFormat;
import java.text.StringCharacterIterator;
import java.util.ArrayDeque;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JFormattedTextField;
import javax.swing.JTree;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.text.JTextComponent;
import javax.swing.text.NumberFormatter;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.annotations.TextAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.MarkerAxisBand;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.RangeType;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("NK0G?");
      categoryAxis0.setTickMarkInsideLength(1553.53F);
      Color color0 = (Color)TextAnnotation.DEFAULT_PAINT;
      categoryAxis0.setLabelPaint(color0);
      RectangleInsets rectangleInsets0 = categoryAxis0.getTickLabelInsets();
      CategoryLabelPositions categoryLabelPositions0 = categoryAxis0.getCategoryLabelPositions();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("NK0G?");
      RescaleOp rescaleOp0 = new RescaleOp(3847.3206F, 0.0F, (RenderingHints) null);
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = (-1.0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2105.151, (-1.0));
      cyclicNumberAxis0.setAutoRangeIncludesZero(false);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("e;)Mbvv$0Fi4kN");
      Plot plot0 = categoryAxis3D0.getPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      double double0 = cyclicNumberAxis0.getPeriod();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-40);
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable((-250), byteArray0);
      } catch(IllegalArgumentException e) {
         //
         // Offset must be greater than 0
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "G${O0+";
      stringArray0[1] = "G${O0+";
      stringArray0[2] = "G${O0+";
      stringArray0[3] = "G${O0+";
      stringArray0[4] = "G${O0+";
      stringArray0[5] = "Null 'frame' argument.";
      stringArray0[6] = "G${O0+";
      stringArray0[7] = "G${O0+";
      SymbolAxis symbolAxis0 = new SymbolAxis("G${O0+", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      Font font0 = symbolAxis0.getLabelFont();
      String string0 = "v5F>V;|0|={bJ\\o~=fQ";
      MockDate mockDate0 = new MockDate(1955, 1955, 152, 1955, 0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "c,kzE(l`'$y!y$0'", 0, 1955, (-1032), 0, 0, 0, 1955, 2);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 1032
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3922.4020943575), "SansSerif");
      boolean boolean0 = cyclicNumberAxis0.isAdvanceLineVisible();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      cyclicNumberAxis0.setTickMarksVisible(true);
      categoryAxis3D0.setLabelAngle(1.0E-8);
      String string0 = categoryAxis3D0.getCategoryLabelToolTip(500);
      double double0 = cyclicNumberAxis0.getPeriod();
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, cyclicNumberAxis0.DEFAULT_RANGE);
      double double1 = moduloAxis0.getDisplayStart();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SansSerif";
      stringArray0[1] = null;
      stringArray0[2] = "resolveDomainAxisLocation()";
      stringArray0[3] = null;
      stringArray0[4] = "SansSerif";
      stringArray0[5] = "SansSerif";
      stringArray0[6] = "resolveDomainAxisLocation()";
      stringArray0[7] = "resolveDomainAxisLocation()";
      stringArray0[8] = "resolveDomainAxisLocation()";
      SymbolAxis symbolAxis0 = new SymbolAxis("resolveDomainAxisLocation()", stringArray0);
      int int0 = 0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1570, 500, byteArray0, byteArray0, byteArray0);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("i<WaBHemlyldM*j");
      boolean boolean0 = extendedCategoryAxis0.isAxisLineVisible();
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      ArrayDeque<CombinedRangeXYPlot> arrayDeque0 = new ArrayDeque<CombinedRangeXYPlot>();
      Vector<CombinedRangeXYPlot> vector0 = new Vector<CombinedRangeXYPlot>(arrayDeque0);
      JTree jTree0 = new JTree(vector0);
      TreePath treePath0 = metalTreeUI0.getEditingPath(jTree0);
      Rectangle rectangle0 = metalTreeUI0.getPathBounds(jTree0, (TreePath) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.getCategoryStart(0, (-2760), (Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      subCategoryAxis0.setTickMarkInsideLength(2.0F);
      boolean boolean0 = subCategoryAxis0.equals((Object) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.04);
      cyclicNumberAxis0.setBoundMappedToLastCycle(false);
      Paint paint0 = subCategoryAxis0.getLabelPaint();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      extendedCategoryAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(multiplePiePlot0);
      waferMapPlot0.rendererChanged(rendererChangeEvent0);
      JFreeChart jFreeChart0 = new JFreeChart(waferMapPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 500);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TickUnitSource tickUnitSource0 = NumberAxis.createStandardTickUnits(locale0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "2i3RKIdwJL2Nt|FxP";
      stringArray0[1] = "2i3RKIdwJL2Nt|FxP";
      stringArray0[2] = "2i3RKIdwJL2Nt|FxP";
      stringArray0[3] = "2i3RKIdwJL2Nt|FxP";
      stringArray0[4] = "2i3RKIdwJL2Nt|FxP";
      stringArray0[5] = "2i3RKIdwJL2Nt|FxP";
      stringArray0[6] = "2i3RKIdwJL2Nt|FxP";
      SymbolAxis symbolAxis0 = new SymbolAxis("2i3RKIdwJL2Nt|FxP", stringArray0);
      Paint paint0 = symbolAxis0.getTickMarkPaint();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.axis.SymbolAxis");
      logarithmicAxis0.setupSmallLogFlag();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Font font0 = categoryAxis0.getTickLabelFont((Comparable) "org.jfree.chart.axis.SymbolAxis");
      PeriodAxis periodAxis0 = new PeriodAxis("]xy +C'");
      float float0 = periodAxis0.getMinorTickMarkInsideLength();
      String string0 = logarithmicAxis0.getLabelURL();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      MockDate mockDate0 = new MockDate(1379, 24, 1379, 1379, 1866, 1866);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      long long0 = fixedMillisecond0.getMiddleMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, 5.0E-6);
      String string0 = categoryAxis3D0.getCategoryLabelToolTip(timeSeriesDataItem0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      int int0 = timeSeriesDataItem0.compareTo((Object) null);
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      Paint paint0 = categoryAxis3D0.getTickLabelPaint((Comparable) timeSeriesDataItem0);
      stringArray0[5] = "C>R";
      stringArray0[6] = null;
      stringArray0[7] = null;
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      boolean boolean0 = symbolAxis0.isGridBandsVisible();
      categoryAxis3D0.setLabelToolTip(string0);
      Hour hour0 = new Hour();
      PeriodAxis periodAxis0 = new PeriodAxis(string0, hour0, fixedMillisecond0);
      DateAxis dateAxis0 = new DateAxis(string0, fixedMillisecond0.DEFAULT_TIME_ZONE);
      Date date0 = dateAxis0.getMaximumDate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, 0.0);
      extendedCategoryAxis0.setLowerMargin(2.0F);
      extendedCategoryAxis0.setUpperMargin(0.0);
      cyclicNumberAxis0.setTickMarkPaint(extendedCategoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      RangeType rangeType0 = cyclicNumberAxis0.getRangeType();
      cyclicNumberAxis0.setRangeType(rangeType0);
      extendedCategoryAxis0.setSubLabelFont(cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT);
      DateAxis dateAxis0 = new DateAxis();
      String string1 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("", (RegularTimePeriod) null, (RegularTimePeriod) null, zoneInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.setSeriesOutlinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      spiderWebPlot0.setStartAngle(0.05);
      Paint paint0 = spiderWebPlot0.getSeriesPaint();
      // Undeclared exception!
      try { 
        numberAxis0.setTickMarkPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("OPx~66;=-Fp^");
      boolean boolean0 = subCategoryAxis0.equals("OPx~66;=-Fp^");
      MeterPlot meterPlot0 = new MeterPlot();
      subCategoryAxis0.addChangeListener(meterPlot0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0F);
      numberAxis3D0.setTickUnit(numberTickUnit0, true, true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = null;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0F);
      logarithmicAxis0.setAllowNegativesFlag(true);
      logarithmicAxis0.setTickUnit(numberTickUnit0);
      boolean boolean0 = logarithmicAxis0.isTickMarksVisible();
      DateAxis dateAxis0 = new DateAxis((String) null);
      int int0 = 3543;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(500, (String) null, (-2476), (-2446), 3531, 31, 3531, (-2476), 3543, 3531, 500);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickLabelsVisible(true);
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'insets' argument.");
      periodAxis0.setMinorTickMarkInsideLength(2.0F);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null 'insets' argument.";
      stringArray0[1] = " NeD6]ItdsJC3";
      stringArray0[2] = "Null 'insets' argument.";
      stringArray0[3] = "Null 'insets' argument.";
      stringArray0[4] = "Null 'insets' argument.";
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'insets' argument.", stringArray0);
      symbolAxis0.autoAdjustRange();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "lNMHq\\`A!6hH3 r";
      NumberAxis numberAxis0 = new NumberAxis("lNMHq`A!6hH3 r");
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      numberAxis0.setNumberFormatOverride(numberFormat0);
      float float0 = numberAxis0.getTickMarkOutsideLength();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("SansSerif");
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 446;
      floatArray0[1] = 2.0F;
      floatArray0[2] = (float) 446;
      floatArray0[3] = 2.0F;
      floatArray0[4] = 1227.0184F;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(446, 500, floatArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 5 and should be 223000
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxis0.configure();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3);
      int int0 = 2;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 2.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 2.0F;
      floatArray0[7] = (float) 1;
      floatArray0[8] = (-697.0F);
      Kernel kernel0 = new Kernel(3, 2, floatArray0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0, 0, renderingHints0);
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      BigInteger bigInteger0 = BigInteger.ONE;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1018, 0, intArray0, 510, 10, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("java.awt.geom.Arc2D");
      logarithmicAxis0.setTickMarksVisible(true);
      logarithmicAxis0.setAutoRangeMinimumSize(3.141592653589793, false);
      logarithmicAxis0.setAutoTickIndex(2000);
      double double0 = logarithmicAxis0.adjustedLog10(85.539236124538);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(500, "org.jfree.chart.axis.Axis");
      DateAxis dateAxis0 = new DateAxis("java.awt.geom.Arc2D", simpleTimeZone0);
      int int0 = 585;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("org.jfree.chart.axis.Axis");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0));
      cyclicNumberAxis0.notifyListeners((AxisChangeEvent) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("0*TuPfJHGY-4", cyclicNumberAxis0.DEFAULT_RANGE);
      // Undeclared exception!
      try { 
        moduloAxis0.DEFAULT_TICK_LABEL_FONT.getStringBounds("0*TuPfJHGY-4", (FontRenderContext) null);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("a(| 9Vgi", stringArray0);
      RectangleInsets rectangleInsets0 = new RectangleInsets(2.0F, 1.0E-8, 500, 0.0);
      symbolAxis0.setTickLabelInsets(rectangleInsets0);
      symbolAxis0.setGridBandsVisible(true);
      DateAxis dateAxis0 = new DateAxis("ZOOM_OUT_BOTH");
      double double0 = 1026.3933;
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel((JFreeChart) null, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Polar Zoom In");
      Color color0 = Color.WHITE;
      ColorSpace colorSpace0 = color0.getColorSpace();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 1.0F, 1688.2488F, 1.0F);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Rectangle2D rectangle2D0 = rectangle2D_Float0.createIntersection(rectangle0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge();
      double double0 = subCategoryAxis0.getCategoryMiddle(774, (-1461), rectangle2D0, rectangleEdge0);
      subCategoryAxis0.setSubLabelPaint(color0);
      Paint paint0 = subCategoryAxis0.getSubLabelPaint();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = new CombinedRangeCategoryPlot();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot();
      ValueAxis valueAxis1 = thermometerPlot1.getRangeAxis();
      Range range0 = combinedRangeCategoryPlot1.getDataRange(valueAxis1);
      ModuloAxis moduloAxis0 = new ModuloAxis("X ", (Range) null);
      RectangleEdge rectangleEdge1 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        moduloAxis0.valueToJava2D(0.0, (Rectangle2D) null, rectangleEdge1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("J&'2Hxxu\"^9s=gO");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("H;Vy`KJJEWqOxRsSKW");
      Paint paint0 = extendedCategoryAxis0.getSubLabelPaint();
      categoryAxis3D0.setUpperMargin(0.2);
      categoryAxis3D0.setTickLabelPaint(paint0);
      double double0 = categoryAxis3D0.getLowerMargin();
      extendedCategoryAxis0.clearCategoryLabelToolTips();
      categoryAxis3D0.setLabel(" bYB}e.j(@dz>QqA5");
      extendedCategoryAxis0.setVisible(true);
      extendedCategoryAxis0.setAxisLineVisible(true);
      categoryAxis3D0.setLabel("");
      Font font0 = extendedCategoryAxis0.getSubLabelFont();
      categoryAxis3D0.configure();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("J&'2Hxxu\"^9s=gO");
      logarithmicAxis0.setupNumberFmtObj();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "clone";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("clone");
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2.0F;
      categoryAxis3D0.setLabel("clone");
      floatArray0[2] = 2.0F;
      floatArray0[3] = 2.0F;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, ";`");
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      boolean boolean0 = numberTickUnit0.equals(";`");
      cyclicNumberAxis0.setTickUnit(numberTickUnit0);
      NumberFormat numberFormat0 = cyclicNumberAxis0.getNumberFormatOverride();
      cyclicNumberAxis0.setTickUnit(numberTickUnit0, false, false);
      cyclicNumberAxis0.setLabel("Null 'font' argument.");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("M]?e\"*r");
      Paint paint0 = numberAxis3D0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Object object0 = extendedCategoryAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("<");
      boolean boolean0 = logarithmicAxis0.isVisible();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, "<");
      boolean boolean1 = categoryAxis0.equals(cyclicNumberAxis0);
      DateAxis dateAxis0 = new DateAxis("<");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      dateAxis0.setDateFormatOverride(mockSimpleDateFormat0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3203.2501699166), "PlotOrientation.VERTICAL");
      categoryAxis0.setLabelPaint(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
      cyclicNumberAxis0.setAutoRangeMinimumSize(2.5E7, true);
      MeterPlot meterPlot0 = new MeterPlot();
      boolean boolean0 = categoryAxis0.hasListener(meterPlot0);
      Paint paint0 = cyclicNumberAxis0.getAdvanceLinePaint();
      cyclicNumberAxis0.setFixedAutoRange(2.0F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0, 9.0, "z.w5P?>o");
      cyclicNumberAxis0.setTickMarkOutsideLength(1779.418F);
      double double0 = cyclicNumberAxis0.getLabelAngle();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      boolean boolean0 = categoryAxis0.equals("z.w5P?>o");
      PeriodAxis periodAxis0 = new PeriodAxis("z.w5P?>o");
      Class class0 = periodAxis0.getAutoRangeTimePeriodClass();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-55);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1216, 1216, byteArray0, byteArray0, byteArray0);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = waterfallBarRenderer0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("org.jfree.data.xy.AbstractXYZDataset", (Range) null);
      RectangleInsets rectangleInsets0 = moduloAxis0.getLabelInsets();
      double double0 = (-493.920207541);
      NumberFormatter numberFormatter0 = new NumberFormatter();
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatter) numberFormatter0);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jFormattedTextField0.new AccessibleJTextComponent();
      Rectangle rectangle0 = jTextComponent_AccessibleJTextComponent0.getCharacterBounds(0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = null;
      try {
        combinedDomainXYPlot0 = new CombinedDomainXYPlot(moduloAxis0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = stackedBarRenderer0.findRangeBounds(defaultKeyedValues2DDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("P", range0);
      boolean boolean0 = moduloAxis0.isTickLabelsVisible();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("b`Jf.woU6L.u:dt");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1589.09325610787), 0.05);
      dateAxis0.setTickMarkStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      cyclicNumberAxis0.setTickMarkStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      MarkerAxisBand markerAxisBand0 = cyclicNumberAxis0.getMarkerBand();
      cyclicNumberAxis0.setBoundMappedToLastCycle(true);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("7");
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits();
      String string0 = logarithmicAxis0.makeTickLabel(0.0F, false);
      Paint paint0 = cyclicNumberAxis0.getAdvanceLinePaint();
      TickUnitSource tickUnitSource1 = NumberAxis.createStandardTickUnits();
      String string1 = "v/[2K#={sj-c&?ed";
      Month month0 = new Month(dateAxis0.DEFAULT_ANCHOR_DATE);
      int int0 = (-1);
      int int1 = 91;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(500, "7", (-5297), 500, 500, 1, 227, 0, (-1), 91, 500, 500, (-1));
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -5297
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = ":&`*_%8O*`@c(/b";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-767.12), (-767.12), ":&`*_%8O*`@c(/b");
      cyclicNumberAxis0.setTickMarkInsideLength(1.0F);
      Year year0 = new Year();
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis(":&`*_%8O*`@c(/b", year0, year0, (TimeZone) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "org.jfree.chart.util.StrokeList";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.util.StrokeList");
      String string1 = "org.jfree.chart.axis.Axis";
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("org.jfree.chart.axis.Axis", 0.05, (-2161.08768448694), 0.0);
      Font font0 = xYPointerAnnotation0.getFont();
      xYPointerAnnotation0.setRotationAngle(0.2);
      int int0 = 1580;
      boolean boolean0 = font0.canDisplay(1580);
      extendedCategoryAxis0.setSubLabelFont(font0);
      Graphics2D graphics2D0 = null;
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      BorderArrangement borderArrangement0 = new BorderArrangement();
      LegendTitle legendTitle0 = null;
      try {
        legendTitle0 = new LegendTitle(stackedBarRenderer0, (Arrangement) null, borderArrangement0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'arrangement' argument.
         //
         verifyException("org.jfree.chart.block.BlockContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("9|XCE!}7YJ*I-e(zxH@");
      Vector<Integer> vector0 = new Vector<Integer>();
      int int0 = 1786;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-101);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-101);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(2145, 2145, byteArray0, byteArray0, byteArray1, byteArray1);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Null 'paint' argument.";
      stringArray0[1] = "[^rzS@E:U<6z[_B5#=n";
      stringArray0[2] = "[^rzS@E:U<6z[_B5#=n";
      stringArray0[3] = "[^rzS@E:U<6z[_B5#=n";
      stringArray0[4] = "[^rzS@E:U<6z[_B5#=n";
      stringArray0[5] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("[^rzS@E:U<6z[_B5#=n", stringArray0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset1);
      symbolAxis0.removeChangeListener(piePlot3D0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2356.6648455464, 2356.6648455464);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickLabelsVisible(false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("h", categoryAxis0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (-2.147483648E9), (-1685.0), (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(15, 1.0F, (-1803.3447F), 659.41F);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.createIntersection(rectangle0);
      Rectangle2D rectangle2D1 = rectangle0.createUnion(rectangle2D0);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, (-1747.654084), rectangle2D1, rectangle2D1, rectangleEdge0, plotRenderingInfo0);
      categoryAxis0.setTickLabelPaint((Comparable) true, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
      categoryAxis0.setTickLabelFont(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT);
      PeriodAxis periodAxis0 = new PeriodAxis("c^1KFS|K2QRc[9{>");
      Line2D.Double line2D_Double0 = new Line2D.Double(0.2, 200.0, 968.022719943, 1.0E-8);
      Rectangle rectangle1 = line2D_Double0.getBounds();
      Rectangle rectangle2 = line2D_Double0.getBounds();
      cyclicNumberAxis0.setRightArrow(rectangle2);
      RegularTimePeriod regularTimePeriod0 = periodAxis0.getLast();
      categoryAxis0.setTickLabelPaint((Comparable) 2.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      Paint paint0 = categoryAxis0.getAxisLinePaint();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("rect");
      double double0 = logarithmicAxis0.switchedLog10(0.05);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      Graphics2D graphics2D0 = null;
      StringCharacterIterator stringCharacterIterator0 = null;
      try {
        stringCharacterIterator0 = new StringCharacterIterator("", 11, 500, 2305);
      } catch(IllegalArgumentException e) {
         //
         // Invalid substring range
         //
         verifyException("java.text.StringCharacterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("O");
      XYPlot xYPlot0 = new XYPlot();
      subCategoryAxis0.setPlot(xYPlot0);
      SymbolicXYItemLabelGenerator symbolicXYItemLabelGenerator0 = new SymbolicXYItemLabelGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0F, true, symbolicXYItemLabelGenerator0);
      Paint paint0 = candlestickRenderer0.getBaseItemLabelPaint();
      subCategoryAxis0.setAxisLinePaint(paint0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = null;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) null);
      // Undeclared exception!
      try { 
        fixedMillisecond0.next();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.FixedMillisecond", e);
      }
  }
}
