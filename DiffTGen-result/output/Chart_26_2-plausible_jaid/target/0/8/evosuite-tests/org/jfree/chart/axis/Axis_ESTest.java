/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 08:44:15 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionListener;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.StringCharacterIterator;
import java.time.Instant;
import java.util.Date;
import java.util.EventListener;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.DebugGraphics;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.FixedHeightLayoutCache;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CategoryLabelPosition;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.CategoryLabelWidthType;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.text.TextBlockAnchor;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "Y2|[3wu'\"";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Y2|[3wu'\"");
      logarithmicAxis0.setVisible(true);
      boolean boolean0 = logarithmicAxis0.getAutoRangeNextLogFlag();
      logarithmicAxis0.setAutoRangeStickyZero(true);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 500;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2.0F;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(500, 3831, floatArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 5 and should be 1915500
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits(locale0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("", styleContext_NamedStyle0);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext0.new NamedStyle(styleContext_NamedStyle1);
      Style style0 = styleContext0.addStyle("", styleContext_NamedStyle2);
      Font font0 = styleContext0.getFont((AttributeSet) style0);
      categoryAxis0.setTickLabelFont(font0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "org.jfree.chart.event.TitleChangeListener");
      cyclicNumberAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      numberAxis0.setLabelToolTip((String) null);
      TickUnitSource tickUnitSource0 = NumberAxis.createStandardTickUnits();
      Font font0 = numberAxis0.getTickLabelFont();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[5] = null;
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.setGridBandsVisible(true);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(stringArray0[1]);
      int int0 = extendedCategoryAxis0.getCategoryLabelPositionOffset();
      PeriodAxis periodAxis0 = new PeriodAxis(stringArray0[5]);
      PeriodAxisLabelInfo[] periodAxisLabelInfoArray0 = new PeriodAxisLabelInfo[7];
      Class<DateAxis> class0 = DateAxis.class;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      SystemColor systemColor0 = SystemColor.textHighlightText;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, mockSimpleDateFormat0, periodAxis0.DEFAULT_TICK_LABEL_INSETS, font0, systemColor0, false, numberAxis0.DEFAULT_AXIS_LINE_STROKE, periodAxis0.DEFAULT_AXIS_LINE_PAINT);
      periodAxisLabelInfoArray0[0] = periodAxisLabelInfo0;
      Class<CategoryPlot> class1 = CategoryPlot.class;
      PeriodAxisLabelInfo periodAxisLabelInfo1 = new PeriodAxisLabelInfo(class1, mockSimpleDateFormat0);
      periodAxisLabelInfoArray0[1] = periodAxisLabelInfo1;
      Class<ExtendedCategoryAxis> class2 = ExtendedCategoryAxis.class;
      DateFormat dateFormat0 = null;
      PeriodAxisLabelInfo periodAxisLabelInfo2 = null;
      try {
        periodAxisLabelInfo2 = new PeriodAxisLabelInfo(class2, (DateFormat) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'dateFormat' argument.
         //
         verifyException("org.jfree.chart.axis.PeriodAxisLabelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis(";zF^");
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      String string0 = zoneInfo0.getDisplayName();
      zoneInfo0.setRawOffset(0);
      periodAxis0.setTimeZone(zoneInfo0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Greenwich Mean Time");
      NumberTickUnit numberTickUnit0 = numberAxis3D0.getTickUnit();
      Plot plot0 = numberAxis3D0.getPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1526.18);
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(0.05, 5008.41114);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      Rectangle2D rectangle2D0 = numberAxis3D0.DEFAULT_AXIS_LABEL_FONT.getStringBounds("", fontRenderContext0);
      AxisLocation axisLocation0 = null;
      float[][] floatArray0 = new float[6][2];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 2.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (float) 500;
      floatArray1[3] = (float) 10;
      floatArray1[4] = 1.0F;
      floatArray1[5] = (float) 500;
      floatArray1[6] = 2.0F;
      floatArray1[7] = (float) 10;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = (float) 500;
      floatArray2[1] = (float) 500;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 1.0F;
      floatArray2[4] = (float) 500;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray3[0] = 2.0F;
      floatArray3[1] = 1.0F;
      floatArray3[2] = 2.0F;
      floatArray3[3] = 2.0F;
      floatArray3[4] = (float) 0;
      floatArray3[5] = (float) 500;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      floatArray4[0] = 1.0F;
      floatArray4[1] = (float) 10;
      floatArray4[2] = (float) 0;
      floatArray4[3] = (-3844.75F);
      floatArray4[4] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = 1.0F;
      floatArray5[1] = 2.0F;
      floatArray5[2] = (float) 10;
      floatArray5[3] = 0.0F;
      floatArray5[4] = 1.0F;
      floatArray5[5] = (float) 10;
      floatArray5[6] = 0.0F;
      floatArray5[7] = (float) 10;
      floatArray5[8] = (-3844.75F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      floatArray6[0] = 1551.125F;
      floatArray6[1] = (float) 500;
      floatArray6[2] = (float) 10;
      floatArray6[3] = 0.0F;
      floatArray6[4] = (-790.652F);
      floatArray0[5] = floatArray6;
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, periodAxis0, numberAxis3D0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(";heG:qG1z9");
      subCategoryAxis0.setFixedDimension((-1870.3055925874248));
      // Undeclared exception!
      try { 
        subCategoryAxis0.setSubLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      float float0 = categoryAxis3D0.getTickMarkOutsideLength();
      CategoryLabelPositions categoryLabelPositions0 = categoryAxis3D0.getCategoryLabelPositions();
      Month month0 = Month.parseMonth((String) null);
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("Negative 'w' argument.", (RegularTimePeriod) null, (RegularTimePeriod) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      // Undeclared exception!
      try { 
        valueAxis0.setLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      int int0 = 0;
      categoryAxis0.setMaximumCategoryLabelLines(0);
      BasicStroke basicStroke0 = (BasicStroke)PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
      categoryAxis0.setAxisLineStroke(basicStroke0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("org.jfree.chart.axis.PeriodAxis", moduloAxis0.DEFAULT_AXIS_LABEL_FONT, (Plot) null, true);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "Null 'location' for index 0 not permitted.";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'location' for index 0 not permitted.");
      PiePlot piePlot0 = new PiePlot();
      Font font0 = piePlot0.getLabelFont();
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("Null 'location' for index 0 not permitted.");
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(1278.253, 10);
      DateAxis dateAxis0 = new DateAxis("Null 'location' for index 0 not permitted.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext(affineTransform0, combinedRangeXYPlot0, thermometerPlot0);
      } catch(IllegalArgumentException e) {
         //
         // AA hint:org.jfree.chart.plot.CombinedRangeXYPlot@39
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickMarkOutsideLength(1358.1234F);
      dateAxis0.setInverted(false);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      dateAxis0.setTimeZone(zoneInfo0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.setExpTickLabelsFlag(true);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("=(*%vbn@~l:+HRMiEO");
      BasicStroke basicStroke0 = (BasicStroke)CyclicNumberAxis.DEFAULT_ADVANCE_LINE_STROKE;
      extendedCategoryAxis0.setTickMarkStroke(basicStroke0);
      extendedCategoryAxis0.setSubLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
      logarithmicAxis0.setTickMarkStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      ModuloAxis moduloAxis0 = new ModuloAxis("04Aj.Lk", dateAxis0.DEFAULT_RANGE);
      double double0 = moduloAxis0.getDisplayStart();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.autoAdjustRange();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickLabelInsets(logarithmicAxis0.DEFAULT_AXIS_LABEL_INSETS);
      categoryAxis3D0.setLabelFont(logarithmicAxis0.DEFAULT_TICK_LABEL_FONT);
      double double0 = categoryAxis3D0.getCategoryMargin();
      categoryAxis3D0.setMaximumCategoryLabelWidthRatio(500);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      Font font0 = subCategoryAxis0.getSubLabelFont();
      subCategoryAxis0.setTickMarkInsideLength(0.0F);
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) 0.0F;
      numberArray1[1] = (Number) 0.2;
      numberArray1[2] = (Number) 0.05;
      numberArray1[3] = (Number) 0.0F;
      numberArray1[4] = (Number) 1.0E-100;
      numberArray1[5] = (Number) 2.302585092994046;
      numberArray1[6] = (Number) 0.05;
      numberArray1[7] = (Number) 2.302585092994046;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      numberArray2[0] = (Number) 0.0F;
      numberArray2[1] = (Number) 0.05;
      numberArray2[2] = (Number) 0.0F;
      numberArray2[3] = (Number) 0.05;
      numberArray2[4] = (Number) 1.0E-100;
      numberArray2[5] = (Number) 0.0F;
      numberArray2[6] = (Number) 2.302585092994046;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      numberArray3[0] = (Number) 0.2;
      numberArray3[1] = (Number) 0.0F;
      numberArray3[2] = (Number) 0.05;
      numberArray3[3] = (Number) 1.0E-8;
      numberArray3[4] = (Number) 0.2;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultIntervalCategoryDataset0);
      Font font1 = spiderWebPlot0.getLabelFont();
      logarithmicAxis0.setTickLabelFont(font1);
      logarithmicAxis0.setAutoRangeIncludesZero(true);
      subCategoryAxis0.setMaximumCategoryLabelLines(500);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Object object0 = categoryAxis0.clone();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-848.3429100244308), 2.0F);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("%I|F4]=TaTzW");
      logarithmicAxis0.setStrictValuesFlag(false);
      double double0 = categoryAxis0.getLabelAngle();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      float float0 = (-2558.412F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      int int0 = 94;
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(94);
      int int1 = 0;
      int int2 = (-823);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, (-823), (byte[]) null, 94, false);
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      boolean boolean0 = logarithmicAxis0.getLog10TickLabelsFlag();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 0.05);
      logarithmicAxis0.setAxisLineVisible(true);
      boolean boolean1 = cyclicNumberAxis0.isBoundMappedToLastCycle();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      logarithmicAxis0.setLabelAngle(2.0F);
      Paint paint0 = categoryAxis0.getTickLabelPaint((Comparable) 0.05);
      cyclicNumberAxis0.configure();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.0, (String) null);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(cyclicNumberAxis1);
      logarithmicAxis0.notifyListeners(axisChangeEvent0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Paint paint1 = extendedCategoryAxis0.getSubLabelPaint();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      Object object0 = categoryAxis0.clone();
      categoryAxis0.setUpperMargin((-1.0));
      categoryAxis0.setTickMarkInsideLength(0.0F);
      categoryAxis0.setLabelToolTip("");
      categoryAxis0.clearCategoryLabelToolTips();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("lEb{?W:?iYx&w");
      extendedCategoryAxis0.setTickMarksVisible(false);
      Object object1 = extendedCategoryAxis0.clone();
      Paint paint0 = extendedCategoryAxis0.getLabelPaint();
      String string0 = "";
      float[][] floatArray0 = new float[8][1];
      float[] floatArray1 = new float[2];
      floatArray1[0] = 2.0F;
      floatArray1[1] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray3[0] = 2.0F;
      floatArray3[1] = 2.0F;
      floatArray3[2] = 2.0F;
      floatArray3[3] = 0.0F;
      floatArray3[4] = 2.0F;
      floatArray3[5] = 2.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[8];
      floatArray4[0] = 2.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 2.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 2387.93F;
      floatArray4[5] = 0.0F;
      floatArray4[6] = 2.0F;
      floatArray4[7] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[6];
      floatArray5[0] = 2.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = 2.0F;
      floatArray5[5] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[2];
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[3];
      floatArray7[0] = (-1263.109F);
      floatArray7[1] = 0.0F;
      floatArray7[2] = 0.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[4];
      floatArray8[0] = 0.0F;
      floatArray8[1] = 0.0F;
      floatArray8[2] = 0.0F;
      floatArray8[3] = 0.0F;
      floatArray0[7] = floatArray8;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 1.5707963267948966, "org.jfree.chart.text.TextBox");
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.setLowerMargin(0.0);
      int int0 = categoryAxis0.getCategoryLabelPositionOffset();
      categoryAxis0.setLabelToolTip("}");
      double double0 = categoryAxis0.getUpperMargin();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      boolean boolean0 = logarithmicAxis0.getAutoRangeNextLogFlag();
      logarithmicAxis0.setAxisLinePaint(categoryAxis0.DEFAULT_AXIS_LABEL_PAINT);
      DateAxis dateAxis0 = new DateAxis("");
      dateAxis0.setAutoRange(false, true);
      Date date0 = dateAxis0.getMinimumDate();
      CategoryLabelPositions categoryLabelPositions0 = categoryAxis0.getCategoryLabelPositions();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.BOTTOM_RIGHT;
      CategoryLabelWidthType categoryLabelWidthType0 = CategoryLabelWidthType.CATEGORY;
      CategoryLabelPosition categoryLabelPosition0 = null;
      try {
        categoryLabelPosition0 = new CategoryLabelPosition((RectangleAnchor) null, textBlockAnchor0, categoryLabelWidthType0, 0.0F);
      } catch(IllegalArgumentException e) {
         //
         // Null 'categoryAnchor' argument.
         //
         verifyException("org.jfree.chart.axis.CategoryLabelPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Range range0 = defaultTableXYDataset0.getDomainBounds(true);
      ModuloAxis moduloAxis0 = new ModuloAxis("ZZP7c3K\"&xw", (Range) null);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Font font0 = candlestickRenderer0.getItemLabelFont(500, 500);
      moduloAxis0.setTickLabelFont(font0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'paint' argument.");
      extendedCategoryAxis0.setSubLabelPaint(candlestickRenderer0.DEFAULT_OUTLINE_PAINT);
      Paint paint0 = moduloAxis0.getLabelPaint();
      DateAxis dateAxis0 = new DateAxis();
      String string0 = "45RLud[`w,dOJYb1";
      int int0 = 911;
      Font font1 = new Font("", 911, 2958465);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null, "8`VXz^R=");
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fRkp&+uypO$";
      stringArray0[1] = "fRkp&+uypO$";
      stringArray0[2] = "fRkp&+uypO$";
      SymbolAxis symbolAxis0 = new SymbolAxis("fRkp&+uypO$", stringArray0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 2.0F);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      defaultValueDataset0.removeChangeListener(meterPlot0);
      defaultValueDataset0.setValue(500);
      Paint paint0 = meterPlot0.getValuePaint();
      symbolAxis0.setLabelPaint(paint0);
      float float0 = symbolAxis0.getTickMarkInsideLength();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("fRkp&+uypO$");
      subCategoryAxis0.setAxisLineVisible(true);
      CategoryLabelPositions categoryLabelPositions0 = subCategoryAxis0.getCategoryLabelPositions();
      Object object0 = subCategoryAxis0.clone();
      ModuloAxis moduloAxis0 = new ModuloAxis("pqE%s~F(&ad", symbolAxis0.DEFAULT_RANGE);
      Rectangle rectangle0 = new Rectangle(500, (-429), 270, (-429));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-429);
      floatArray0[1] = (float) 500;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(12, 500, floatArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 2 and should be 6000
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineVisible(true);
      boolean boolean0 = categoryAxis3D0.isTickLabelsVisible();
      DateAxis dateAxis0 = new DateAxis("");
      Graphics2D graphics2D0 = null;
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(1.0, 1.0);
      int int0 = 3160;
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 3160);
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 3160
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Plot plot0 = null;
      dateAxis0.setPlot((Plot) null);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Graphics2D graphics2D0 = null;
      double double0 = 2.5E9;
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      String string0 = "";
      JTextField jTextField0 = new JTextField("", 500);
      Dimension dimension0 = metalTreeUI0.getPreferredSize((JComponent) jTextField0);
      Rectangle rectangle0 = null;
      try {
        rectangle0 = new Rectangle((Point) null, dimension0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      categoryAxis3D0.setVisible(false);
      categoryAxis3D0.setTickMarkOutsideLength(0.0F);
      categoryAxis3D0.setLabelURL("");
      boolean boolean0 = extendedCategoryAxis0.equals(categoryAxis3D0);
      float float0 = categoryAxis3D0.getMaximumCategoryLabelWidthRatio();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "");
      cyclicNumberAxis0.configure();
      NumberFormat numberFormat0 = cyclicNumberAxis0.getNumberFormatOverride();
      int int0 = (-3132);
      // Undeclared exception!
      try { 
        Date.from((Instant) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Second second0 = new Second();
      PeriodAxis periodAxis0 = new PeriodAxis("Y?4dxQa_\\Xx0", second0, second0);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      WaferMapPlot waferMapPlot0 = waferMapRenderer0.getPlot();
      periodAxis0.removeChangeListener((AxisChangeListener) null);
      Stroke stroke0 = periodAxis0.getMinorTickMarkStroke();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("`Iw+~^Dauu");
      subCategoryAxis0.clearCategoryLabelToolTips();
      Paint paint0 = subCategoryAxis0.getTickMarkPaint();
      periodAxis0.setMinorTickMarkStroke(subCategoryAxis0.DEFAULT_AXIS_LINE_STROKE);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`Iw+~^Dauu";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-1313), (-35), (-1529.745194), 1.5707963267948966, chartRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Width (-1313) and height (-35) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("_LHb<N^}YfO", categoryAxis0.DEFAULT_AXIS_LABEL_FONT, ringPlot0, true);
      categoryAxis0.setTickLabelPaint(ringPlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      jFreeChart0.clearSubtitles();
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      categoryAxis0.setLabelInsets(rectangleInsets0);
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_PAINT;
      categoryAxis0.setTickLabelPaint(color0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      extendedCategoryAxis0.setTickMarkStroke(ringPlot0.DEFAULT_OUTLINE_STROKE);
      extendedCategoryAxis0.setSubLabelFont(categoryAxis0.DEFAULT_AXIS_LABEL_FONT);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      Class<CategoryAxis> class0 = CategoryAxis.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      ModuloAxis moduloAxis0 = new ModuloAxis("?s", periodAxis0.DEFAULT_RANGE);
      double double0 = moduloAxis0.getDisplayEnd();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Tx!'P-");
      RingPlot ringPlot0 = new RingPlot();
      logarithmicAxis0.addChangeListener(ringPlot0);
      logarithmicAxis0.autoRangeNextLogFlag = true;
      boolean boolean0 = logarithmicAxis0.getAutoRangeNextLogFlag();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.jfree.data.xy.XIntervalDataItem";
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'date' argument.", stringArray0);
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'date' argument.");
      categoryAxis0.setTickLabelPaint(symbolAxis0.DEFAULT_TICK_LABEL_PAINT);
      Rectangle rectangle0 = new Rectangle(500, 500, 500, 500);
      categoryAxis0.setCategoryMargin(500);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      double double0 = categoryAxis0.calculateCategoryGapSize(500, rectangle0, rectangleEdge0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.setNoDataMessagePaint(categoryAxis0.DEFAULT_TICK_MARK_PAINT);
      boolean boolean0 = symbolAxis0.equals(combinedDomainCategoryPlot0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.data.xy.XIntervalDataItem");
      logarithmicAxis0.setAutoTickIndex(10);
      boolean boolean1 = logarithmicAxis0.getExpTickLabelsFlag();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("`J:|m}6", simpleTimeZone0);
      Object object0 = dateAxis0.clone();
      Date date0 = dateAxis0.DEFAULT_DATE_TICK_UNIT.addToDate(dateAxis0.DEFAULT_ANCHOR_DATE, (TimeZone) simpleTimeZone0);
      dateAxis0.setMinimumDate(date0);
      TickUnitSource tickUnitSource0 = DateAxis.createStandardDateTickUnits();
      DateFormat dateFormat0 = dateAxis0.getDateFormatOverride();
      boolean boolean2 = dateAxis0.isAxisLineVisible();
      Stroke stroke0 = logarithmicAxis0.getAxisLineStroke();
      Week week0 = new Week();
      PeriodAxis periodAxis0 = new PeriodAxis("plot is not a PolarPlot", week0, week0);
      // Undeclared exception!
      try { 
        periodAxis0.getRange();
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.39240928132E12) <= upper (1.392409281319E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      double double0 = numberAxis0.calculateHighestVisibleTickValue();
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickLabelPaint(numberAxis0.DEFAULT_TICK_MARK_PAINT);
      Object object0 = dateAxis0.clone();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.setCategoryMargin(500);
      Paint paint0 = subCategoryAxis0.getSubLabelPaint();
      TextBlock textBlock0 = new TextBlock();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      CategoryLabelPosition categoryLabelPosition0 = null;
      try {
        categoryLabelPosition0 = new CategoryLabelPosition(rectangleAnchor0, (TextBlockAnchor) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'labelAnchor' argument.
         //
         verifyException("org.jfree.chart.axis.CategoryLabelPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1486.0);
      JEditorPane jEditorPane0 = new JEditorPane("", "");
      Color color0 = jEditorPane0.getCaretColor();
      cyclicNumberAxis0.setLabelPaint(color0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      RectangleEdge rectangleEdge0 = combinedRangeXYPlot0.getDomainAxisEdge();
      combinedRangeXYPlot0.setOutlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      cyclicNumberAxis0.setAutoRangeMinimumSize((double) 1.0F, false);
      Range range0 = combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setRange((Range) null, true, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("Null 'font' argument.");
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      LegendTitle legendTitle0 = new LegendTitle(spiderWebPlot0);
      Font font0 = legendTitle0.getItemFont();
      dateAxis0.setLabelFont(font0);
      dateAxis0.setTickLabelsVisible(false);
      dateAxis0.zoomRange((-2237.4727613756), (-2237.4727613756));
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      double double0 = logarithmicAxis0.switchedPow10(0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1267.89641061, 1267.89641061);
      NumberTickUnit numberTickUnit0 = cyclicNumberAxis0.getTickUnit();
      cyclicNumberAxis0.setAutoTickIndex(2687);
      cyclicNumberAxis0.setTickLabelsVisible(true);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setExpTickLabelsFlag(true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 2.0F);
      cyclicNumberAxis0.setOffset(1329.7);
      cyclicNumberAxis0.setOffset((-1297.6));
      Paint paint0 = numberAxis0.getAxisLinePaint();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      double double0 = logarithmicAxis0.adjustedLog10(1.0E-8);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-168.008));
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      stackedAreaRenderer0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      LegendItem legendItem0 = stackedAreaRenderer0.getLegendItem(3212, 500);
      Paint paint0 = stackedAreaRenderer0.lookupSeriesPaint(3212);
      cyclicNumberAxis0.setAdvanceLinePaint(paint0);
      Paint paint1 = cyclicNumberAxis0.getTickLabelPaint();
      Paint paint2 = cyclicNumberAxis0.getTickMarkPaint();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      String string0 = logarithmicAxis0.makeTickLabel(0.0, true);
      boolean boolean0 = logarithmicAxis0.getStrictValuesFlag();
      boolean boolean1 = cyclicNumberAxis0.isAxisLineVisible();
      boolean boolean2 = cyclicNumberAxis0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      Paint paint0 = subCategoryAxis0.getTickLabelPaint((Comparable) "");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.title.TextTitle");
      logarithmicAxis0.setPositiveArrowVisible(true);
      logarithmicAxis0.setAxisLineVisible(true);
      boolean boolean0 = logarithmicAxis0.getLog10TickLabelsFlag();
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.title.TextTitle");
      periodAxis0.setMinorTickMarkStroke(subCategoryAxis0.DEFAULT_AXIS_LINE_STROKE);
      float float0 = periodAxis0.getMinorTickMarkInsideLength();
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.title.TextTitle");
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      Date date0 = dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-721.029736), 0.0);
      cyclicNumberAxis0.setAdvanceLineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      Paint paint1 = cyclicNumberAxis0.getTickLabelPaint();
      boolean boolean1 = cyclicNumberAxis0.isAxisLineVisible();
      cyclicNumberAxis0.setRange(dateAxis0.DEFAULT_RANGE, false, true);
      dateAxis0.setRange(cyclicNumberAxis0.DEFAULT_RANGE);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setMaximumCategoryLabelWidthRatio((-1022.7707F));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MSgYY[\"L";
      stringArray0[1] = "MSgYY[\"L";
      stringArray0[2] = "MSgYY[\"L";
      stringArray0[3] = "MSgYY[\"L";
      stringArray0[4] = "MSgYY[\"L";
      stringArray0[5] = "MSgYY[\"L";
      SymbolAxis symbolAxis0 = new SymbolAxis("MSgYY[\"L", stringArray0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      symbolAxis0.setNumberFormatOverride(numberFormat0);
      categoryAxis3D0.removeCategoryLabelToolTip(0.0F);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(symbolAxis0);
      JFreeChart jFreeChart0 = axisChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false, true, false, false, true);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(200, 93, true);
      ActionListener actionListener0 = chartPanel0.getActionForKeyStroke(keyStroke0);
      boolean boolean0 = categoryAxis3D0.hasListener((EventListener) null);
      int int0 = symbolAxis0.calculateVisibleTickCount();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("X?;i(");
      Paint paint0 = extendedCategoryAxis0.getSubLabelPaint();
      extendedCategoryAxis0.setSubLabelFont(categoryAxis3D0.DEFAULT_TICK_LABEL_FONT);
      PeriodAxis periodAxis0 = new PeriodAxis("MSgYY[\"L");
      periodAxis0.setRange(symbolAxis0.DEFAULT_RANGE, true, true);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setAutoRangeIncludesZero(true);
      Stroke stroke0 = numberAxis3D0.getTickMarkStroke();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      logarithmicAxis0.setTickUnit(numberTickUnit0);
      logarithmicAxis0.setTickMarkInsideLength((-4194.031F));
      boolean boolean0 = logarithmicAxis0.getLog10TickLabelsFlag();
      DateAxis dateAxis0 = new DateAxis();
      Object object0 = dateAxis0.clone();
      Hour hour0 = null;
      try {
        hour0 = new Hour(500, 0, 500, 500);
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      ICC_ColorSpace iCC_ColorSpace0 = null;
      try {
        iCC_ColorSpace0 = new ICC_ColorSpace((ICC_Profile) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.color.ICC_ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1570.88), (-5224.93537303), "MMj4 E");
      cyclicNumberAxis0.setAdvanceLineVisible(true);
      String string0 = "FjwL5i\"IudcMf1!LR<";
      int int0 = 2271;
      Color color0 = null;
      try {
        color0 = new Color(500, 2271, 0, 2271);
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Alpha Red Green
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("SansSerif");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis(";(*#U", stringArray0);
      Range range0 = Range.combine(symbolAxis0.DEFAULT_RANGE, symbolAxis0.DEFAULT_RANGE);
      symbolAxis0.setRangeWithMargins(range0);
      boolean boolean0 = symbolAxis0.getAutoRangeIncludesZero();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.axis.Axis");
      logarithmicAxis0.setLabelAngle(508.970204537757);
      boolean boolean0 = logarithmicAxis0.getExpTickLabelsFlag();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2568, (String) null, 12, 0, 500, 500, 1093, 2637, 0, 0, 0, (-526), 500);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("!_&Vy!>q:{E:O+RX|3");
      int int0 = 0;
      FixedHeightLayoutCache fixedHeightLayoutCache0 = new FixedHeightLayoutCache();
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode(categoryAxis0, true);
      JTree jTree0 = new JTree(defaultMutableTreeNode0, false);
      TreePath treePath0 = jTree0.getPathForRow(0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      // Undeclared exception!
      try { 
        debugGraphics0.getClipBounds((Rectangle) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = null;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.setNumberFormatOverride((NumberFormat) null);
      double double0 = (-1157.4074);
      double double1 = (-2857.78909);
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      PeriodAxis periodAxis0 = new PeriodAxis("");
      Class class0 = periodAxis0.getMajorTickTimePeriodClass();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0F);
      double double0 = cyclicNumberAxis0.getOffset();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500, 0.0, (-7.0), chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Stack<CombinedRangeCategoryPlot> stack0 = new Stack<CombinedRangeCategoryPlot>();
      JTree jTree0 = new JTree(stack0);
      Rectangle rectangle0 = jTree0.getRowBounds(0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.selectAutoTickUnit(graphics2D0, (Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      String string0 = logarithmicAxis0.makeTickLabel(1.5707963267948966, true);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.setAutoTickIndex(126);
      RectangleInsets rectangleInsets0 = numberAxis0.getTickLabelInsets();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      float float0 = categoryAxis3D0.getMaximumCategoryLabelWidthRatio();
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, numberAxis0.DEFAULT_RANGE);
      moduloAxis0.setAutoRange(true);
      categoryAxis3D0.setLabelURL((String) null);
      numberAxis0.setAutoRange(false, true);
      moduloAxis0.setDisplayRange(907.4608934, 0.05);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, (String) null);
      double double0 = cyclicNumberAxis0.getOffset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("b7");
      logarithmicAxis0.setAutoRangeNextLogFlag(false);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      double double1 = periodAxis0.java2DToValue(500, rectangle2D_Double0, (RectangleEdge) null);
  }
}
