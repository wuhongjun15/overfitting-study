/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:17:55 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.color.ICC_Profile;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Locale;
import java.util.SimpleTimeZone;
import javax.swing.JPasswordField;
import javax.swing.JTabbedPane;
import javax.swing.plaf.synth.SynthTextPaneUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CategoryLabelPosition;
import org.jfree.chart.axis.CategoryLabelWidthType;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.axis.Timeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.text.TextBlockAnchor;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.data.Range;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "Gk\\t$iR}jK~-";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Gk\t$iR}jK~-");
      subCategoryAxis0.setTickLabelsVisible(true);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries(2.0F, class0);
      int int0 = 0;
      Month month0 = null;
      try {
        month0 = new Month(0, 0);
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      String string0 = dateAxis0.getLabel();
      dateAxis0.addChangeListener((AxisChangeListener) null);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, dateAxis0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot0, false);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(1689.2883F, 500, renderingHints0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2.0F;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(500, (-559), floatArray0);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(588.737276624912, (-1831.7535515093), "f^^6,H y[\"?I.K*i_*D");
      cyclicNumberAxis0.setPeriod(588.737276624912);
      boolean boolean0 = cyclicNumberAxis0.isBoundMappedToLastCycle();
      cyclicNumberAxis0.setPeriod((-1831.7535515093));
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("RectangleEdge.TOP");
      logarithmicAxis0.allowNegativesFlag = true;
      logarithmicAxis0.setAutoRangeNextLogFlag(false);
      boolean boolean1 = cyclicNumberAxis0.isAxisLineVisible();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickLabelFont((Comparable) true, logarithmicAxis0.DEFAULT_TICK_LABEL_FONT);
      SymbolAxis symbolAxis0 = null;
      try {
        symbolAxis0 = new SymbolAxis("Sam (oldman)", (String[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Color color0 = new Color(982, true);
      extendedCategoryAxis0.setSubLabelPaint(color0);
      Paint paint0 = extendedCategoryAxis0.getSubLabelPaint();
      extendedCategoryAxis0.setLabelAngle(0.0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      int int0 = 1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)23;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(1, byteArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("nU=C#", extendedCategoryAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(500, 1, (-2570));
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -2570
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("WW;LU+/;AuSEFr");
      Object object0 = subCategoryAxis0.clone();
      subCategoryAxis0.setMaximumCategoryLabelLines(6);
      Font font0 = subCategoryAxis0.getLabelFont();
      subCategoryAxis0.setAxisLineVisible(false);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("re");
      logarithmicAxis0.resizeRange(0.0, 0.0);
      logarithmicAxis0.setAutoRangeIncludesZero(true);
      String string0 = logarithmicAxis0.makeTickLabel((-1758.3945589086));
      logarithmicAxis0.setLabelInsets(subCategoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.BOTTOM_RIGHT;
      TextAnchor textAnchor0 = TextAnchor.BASELINE_CENTER;
      CategoryLabelPosition categoryLabelPosition0 = null;
      try {
        categoryLabelPosition0 = new CategoryLabelPosition(rectangleAnchor0, textBlockAnchor0, textAnchor0, (-983.061060512), (CategoryLabelWidthType) null, 0.0F);
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthType' argument.
         //
         verifyException("org.jfree.chart.axis.CategoryLabelPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("HHo5");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      Rectangle2D rectangle2D1 = dateAxis0.DEFAULT_AXIS_LABEL_INSETS.createOutsetRectangle(rectangle2D0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(0);
      double double0 = dateAxis0.valueToJava2D(1.0E8, rectangle2D1, rectangleEdge0);
      dateAxis0.setAutoTickIndex(2139);
      dateAxis0.setTickMarkOutsideLength(4.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(219.49527435);
      Locale locale0 = Locale.FRENCH;
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits(locale0);
      Stroke stroke0 = cyclicNumberAxis0.getAdvanceLineStroke();
      boolean boolean0 = dateAxis0.isHiddenValue((-1976L));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "HHo5";
      stringArray0[1] = "HHo5";
      stringArray0[2] = "HHo5";
      stringArray0[3] = "rbKlS[>V";
      stringArray0[4] = "HHo5";
      stringArray0[5] = "rbKlS[>V";
      stringArray0[6] = "HHo5";
      stringArray0[7] = "rbKlS[>V";
      stringArray0[8] = "rbKlS[>V";
      SymbolAxis symbolAxis0 = new SymbolAxis("rbKlS[>V", stringArray0);
      ArrayList<DateAxis> arrayList0 = new ArrayList<DateAxis>();
      // Undeclared exception!
      try { 
        symbolAxis0.drawGridBandsVertical((Graphics2D) null, rectangle2D_Double0, rectangle2D_Double0, true, arrayList0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SymbolAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Font font0 = categoryAxis3D0.getLabelFont();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1498.665, 1498.665);
      int int0 = 1403;
      int int1 = (-2826);
      byte[] byteArray0 = new byte[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-1871), (-1721), byteArray0, (-1721), false, (-811));
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.setNegativeArrowVisible(true);
      String string0 = numberAxis0.getLabelURL();
      Week week0 = new Week();
      PeriodAxis periodAxis0 = new PeriodAxis("", week0, week0, week0.DEFAULT_TIME_ZONE);
      Plot plot0 = null;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      NumberAxis numberAxis0 = new NumberAxis("");
      Paint paint0 = numberAxis0.getAxisLinePaint();
      // Undeclared exception!
      try { 
        Hour.parseHour((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Hour", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "{7Lv?r)vx[=v4Ue";
      CategoryAxis categoryAxis0 = new CategoryAxis("{7Lv?r)vx[=v4Ue");
      Paint paint0 = categoryAxis0.getTickLabelPaint((Comparable) "{7Lv?r)vx[=v4Ue");
      boolean boolean0 = categoryAxis0.isTickLabelsVisible();
      double double0 = 4297.285669152;
      String string1 = "AxisSpace.ensureAtLeast(): unrecognised AxisLocation.";
      int int0 = (-174);
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane(516);
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.centerRange(1.0);
      boolean boolean0 = logarithmicAxis0.getAutoRangeNextLogFlag();
      boolean boolean1 = logarithmicAxis0.isTickLabelsVisible();
      String string0 = "";
      Minute minute0 = null;
      Second second0 = null;
      try {
        second0 = new Second(15, (Minute) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'minute' argument.
         //
         verifyException("org.jfree.data.time.Second", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("N+DI7D<2n");
      Font font0 = numberAxis3D0.DEFAULT_TICK_LABEL_FONT.deriveFont(1951, 2.0F);
      numberAxis3D0.setLabelFont(font0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, 1643.53206743178, "N+DI7D<2n");
      cyclicNumberAxis0.setAdvanceLineVisible(true);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("N+DI7D<2n");
      boolean boolean0 = logarithmicAxis0.getAllowNegativesFlag();
      numberAxis3D0.setLabel("\"wv'}");
      boolean boolean1 = cyclicNumberAxis0.isBoundMappedToLastCycle();
      Font font1 = numberAxis3D0.getTickLabelFont();
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1), "R:R_r4m,", 500, (-1), 1951, 500, (-4651), 10, 1951, 500);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 500
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Stroke stroke0 = minMaxCategoryRenderer0.getGroupStroke();
      logarithmicAxis0.setTickMarkStroke(stroke0);
      logarithmicAxis0.setNegativeArrowVisible(false);
      logarithmicAxis0.setAutoRange(false, false);
      boolean boolean0 = logarithmicAxis0.getStrictValuesFlag();
      int int0 = logarithmicAxis0.calculateVisibleTickCount();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "org.jfree.chart.renderer.category.CategoryStepRenderer");
      double double0 = cyclicNumberAxis0.getPeriod();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.jfree.chart.renderer.category.CategoryStepRenderer";
      stringArray0[1] = null;
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      String string0 = symbolAxis0.valueToString(2.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("DialShape not recognised.");
      Font font0 = Axis.DEFAULT_AXIS_LABEL_FONT;
      extendedCategoryAxis0.setSubLabelFont(font0);
      DateAxis dateAxis0 = new DateAxis("DialShape not recognised.");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(dateAxis0);
      dateAxis0.notifyListeners(axisChangeEvent0);
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5);
      TickUnitSource tickUnitSource0 = DateAxis.createStandardDateTickUnits();
      cyclicNumberAxis0.setOffset(2.0F);
      cyclicNumberAxis0.setAdvanceLineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      boolean boolean0 = cyclicNumberAxis0.isBoundMappedToLastCycle();
      dateAxis0.setTickLabelPaint(extendedCategoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      double double0 = cyclicNumberAxis0.calculateLowestVisibleTickValue();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Other");
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("EVSQy=)*N", zoneInfo0);
      dateAxis0.setLabelURL((String) null);
      dateAxis0.setRange(1.0, 3114.337995932);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      PeriodAxis periodAxis0 = new PeriodAxis("", quarter0, quarter0);
      Class<CombinedRangeCategoryPlot> class0 = CombinedRangeCategoryPlot.class;
      periodAxis0.autoAdjustRange();
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      Object object0 = periodAxis0.clone();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "F*SoMP";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      boolean boolean0 = symbolAxis0.isGridBandsVisible();
      DateAxis dateAxis0 = new DateAxis();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Week week0 = new Week(500, 500);
      extendedCategoryAxis0.addSubLabel(week0, "&0 OFX))BY*");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-280.6606680365), 511.854470733921, "");
      double double0 = cyclicNumberAxis0.getPeriod();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("@o");
      numberAxis3D0.setNegativeArrowVisible(true);
      boolean boolean0 = true;
      numberAxis3D0.setVisible(false);
      numberAxis3D0.setTickMarksVisible(true);
      XYPlot xYPlot0 = new XYPlot();
      numberAxis3D0.removeChangeListener(xYPlot0);
      Range range0 = Range.shift(numberAxis3D0.DEFAULT_RANGE, (double) 10, false);
      xYPlot0.setRangeCrosshairPaint(numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
      numberAxis3D0.setRange(range0, false, false);
      numberAxis3D0.setTickMarkInsideLength(10);
      numberAxis3D0.setFixedDimension(970.0);
      numberAxis3D0.configure();
      Paint paint0 = numberAxis3D0.getTickLabelPaint();
      numberAxis3D0.configure();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, "?i&OL@/W3%D@");
      cyclicNumberAxis0.setPeriod(970.0);
      numberAxis3D0.configure();
      String string0 = "\"Xzl\"cF(I";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("\"Xzl\"cF(I");
      double double0 = logarithmicAxis0.adjustedPow10(225.0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("\"Xzl\"cF(I");
      extendedCategoryAxis0.setTickLabelInsets(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS);
      Paint paint1 = extendedCategoryAxis0.getSubLabelPaint();
      DateAxis dateAxis0 = new DateAxis(",}1.,Q5=F0aKn2N7qk");
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[9];
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("\"Xzl\"cF(I");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("All_Axes");
      TextBlock textBlock0 = new TextBlock();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.CENTER_LEFT;
      CategoryLabelWidthType categoryLabelWidthType0 = CategoryLabelWidthType.CATEGORY;
      CategoryLabelPosition categoryLabelPosition0 = new CategoryLabelPosition(rectangleAnchor0, textBlockAnchor0, categoryLabelWidthType0, 0.0F);
      double double0 = extendedCategoryAxis0.calculateTextBlockHeight(textBlock0, categoryLabelPosition0, (Graphics2D) null);
      String string0 = "SansSerif";
      SerialDate serialDate0 = null;
      SynthTextPaneUI synthTextPaneUI0 = new SynthTextPaneUI();
      JPasswordField jPasswordField0 = null;
      try {
        jPasswordField0 = new JPasswordField((-1));
      } catch(IllegalArgumentException e) {
         //
         // columns less than zero.
         //
         verifyException("javax.swing.JTextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "P:[K2$`;byU}'.8";
      String string1 = "org.jfree.chart.util.LengthAdjustmentType";
      Minute minute0 = Minute.parseMinute("org.jfree.chart.util.LengthAdjustmentType");
      Class<Integer> class0 = Integer.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("P:[K2$`;byU}'.8", (RegularTimePeriod) null, (RegularTimePeriod) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("ltIL*%");
      Plot plot0 = periodAxis0.getPlot();
      DateAxis dateAxis0 = new DateAxis("ltIL*%");
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit(10, (-2385));
      } catch(IllegalArgumentException e) {
         //
         // DateTickUnit.getMillisecondCount() : unit must be one of the constants YEAR, MONTH, DAY, HOUR, MINUTE, SECOND or MILLISECOND defined in the DateTickUnit class. Do *not* use the constants defined in java.util.Calendar.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Timeline timeline0 = dateAxis0.getTimeline();
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1478.4834475182392), 10);
      xYPlot0.setRangeAxis(500, (ValueAxis) cyclicNumberAxis0);
      xYPlot0.clearDomainMarkers();
      dateAxis0.setPlot(xYPlot0);
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      dateAxis0.setAxisLinePaint(color0);
      Object object0 = cyclicNumberAxis0.clone();
      cyclicNumberAxis0.centerRange(0.0F);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("R");
      logarithmicAxis0.resizeRange((double) 2.0F, (-1124.1439968066352));
      double double0 = logarithmicAxis0.adjustedPow10(0.0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2168.8706F;
      floatArray0[2] = 2.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) 500;
      floatArray0[6] = 2.0F;
      floatArray0[7] = 2.0F;
      JFreeChart jFreeChart0 = new JFreeChart("R", xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)42;
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(byteArray0);
      } catch(IllegalArgumentException e) {
      }
  }
}
