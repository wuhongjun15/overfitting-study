/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 13:54:49 GMT 2020
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.Icon;
import javax.swing.JPasswordField;
import javax.swing.border.BevelBorder;
import javax.swing.plaf.multi.MultiTextUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.JTextComponent;
import javax.swing.text.Position;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.GradientPaintTransformer;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.SerialDate;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(586.057, 586.057);
      String string0 = "Null 'hotspot' argument.";
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("Null 'hotspot' argument.", "Null 'hotspot' argument.", 3.0);
      Layer layer0 = Layer.FOREGROUND;
      stackedBarRenderer3D0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      boolean boolean0 = stackedBarRenderer3D0.getRenderAsPercentages();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean1 = scatterRenderer0.getUseFillPaint();
      BarRenderer.setDefaultShadowsVisible(false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setYOffset((-1451.8));
      String string1 = "$KD 2@";
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(6.0);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("$KD 2@", stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_FONT, compassPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, (-1451.8), 8.0, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CategoryItemRendererState categoryItemRendererState0 = null;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byte byte0 = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byte byte1 = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)104;
      byte byte2 = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(1, byteArray0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      Rectangle2D rectangle2D0 = lookupOp0.getBounds2D(bufferedImage0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("Requires start on or before end.");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean0 = statisticalLineAndShapeRenderer0.getBaseShapesVisible();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Paint paint0 = minMaxCategoryRenderer0.getGroupPaint();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      int int0 = (-1465);
      Shape shape0 = intervalBarRenderer0.lookupLegendShape((-1465));
      boolean boolean0 = false;
      intervalBarRenderer0.setAutoPopulateSeriesStroke(false);
      Number[][] numberArray0 = new Number[2][8];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 3.0;
      numberArray1[1] = (Number) 3.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[][] numberArray3 = new Number[2][5];
      numberArray3[0] = numberArray1;
      numberArray3[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray3);
      // Undeclared exception!
      try { 
        intervalBarRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Graphics2D graphics2D0 = null;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(790.3438F, 790.3438F, 790.3438F, 790.3438F);
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Number[][] numberArray0 = new Number[7][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 790.3438F;
      int int0 = CategoryStepRenderer.STAGGER_WIDTH;
      numberArray1[1] = (Number) 5;
      numberArray1[2] = (Number) 8.0;
      numberArray1[3] = (Number) 12.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = (Number) 8.0;
      numberArray2[1] = (Number) 790.3438F;
      numberArray2[2] = (Number) 0.2;
      numberArray2[3] = (Number) 8.0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      numberArray3[0] = (Number) 8.0;
      numberArray3[1] = (Number) 790.3438F;
      numberArray3[2] = (Number) 12.0;
      numberArray3[3] = combinedRangeCategoryPlot0.ZERO;
      numberArray3[4] = (Number) 1.0F;
      numberArray3[5] = (Number) 10;
      double double0 = LevelRenderer.DEFAULT_ITEM_MARGIN;
      numberArray3[6] = (Number) 0.2;
      numberArray3[7] = (Number) 1.0F;
      numberArray3[8] = (Number) 790.3438F;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[7];
      numberArray4[0] = (Number) 3.0;
      numberArray4[1] = (Number) 10;
      numberArray4[2] = (Number) 1.0F;
      numberArray4[3] = (Number) 12.0;
      numberArray4[4] = (Number) stackedBarRenderer3D0.ZERO;
      numberArray4[5] = (Number) 0.2;
      numberArray4[6] = (Number) 790.3438F;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[5];
      numberArray5[0] = (Number) 3.0;
      numberArray5[1] = (Number) 790.3438F;
      numberArray5[2] = (Number) 12.0;
      numberArray5[3] = (Number) 10;
      numberArray5[4] = (Number) 790.3438F;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[2];
      numberArray6[0] = (Number) 10;
      numberArray6[1] = (Number) stackedBarRenderer3D0.ZERO;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[8];
      numberArray7[0] = (Number) 12.0;
      numberArray7[1] = (Number) 8.0;
      numberArray7[2] = (Number) 12.0;
      numberArray7[3] = (Number) 12.0;
      numberArray7[4] = (Number) 12.0;
      numberArray7[5] = (Number) 10;
      numberArray7[6] = (Number) 8.0;
      numberArray7[7] = (Number) 1.0F;
      numberArray0[6] = numberArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.initialise((Graphics2D) null, rectangle2D0, combinedRangeCategoryPlot0, defaultIntervalCategoryDataset0, plotRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      int int0 = lineAndShapeRenderer0.getPassCount();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategoryPlot categoryPlot0 = null;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      BevelBorder bevelBorder0 = new BevelBorder(2, color0, color0);
      int int1 = 2138;
      int int2 = 0;
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) defaultTreeCellRenderer0, 2490, 2, 2138, 0);
      String string0 = "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer";
      String string1 = "";
      Color color1 = Color.getColor("", color0);
      String string2 = "";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", "p\"6zLk;2,J;*{#3C~", "Null 'annotation' argument.", "");
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryAnnotation categoryAnnotation0 = null;
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        areaRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer3D0.getURLGenerator((-1701), (-1701), false);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesURLGenerator((-1701), (CategoryURLGenerator) null, false);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      double[][] doubleArray0 = new double[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        layeredBarRenderer0.getDomainAxis(combinedDomainCategoryPlot0, defaultIntervalCategoryDataset0);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray1[1] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray1[2] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray1[3] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray1[4] = 3843.5146013;
      doubleArray1[5] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray1[6] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray1[7] = (-2252.363258752941);
      doubleArray1[8] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-2252.363258752941);
      doubleArray2[1] = (-2252.363258752941);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray3[1] = 3843.5146013;
      doubleArray3[2] = 3843.5146013;
      doubleArray3[3] = (-2252.363258752941);
      doubleArray3[4] = (-2252.363258752941);
      doubleArray3[5] = (-2252.363258752941);
      doubleArray3[6] = 3843.5146013;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray4[1] = (-2252.363258752941);
      doubleArray4[2] = (-2252.363258752941);
      doubleArray4[3] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray4[4] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray4[5] = (-415.289895251);
      doubleArray4[6] = (-2252.363258752941);
      doubleArray4[7] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray4[8] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray5[1] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray5[2] = (-415.289895251);
      doubleArray5[3] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray5[4] = 2328.01638657;
      doubleArray5[5] = (-415.289895251);
      doubleArray5[6] = (-2252.363258752941);
      doubleArray5[7] = 2328.451457587;
      doubleArray5[8] = 199.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (-415.289895251);
      doubleArray6[1] = (-415.289895251);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-415.289895251);
      doubleArray7[1] = (-2252.363258752941);
      doubleArray7[2] = (-2252.363258752941);
      doubleArray7[3] = (-415.289895251);
      doubleArray7[4] = 199.0;
      doubleArray7[5] = (-415.289895251);
      doubleArray7[6] = 199.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      doubleArray8[0] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray8[1] = 2328.01638657;
      doubleArray8[2] = 3843.5146013;
      doubleArray8[3] = 2328.01638657;
      doubleArray8[4] = (-2252.363258752941);
      doubleArray8[5] = 3843.5146013;
      doubleArray8[6] = (-1.0);
      doubleArray8[7] = 199.0;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultIntervalCategoryDataset0, tableOrder0);
      CategoryURLGenerator categoryURLGenerator0 = spiderWebPlot0.getURLGenerator();
      boxAndWhiskerRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, false);
      boxAndWhiskerRenderer0.setFillBox(true);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      boolean boolean0 = true;
      barRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, true);
      barRenderer0.setPositiveItemLabelPositionFallback((ItemLabelPosition) null);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      Rectangle2D rectangle2D0 = null;
      String string0 = "CF(DGDyO fV`Lg!";
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        logAxis0.valueToJava2D(0.0, (Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.LogAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Stroke stroke0 = stackedBarRenderer0.lookupSeriesOutlineStroke(10);
      categoryPlot0.setRangeMinorGridlineStroke(stroke0);
      ValueAxis valueAxis0 = stackedBarRenderer0.getRangeAxis(categoryPlot0, 10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getDomainMinorGridlinePaint();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_OUTLINE_PAINT, stackedBarRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("ItemLabelAnchor.OUTSIDE5", dateFormat0);
      boolean boolean0 = lineRenderer3D0.equals(intervalCategoryItemLabelGenerator0);
      Graphics2D graphics2D0 = null;
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Rectangle2D rectangle2D0 = null;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 10);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      int int0 = 0;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 500, 500, 0, 0, (-144), true, true, true, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, categoryPlot0, slidingGanttCategoryDataset0, plotRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setUseFillPaint(true);
      defaultCategoryItemRenderer0.setUseSeriesOffset(true);
      Boolean boolean0 = Boolean.TRUE;
      int int0 = Boolean.compare(false, true);
      defaultCategoryItemRenderer0.setSeriesLinesVisible(0, boolean0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", defaultCategoryItemRenderer0.DEFAULT_VALUE_LABEL_FONT, waferMapPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, (-716), 15, 37, 0, 41, true, true, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = defaultCategoryItemRenderer0.createState(plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, 0.0);
      Paint paint0 = barRenderer3D0.getShadowPaint();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      SystemColor systemColor0 = SystemColor.activeCaption;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(systemColor0, groupedStackedBarRenderer0.DEFAULT_OUTLINE_PAINT, barRenderer3D0.DEFAULT_WALL_PAINT, groupedStackedBarRenderer0.DEFAULT_PAINT);
      boolean boolean0 = groupedStackedBarRenderer0.equals(waterfallBarRenderer0);
      CategoryURLGenerator categoryURLGenerator0 = groupedStackedBarRenderer0.getBaseURLGenerator();
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      double double0 = barRenderer3D0.getXOffset();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(groupedStackedBarRenderer0.ZERO, 3553.115, 0.2, 8.0, barRenderer3D0.DEFAULT_VALUE_LABEL_PAINT, barRenderer3D0.DEFAULT_OUTLINE_STROKE);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, (Layer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      int int0 = (-435);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      multiplePiePlot0.setLegendItemShape(stackedBarRenderer0.DEFAULT_SHAPE);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      CategoryURLGenerator categoryURLGenerator0 = spiderWebPlot0.getURLGenerator();
      // Undeclared exception!
      try { 
        stackedBarRenderer0.setSeriesURLGenerator((-435), (CategoryURLGenerator) null, true);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = categoryStepRenderer0.getLegendItemURLGenerator();
      categoryStepRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      LegendItem legendItem0 = categoryStepRenderer0.getLegendItem((-1473), (-1473));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1473);
      floatArray0[1] = (float) 5;
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart(compassPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      int int0 = (-1);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(1, 5, (-1));
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -1
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(309.04872024, 309.04872024, true);
      stackedBarRenderer3D0.setAutoPopulateSeriesPaint(true);
      Paint paint0 = stackedBarRenderer3D0.getWallPaint();
      boxAndWhiskerRenderer0.setArtifactPaint(paint0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getSeriesURLGenerator(0);
      statisticalLineAndShapeRenderer0.setSeriesURLGenerator(1766, (CategoryURLGenerator) null);
      Boolean boolean0 = statisticalLineAndShapeRenderer0.getSeriesLinesVisible((-1));
      boxAndWhiskerRenderer0.setSeriesItemLabelGenerator(1534, (CategoryItemLabelGenerator) null);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      try { 
        Integer.decode("Null 'icon' argument.");
      } catch(NumberFormatException e) {
         //
         // For input string: \"Null 'icon' argument.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      int int0 = 845;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("F<#", numberFormat0);
      barRenderer3D0.setSeriesToolTipGenerator(845, (CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      BufferedImage bufferedImage0 = new BufferedImage(1342, 1342, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      MultiTextUI multiTextUI0 = new MultiTextUI();
      int int1 = 23;
      JPasswordField jPasswordField0 = new JPasswordField(23);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Position.Bias position_Bias0 = defaultCaret0.getMarkBias();
      // Undeclared exception!
      try { 
        multiTextUI0.modelToView((JTextComponent) jPasswordField0, 0, (Position.Bias) null);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Color color0 = (Color)Axis.DEFAULT_TICK_MARK_PAINT;
      minMaxCategoryRenderer0.setGroupPaint(color0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      boolean boolean0 = stackedBarRenderer3D0.equals(color0);
      stackedBarRenderer3D0.setBase((double) minMaxCategoryRenderer0.ZERO);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, extendedCategoryAxis0, (ValueAxis) null, minMaxCategoryRenderer0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      int[] intArray0 = new int[9];
      intArray0[0] = (-2586);
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      intArray0[5] = 10;
      intArray0[6] = 10;
      intArray0[7] = 10;
      intArray0[8] = 957;
      Polygon polygon0 = null;
      try {
        polygon0 = new Polygon(intArray0, intArray0, 1549);
      } catch(IndexOutOfBoundsException e) {
         //
         // npoints > xpoints.length || npoints > ypoints.length
         //
         verifyException("java.awt.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setBaseShapesVisible(true);
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalLineAndShapeRenderer0.getSeriesToolTipGenerator((-519));
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      GradientPaintTransformer gradientPaintTransformer0 = stackedXYAreaRenderer0.getGradientTransformer();
      waterfallBarRenderer0.setGradientPaintTransformer(gradientPaintTransformer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 3029);
      Range range0 = waterfallBarRenderer0.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1852.81150129381, (-2129.815610416));
      LegendItem legendItem0 = stackedBarRenderer3D0.getLegendItem(0, 0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      boolean boolean0 = stackedBarRenderer3D0.equals(areaRenderer0);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Christian.Zuckschwerdt@Informatik.Uni-Oldenburg.de", "Christian.Zuckschwerdt@Informatik.Uni-Oldenburg.de", (double) areaRenderer0.ZERO, (double) stackedBarRenderer3D0.ZERO);
      areaRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("Null 'annotation' argument.", dateFormat0);
      Object object0 = intervalCategoryItemLabelGenerator0.clone();
      areaRenderer0.setSeriesItemLabelGenerator(1597, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = intervalBarRenderer0.getItemLabelGenerator(0, 0, true);
      intervalBarRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      boolean boolean0 = defaultCategoryItemRenderer0.getDrawOutlines();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = boxAndWhiskerRenderer0.getLegendItemToolTipGenerator();
      boxAndWhiskerRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      SerialDate serialDate1 = SerialDate.addDays(72, serialDate0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.updateCrosshairValues(categoryCrosshairState0, serialDate1, mockDate0, 9999, 0, 2, 0.0, plotOrientation0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = scatterRenderer0.getLegendItemLabelGenerator();
      scatterRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      scatterRenderer0.setSeriesShapesFilled(0, true);
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      Object object0 = boxAndWhiskerToolTipGenerator0.clone();
      Locale locale0 = Locale.CANADA;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("4:UU", numberFormat0);
      scatterRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        boxAndWhiskerToolTipGenerator0.generateRowLabel(defaultBoxAndWhiskerCategoryDataset0, 0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = defaultCategoryItemRenderer0.getToolTipGenerator((-7), (-7), false);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, 2.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      int int0 = (-625);
      Paint paint0 = waterfallBarRenderer0.lookupSeriesPaint((-625));
      Paint paint1 = waterfallBarRenderer0.getLastBarPaint();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Paint paint2 = scatterRenderer0.lookupSeriesOutlinePaint(54);
      boolean boolean0 = scatterRenderer0.getUseSeriesOffset();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = waterfallBarRenderer0.getBaseItemLabelGenerator();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-1), (-625));
      } catch(IllegalArgumentException e) {
         //
         // Width (-1) and height (-625) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getSeriesToolTipGenerator(0);
      statisticalBarRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null);
      boolean boolean0 = statisticalBarRenderer0.equals((Object) null);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setItemMargin(0.0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addEntity(standardEntityCollection0, statisticalBarRenderer0.DEFAULT_SHAPE, defaultMultiValueCategoryDataset0, 0, 60, false);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_SHADOW_PAINT;
      defaultCategoryItemRenderer0.setBaseLegendTextPaint(color0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0025);
      Paint paint0 = cyclicNumberAxis0.getAdvanceLinePaint();
      defaultCategoryItemRenderer0.setBaseLegendTextPaint(paint0);
      boolean boolean0 = defaultCategoryItemRenderer0.getUseOutlinePaint();
      int int0 = defaultCategoryItemRenderer0.getRowCount();
      boolean boolean1 = defaultCategoryItemRenderer0.getItemShapeFilled(3, 3);
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("( v3b0#'MD(A*", true, 0.0025);
      boolean boolean2 = stackedBarRenderer0.removeAnnotation(categoryTextAnnotation0);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(1002.0, 0.0);
      boolean boolean3 = stackedBarRenderer0.equals(barRenderer3D0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 500, (-1680));
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("( v3b0#'MD(A*");
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2.0F;
      floatArray0[1] = (float) (-1680);
      floatArray0[2] = 2.0F;
      floatArray0[3] = (-5041.701F);
      floatArray0[4] = 2.0F;
      floatArray0[5] = 2.0F;
      floatArray0[6] = (float) 3;
      floatArray0[7] = (float) 0;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel((-2118), 500, floatArray0);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      int int0 = 2192;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-5655.704F);
      floatArray0[1] = (-355.0F);
      floatArray0[2] = (-175.801F);
      floatArray0[3] = (float) 2192;
      floatArray0[4] = (float) 2192;
      floatArray0[5] = (float) 2192;
      floatArray0[6] = (float) 2192;
      floatArray0[7] = (float) 2192;
      floatArray0[8] = (float) 2192;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(2192, 2192, floatArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 9 and should be 4804864
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(731.58, 3050.6810567777);
      Paint paint0 = barRenderer3D0.lookupSeriesPaint(1);
      CategoryToolTipGenerator categoryToolTipGenerator0 = barRenderer3D0.getBaseToolTipGenerator();
      spiderWebPlot0.setToolTipGenerator((CategoryToolTipGenerator) null);
      Paint paint1 = spiderWebPlot0.getSeriesPaint(0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint1, spiderWebPlot0.DEFAULT_LABEL_BACKGROUND_PAINT, spiderWebPlot0.DEFAULT_OUTLINE_PAINT, spiderWebPlot0.DEFAULT_LABEL_SHADOW_PAINT);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      Date[] dateArray0 = new Date[2];
      int int0 = (-4167);
      int int1 = (-656);
      MockDate mockDate0 = new MockDate((-4167), (-656), (-656));
      dateArray0[0] = (Date) mockDate0;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("Null 'plot' argument.");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Object object0 = ganttRenderer0.clone();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueMarker valueMarker0 = new ValueMarker((-3182.3925944867765), ganttRenderer0.DEFAULT_OUTLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE, ganttRenderer0.DEFAULT_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Range range0 = ganttRenderer0.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      combinedRangeCategoryPlot0.addRangeMarker((Marker) valueMarker0);
      int int0 = (-226);
      ValueAxis valueAxis0 = ganttRenderer0.getRangeAxis(combinedRangeCategoryPlot0, (-226));
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.isMedianVisible();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setErrorIndicatorStroke(boxAndWhiskerRenderer0.DEFAULT_STROKE);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        Font.getFont("");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2407);
      floatArray0[1] = (float) (-2407);
      floatArray0[2] = (float) (-2407);
      floatArray0[3] = (float) (-2407);
      floatArray0[4] = (float) (-2407);
      floatArray0[5] = (-1926.0F);
      floatArray0[6] = (float) (-2407);
      floatArray0[7] = (float) (-2407);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel((-2407), (-2407), floatArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 8 and should be 5793649
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = BarRenderer.getDefaultShadowsVisible();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, (-1922), 15, 0, 10, (-2), false, false, false, true, true, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      SymbolicXYItemLabelGenerator symbolicXYItemLabelGenerator0 = new SymbolicXYItemLabelGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(4.0, true, symbolicXYItemLabelGenerator0);
      XYURLGenerator xYURLGenerator0 = candlestickRenderer0.getURLGenerator(0, 3, true);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0, highLowItemLabelGenerator0, (XYURLGenerator) null);
      Shape shape0 = stackedXYAreaRenderer0.getLegendArea();
      stackedAreaRenderer0.setBaseLegendShape(shape0);
      Object object0 = stackedAreaRenderer0.clone();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("Base tool tip generator not cloneable.", "Base tool tip generator not cloneable.", "sL?BUa=$", "sL?BUa=$");
      } catch(Throwable e) {
      }
  }
}
