/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:09:08 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(dateAxis0);
      categoryAxis0.notifyListeners(axisChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Aiman Han");
      numberAxis3D0.configure();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      Object object0 = logarithmicAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("3(Xa*BqQIeUF.n]T\"Dv");
      RectangleInsets rectangleInsets0 = extendedCategoryAxis0.getTickLabelInsets();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'paint' argument.");
      subCategoryAxis0.addChangeListener((AxisChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("XXV1");
      dateAxis0.setPlot((Plot) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("X[*");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      logarithmicAxis0.setRightArrow(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      boolean boolean0 = cyclicNumberAxis0.hasListener(spiderWebPlot0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("PW_8dBW`$");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Zgq[");
      extendedCategoryAxis0.setTickMarkPaint(numberAxis0.DEFAULT_AXIS_LINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      categoryAxis3D0.setTickMarksVisible(false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(7.2E7, 7.2E7, "");
      cyclicNumberAxis0.setTickLabelInsets(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickLabelFont(categoryAxis3D0.DEFAULT_TICK_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("K");
      BasicStroke basicStroke0 = new BasicStroke(0.0F);
      subCategoryAxis0.setAxisLineStroke(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      cyclicNumberAxis0.setAxisLinePaint(logarithmicAxis0.DEFAULT_AXIS_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("cqJ\u0000=jIb,GAf^Nh");
      extendedCategoryAxis0.setLabelInsets(extendedCategoryAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setLabelInsets(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultKeyedValues2DDataset0);
      Paint paint0 = spiderWebPlot0.getSeriesOutlinePaint(637);
      categoryAxis0.setLabelPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelFont(categoryAxis3D0.DEFAULT_TICK_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("X[*");
      logarithmicAxis0.setLabel("X[*");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      cyclicNumberAxis0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("8QY\"z[[&Tz.");
      DateAxis dateAxis0 = new DateAxis();
      AffineTransform affineTransform0 = AffineTransform.getShearInstance(0.0, (-2788.0));
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext(affineTransform0, dateAxis0, logarithmicAxis0);
      } catch(IllegalArgumentException e) {
         //
         // AA hint:org.jfree.chart.axis.DateAxis@0
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("O2bI&#5`taZxlFhYC*$");
      dateAxis0.setTickMarkInsideLength(3889.51F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      String string0 = numberAxis3D0.getLabelToolTip();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      float float0 = cyclicNumberAxis0.getTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("PW_8dBW`$");
      MeterPlot meterPlot0 = new MeterPlot();
      numberAxis0.removeChangeListener(meterPlot0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      String string0 = dateAxis0.getLabelURL();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelToolTip("Null 'font' argument.");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("h");
      logarithmicAxis0.setTickMarkOutsideLength((-326.9F));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.plot.WaferMapPlot");
      RectangleInsets rectangleInsets0 = logarithmicAxis0.getLabelInsets();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      boolean boolean0 = subCategoryAxis0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Stroke stroke0 = numberAxis3D0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("59");
      CategoryAxis categoryAxis0 = new CategoryAxis("/}9Z:;'d\"R\"yY9R1~)");
      Font font0 = categoryAxis0.getTickLabelFont((Comparable) logarithmicAxis0.DEFAULT_TICK_UNIT);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.setAxisLineVisible(true);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'state' argument.");
      periodAxis0.setLabelURL("Null 'state' argument.");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      Stroke stroke0 = dateAxis0.getTickMarkStroke();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      Paint paint0 = categoryAxis0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setFixedDimension(0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("PW_8dBW`$");
      Paint paint0 = numberAxis0.getTickMarkPaint();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'state' argument.");
      Paint paint0 = periodAxis0.getAxisLinePaint();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'state' argument.");
      float float0 = periodAxis0.getTickMarkInsideLength();
  }
}
