/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 06:59:58 GMT 2020
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.ShortLookupTable;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DateFormat;
import java.util.Date;
import java.util.List;
import java.util.Stack;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.jfree.chart.util.GradientPaintTransformer;
import org.jfree.chart.util.ObjectList;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Hour;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Unknown layer.", defaultCategoryItemRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addEntity((EntityCollection) null, rectangle2D0, defaultMultiValueCategoryDataset0, 0, 15, false);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.setSeriesShapesVisible(2385, true);
      CategoryPlot categoryPlot0 = lineAndShapeRenderer0.getPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "#}'K<ri*f$J]R7>Dc");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemToolTipGenerator();
      lineRenderer3D0.setLegendItemToolTipGenerator((CategorySeriesLabelGenerator) null);
      lineRenderer3D0.setUseFillPaint(false);
      String string0 = "\\k(|@Vu2vi%&?zZWmp";
      Class<BoxAndWhiskerRenderer> class0 = BoxAndWhiskerRenderer.class;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      RectangleInsets rectangleInsets0 = new RectangleInsets(3005.0, 817.87427697945, 500.0, 0.0);
      Color color0 = Color.cyan;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, statisticalBarRenderer0.DEFAULT_VALUE_LABEL_FONT, color0, false, statisticalBarRenderer0.DEFAULT_OUTLINE_STROKE, lineRenderer3D0.DEFAULT_VALUE_LABEL_PAINT);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("k(|@Vu2vi%&?zZWmp");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1586.783575762606, 0.0, false);
      GradientPaintTransformer gradientPaintTransformer0 = stackedBarRenderer3D0.getGradientPaintTransformer();
      stackedBarRenderer3D0.setGradientPaintTransformer(gradientPaintTransformer0);
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      stackedBarRenderer3D0.setSeriesToolTipGenerator(70, (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setUseSeriesOffset(false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ValueAxis valueAxis0 = ganttRenderer0.getRangeAxis(combinedDomainCategoryPlot0, 0);
      ganttRenderer0.setCompletePaint(valueAxis0.DEFAULT_TICK_LABEL_PAINT);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Color color0 = (Color)Axis.DEFAULT_AXIS_LABEL_PAINT;
      waterfallBarRenderer0.setFirstBarPaint(color0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      Range range0 = waterfallBarRenderer0.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setEndPercent(0.0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer0.getSeriesShapesFilled(1);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setErrorIndicatorPaint(ganttRenderer0.DEFAULT_PAINT);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setUseOutlinePaint(false);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("#,###,##0");
      ganttRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setUseOutlinePaint(false);
      CategoryToolTipGenerator categoryToolTipGenerator0 = levelRenderer0.getBaseToolTipGenerator();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      DrawingSupplier drawingSupplier0 = layeredBarRenderer0.getDrawingSupplier();
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Object object0 = defaultCategoryItemRenderer0.clone();
      boolean boolean0 = intervalBarRenderer0.equals(object0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Graphics2D graphics2D0 = null;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "|tPv9B`gNxa eu";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "|tPv9B`gNxa eu");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      String string0 = "";
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("", "", "");
      waterfallBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, false);
      waterfallBarRenderer0.setItemMargin((-3392.093416787984));
      LevelRenderer levelRenderer0 = new LevelRenderer();
      short[][] shortArray0 = new short[9][2];
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)458;
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[2];
      shortArray2[0] = (short)458;
      shortArray2[1] = (short)458;
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[1];
      shortArray3[0] = (short)458;
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[4];
      shortArray4[0] = (short)458;
      shortArray4[1] = (short)458;
      shortArray4[2] = (short)458;
      shortArray4[3] = (short)458;
      shortArray0[3] = shortArray4;
      short[] shortArray5 = new short[2];
      shortArray5[0] = (short)458;
      shortArray5[1] = (short)458;
      shortArray0[4] = shortArray5;
      short[] shortArray6 = new short[8];
      shortArray6[0] = (short)3;
      shortArray6[1] = (short)458;
      shortArray6[2] = (short)458;
      shortArray6[3] = (short)1904;
      shortArray6[4] = (short)458;
      shortArray6[5] = (short)458;
      shortArray6[6] = (short)458;
      shortArray6[7] = (short)458;
      shortArray0[5] = shortArray6;
      short[] shortArray7 = new short[4];
      shortArray7[0] = (short)1904;
      shortArray7[1] = (short)458;
      shortArray7[2] = (short) (-260);
      shortArray7[3] = (short)1904;
      shortArray0[6] = shortArray7;
      short[] shortArray8 = new short[5];
      shortArray8[0] = (short)1904;
      shortArray8[1] = (short) (-260);
      shortArray8[2] = (short)3;
      shortArray8[3] = (short)3;
      shortArray8[4] = (short)458;
      shortArray0[7] = shortArray8;
      short[] shortArray9 = new short[1];
      shortArray9[0] = (short) (-260);
      shortArray0[8] = shortArray9;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(89, shortArray0);
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, (RenderingHints) null);
      // Undeclared exception!
      try { 
        lookupOp0.createCompatibleDestImage((BufferedImage) null, (ColorModel) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.LookupOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.removeAnnotations();
      boxAndWhiskerRenderer0.setMaximumBarWidth((-1617.43));
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      int int0 = (-1);
      int int1 = 6178;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel((-1), 6178, floatArray0);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      int int0 = 743;
      Paint paint0 = lineRenderer3D0.getLegendTextPaint(743);
      lineRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity(standardEntityCollection0, (Shape) null, taskSeriesCollection0, 743, 0, true);
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      stackedBarRenderer0.setRenderAsPercentages(true);
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer0.getSeriesURLGenerator(52);
      stackedBarRenderer0.setSeriesURLGenerator(0, (CategoryURLGenerator) null, true);
      stackedBarRenderer0.setBase(2.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Object object0 = scatterRenderer0.clone();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = scatterRenderer0.getBaseURLGenerator();
      boolean boolean0 = true;
      statisticalBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, true);
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getToolTipGenerator(771, 1510, true);
      scatterRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, true);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) scatterRenderer0.ZERO, 3.0, true);
      stackedBarRenderer3D0.setIgnoreZeroValues(true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = scatterRenderer0.createState(plotRenderingInfo0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      LegendItem legendItem0 = boxAndWhiskerRenderer0.getLegendItem(1050, 38);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("", "", (String) null, (String) null);
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      ObjectList objectList0 = new ObjectList(3234);
      boolean boolean0 = lineAndShapeRenderer0.equals(objectList0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = categoryStepRenderer0.getItemLabelGenerator((-3500), (-3500), true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      int int0 = ganttRenderer0.getRowCount();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Paint paint0 = waterfallBarRenderer0.getLastBarPaint();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      int int1 = 0;
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      Paint paint0 = statisticalLineAndShapeRenderer0.getErrorIndicatorPaint();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setGroupStroke(statisticalLineAndShapeRenderer0.DEFAULT_STROKE);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, fastScatterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(15, 10, 5, 5);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        levelRenderer0.initialise(graphics2D0, rectangle0, combinedRangeCategoryPlot0, jDBCCategoryDataset0, plotRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      Shape shape0 = statisticalLineAndShapeRenderer0.lookupLegendShape(0);
      statisticalLineAndShapeRenderer0.setAutoPopulateSeriesFillPaint(true);
      Paint paint0 = statisticalLineAndShapeRenderer0.getErrorIndicatorPaint();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      Stack<Integer> stack0 = new Stack<Integer>();
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      Date date0 = segmentedTimeline0.getDate(0);
      Hour hour0 = new Hour(date0, segmentedTimeline0.NO_DST_TIME_ZONE);
      Graphics2D graphics2D0 = null;
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(149.37995834, 149.37995834, 2358.6299, (double) stackedBarRenderer3D0.ZERO);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      stackedBarRenderer3D0.clearSeriesStrokes(false);
      double[][] doubleArray0 = new double[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, rectangle2D0, (CategoryPlot) null, defaultIntervalCategoryDataset0, plotRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState((PlotRenderingInfo) null);
      EntityCollection entityCollection0 = categoryItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-461);
      intArray0[3] = 4335;
      intArray0[4] = (-1947);
      intArray0[5] = 0;
      categoryItemRendererState0.setVisibleSeriesArray(intArray0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState1 = ganttRenderer0.createState(plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.setDefaultEntityRadius(566);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemURLGenerator();
      groupedStackedBarRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      ItemLabelPosition itemLabelPosition0 = defaultPolarItemRenderer0.getSeriesNegativeItemLabelPosition(566);
      intervalBarRenderer0.setNegativeItemLabelPositionFallback(itemLabelPosition0);
      ItemLabelPosition itemLabelPosition1 = groupedStackedBarRenderer0.getNegativeItemLabelPosition(566, 566, false);
      intervalBarRenderer0.setNegativeItemLabelPositionFallback(itemLabelPosition1);
      double double0 = intervalBarRenderer0.getShadowXOffset();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setIncompletePaint(intervalBarRenderer0.DEFAULT_PAINT);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      double double0 = (-3779.949);
      layeredBarRenderer0.setItemLabelAnchorOffset((-3779.949));
      CategoryToolTipGenerator categoryToolTipGenerator0 = layeredBarRenderer0.getSeriesToolTipGenerator(1241);
      CategoryAxis categoryAxis0 = null;
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false, false, false, true, false);
      ChartPanel chartPanel1 = new ChartPanel((JFreeChart) null);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      Point point1 = chartPanel1.getLocation(point0);
      chartPanel0.setLocation(point1);
      // Undeclared exception!
      try { 
        chartPanel0.repaint((Rectangle) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      layeredBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", (double) layeredBarRenderer0.ZERO, 3.0, 1.0);
      Paint paint0 = xYPointerAnnotation0.getPaint();
      layeredBarRenderer0.setShadowPaint(paint0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(10.0, 300.269387488108, false);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      scatterRenderer0.setSeriesURLGenerator(3, (CategoryURLGenerator) customCategoryURLGenerator0, false);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-1550.34907), 2.0, true);
      stackedBarRenderer3D0.setAutoPopulateSeriesPaint(true);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", 12.0, (double) stackedBarRenderer3D0.ZERO, (-1428.045976111));
      boolean boolean0 = stackedBarRenderer3D0.removeAnnotation(categoryPointerAnnotation0);
      double double0 = stackedBarRenderer3D0.getYOffset();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setBaseShapesFilled(true);
      boolean boolean1 = defaultCategoryItemRenderer0.getItemLineVisible(0, 0);
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 12.0;
      numberArray1[1] = (Number) 5.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      numberArray2[0] = (Number) 5.0;
      numberArray2[1] = (Number) 0.0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Unknown layer.");
      NumberAxis numberAxis0 = new NumberAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, numberAxis0, defaultCategoryItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'generator' argument.", categoryPointerAnnotation0.DEFAULT_FONT, categoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setDefaultEntityRadius((-1));
      Shape shape0 = defaultCategoryItemRenderer0.lookupLegendShape((-1));
      defaultCategoryItemRenderer0.setUseSeriesOffset(false);
      SystemColor systemColor0 = SystemColor.menuText;
      Color color0 = Color.getColor("Unknown layer.");
      defaultCategoryItemRenderer0.setLegendTextPaint(0, systemColor0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = defaultCategoryItemRenderer0.getSeriesItemLabelGenerator(932);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer0.getItemShapeFilled(33, 0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setItemMargin(33);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Paint paint0 = statisticalLineAndShapeRenderer0.getErrorIndicatorPaint();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      LegendItem legendItem0 = lineAndShapeRenderer0.getLegendItem(1531, (-1));
      boolean boolean0 = lineAndShapeRenderer0.getItemShapeFilled(0, (-1));
      boolean boolean1 = lineAndShapeRenderer0.getUseOutlinePaint();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean0 = true;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getURLGenerator(0, 0, false);
      scatterRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, true);
      scatterRenderer0.setUseSeriesOffset(true);
      // Undeclared exception!
      try { 
        scatterRenderer0.setItemMargin(2365.804421854827);
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.ScatterRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      JFreeChart jFreeChart0 = new JFreeChart("6wql", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 10, 10, 10, 0, (-3314), false, false, false, false, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      Number[][] numberArray0 = new Number[4][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 200;
      numberArray1[1] = (Number) 200;
      numberArray1[2] = (Number) 680;
      numberArray1[3] = (Number) 3.0;
      numberArray1[4] = (Number) 0.5F;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      numberArray3[0] = (Number) 1.0F;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      numberArray4[0] = (Number) 680;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.getDomainAxis(combinedRangeCategoryPlot0, defaultIntervalCategoryDataset0);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getURLGenerator(820, (-3414), true);
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      Paint paint0 = statisticalLineAndShapeRenderer0.getErrorIndicatorPaint();
      StandardBarPainter standardBarPainter0 = new StandardBarPainter();
      BarRenderer.setDefaultBarPainter(standardBarPainter0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Paint paint0 = boxAndWhiskerRenderer0.lookupLegendTextPaint(0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LegendItemCollection legendItemCollection0 = combinedRangeCategoryPlot0.getLegendItems();
      boxAndWhiskerRenderer0.setPlot(combinedRangeCategoryPlot0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(boxAndWhiskerRenderer0.DEFAULT_VALUE_LABEL_PAINT, boxAndWhiskerRenderer0.DEFAULT_PAINT, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, boxAndWhiskerRenderer0.DEFAULT_OUTLINE_PAINT);
      Paint paint1 = waterfallBarRenderer0.getPositiveBarPaint();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("", dateFormat0);
      boolean boolean0 = groupedStackedBarRenderer0.equals(intervalCategoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Stroke stroke0 = statisticalLineAndShapeRenderer0.getErrorIndicatorStroke();
      float[][] floatArray0 = new float[7][9];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-520.0F);
      floatArray1[1] = 1.0F;
      floatArray1[2] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (-520.0F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 0.0F;
      floatArray3[1] = (-520.0F);
      floatArray3[2] = (-520.0F);
      floatArray3[3] = (-520.0F);
      floatArray3[4] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      floatArray4[0] = (-520.0F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      floatArray5[0] = 1.0F;
      floatArray5[1] = 1.0F;
      floatArray5[2] = 0.0F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = 1.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[9];
      floatArray6[0] = (-692.5553F);
      floatArray6[1] = 1.0F;
      floatArray6[2] = (-520.0F);
      floatArray6[3] = 1.0F;
      floatArray6[4] = 1.0F;
      floatArray6[5] = 1.0F;
      floatArray6[6] = 0.0F;
      floatArray6[7] = 1.0F;
      floatArray6[8] = (-520.0F);
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      floatArray7[0] = (-692.5553F);
      floatArray7[1] = 1.0F;
      floatArray7[2] = (-520.0F);
      floatArray7[3] = 0.0F;
      floatArray7[4] = 1.0F;
      floatArray7[5] = (-692.5553F);
      floatArray7[6] = 0.0F;
      floatArray0[6] = floatArray7;
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, (ValueAxis) null, (ValueAxis) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'domainAxis' argument.
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(100.0);
      Range range0 = cyclicNumberAxis0.getRange();
      Paint paint0 = cyclicNumberAxis0.getAdvanceLinePaint();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(color0, color0, paint0, color0);
      double double0 = waterfallBarRenderer0.getMaximumBarWidth();
      Object object0 = waterfallBarRenderer0.clone();
      String string0 = "org.jfree.chart.block.ColorBlock";
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(500, 500);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(integer0, integer0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColorBlock", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, waferMapPlot0, false);
      int int0 = 3;
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(3, (-1865));
      } catch(IllegalArgumentException e) {
         //
         // Width (3) and height (-1865) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      barRenderer0.setItemMargin(0.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = false;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, systemColor0, 0, 0, 3.0);
      int int0 = 3357;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(3357, 0, 0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, true);
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedBarRenderer3D0.getToolTipGenerator(1591, 31, true);
      stackedBarRenderer3D0.setSeriesToolTipGenerator(1213, (CategoryToolTipGenerator) null, true);
      boolean boolean0 = stackedBarRenderer3D0.getRenderAsPercentages();
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer3D0.getBaseURLGenerator();
      int int0 = stackedBarRenderer3D0.hashCode();
      stackedBarRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) null);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setLegendTextPaint(1591, stackedBarRenderer3D0.DEFAULT_PAINT);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("Not implemented.");
      lineAndShapeRenderer0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      lineAndShapeRenderer0.setSeriesShapesFilled(1213, true);
      CategoryURLGenerator categoryURLGenerator1 = stackedBarRenderer3D0.getBaseURLGenerator();
      stackedBarRenderer3D0.setShadowYOffset(4420.828);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Paint paint0 = minMaxCategoryRenderer0.getGroupPaint();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      int int0 = (-1192);
      boolean boolean0 = true;
      String string0 = "";
      // Undeclared exception!
      try { 
        DateFormat.getDateTimeInstance((-1192), (-2257));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2257
         //
         verifyException("java.text.DateFormat", e);
      }
  }
}
