/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 07:03:35 GMT 2020
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.lang.reflect.Array;
import java.net.URL;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.NumberFormat;
import java.util.Date;
import java.util.List;
import java.util.Stack;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileSystemView;
import javax.swing.plaf.multi.MultiTextUI;
import javax.swing.plaf.synth.SynthToolBarUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.JTextComponent;
import javax.swing.text.Position;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.ChartChangeEventType;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.AreaRendererEndType;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarPainter;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.GradientPaintTransformer;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setItemMargin(3.141592653589793);
      DateAxis dateAxis0 = new DateAxis();
      levelRenderer0.setItemMargin(2582.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      dateAxis0.setTickMarkPaint(combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT);
      ValueAxis valueAxis0 = levelRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 500);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAnnotation categoryAnnotation0 = null;
      Layer layer0 = Layer.BACKGROUND;
      MockDate mockDate0 = new MockDate(10);
      // Undeclared exception!
      try { 
        dateAxis0.setRange((Date) mockDate0, (Date) mockDate0);
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      double double0 = levelRenderer0.getItemMargin();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) levelRenderer0.ZERO, 0.2, true);
      Paint paint0 = levelRenderer0.lookupLegendTextPaint(22);
      stackedBarRenderer3D0.setBaseLegendTextFont(levelRenderer0.DEFAULT_VALUE_LABEL_FONT);
      stackedBarRenderer3D0.setIgnoreZeroValues(true);
      int int0 = (-1418);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = levelRenderer0.getSeriesItemLabelGenerator(0);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesItemLabelGenerator((-1418), (CategoryItemLabelGenerator) null, false);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.setPlot((CategoryPlot) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("<]6F}g<T-5]Y_{90B ", 0.2, 1668.49860172982);
      categoryTextAnnotation0.setRotationAngle(1668.49860172982);
      boolean boolean0 = stackedBarRenderer3D0.removeAnnotation(categoryTextAnnotation0);
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      stackedBarRenderer3D0.setGradientPaintTransformer(standardGradientPaintTransformer0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = (-606);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setSeriesToolTipGenerator((-606), (CategoryToolTipGenerator) null, true);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis("oc:QDW}RW<1,T[;%");
      categoryAxis0.setCategoryLabelPositionOffset(3);
      categoryAxis0.removeCategoryLabelToolTip("oc:QDW}RW<1,T[;%");
      double double0 = levelRenderer0.calculateSeriesWidth(0.0, categoryAxis0, 0, 505);
      categoryAxis0.setTickMarkInsideLength(0.0F);
      categoryAxis0.setTickMarkInsideLength((-4548.7456F));
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getBaseURLGenerator();
      lineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, false);
      lineAndShapeRenderer0.setBaseShapesFilled(true);
      CategoryURLGenerator categoryURLGenerator1 = lineAndShapeRenderer0.getSeriesURLGenerator((-1177));
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Paint paint0 = statisticalLineAndShapeRenderer0.getErrorIndicatorPaint();
      int int0 = statisticalLineAndShapeRenderer0.getRowCount();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getBaseItemLabelGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setSeriesShapesFilled(745, false);
      double double1 = scatterRenderer0.getItemMargin();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      stackedBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      stackedBarRenderer0.setRenderAsPercentages(true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      MockFile mockFile0 = new MockFile("j", "\u0007#(|NxOMsb7;;(Y( ");
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser(mockFile0, (FileSystemView) null);
      boolean boolean0 = mockFile0.setWritable(true, false);
      Icon icon0 = mockJFileChooser0.getIcon(mockFile0);
      minMaxCategoryRenderer0.setMaxIcon(icon0);
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      Color color0 = synthToolBarUI0.getFloatingColor();
      Color color1 = Color.getColor("j", (Color) null);
      minMaxCategoryRenderer0.setLegendTextPaint(52, (Paint) null);
      Stroke stroke0 = minMaxCategoryRenderer0.getGroupStroke();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.setUseOutlinePaint(false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      Object object0 = standardCategorySeriesLabelGenerator0.clone();
      statisticalBarRenderer0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-316), (-316));
      Range range0 = statisticalBarRenderer0.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      statisticalBarRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      statisticalBarRenderer0.setShadowXOffset((double) minMaxCategoryRenderer0.ZERO);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{0}";
      stringArray0[1] = "jI81)~mDx^L%fG.p;vj";
      stringArray0[2] = "j";
      stringArray0[3] = "{0}";
      stringArray0[4] = "({0}, {1}) = {2}";
      stringArray0[5] = "{0}";
      Number[][] numberArray0 = new Number[4][1];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      numberArray2[0] = (Number) 0.2;
      numberArray2[1] = (Number) statisticalBarRenderer0.ZERO;
      numberArray2[2] = (Number) 3.0;
      double double0 = BarRenderer3D.DEFAULT_Y_OFFSET;
      numberArray2[3] = (Number) 8.0;
      Float float0 = new Float((float) 52);
      numberArray2[4] = (Number) float0;
      numberArray2[5] = (Number) 3.0;
      numberArray2[6] = (Number) 3.0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      numberArray3[0] = (Number) lineAndShapeRenderer0.ZERO;
      numberArray3[1] = (Number) statisticalBarRenderer0.ZERO;
      numberArray3[2] = (Number) 0.2;
      numberArray3[3] = (Number) float0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[3];
      numberArray4[0] = (Number) float0;
      numberArray4[1] = (Number) 0.2;
      numberArray4[2] = (Number) minMaxCategoryRenderer0.ZERO;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[9];
      Long long0 = new Long(0L);
      numberArray1[0] = (Number) long0;
      numberArray1[1] = (Number) ganttRenderer0.ZERO;
      numberArray1[2] = (Number) 0.2;
      numberArray1[3] = (Number) statisticalBarRenderer0.ZERO;
      numberArray1[4] = (Number) 0.2;
      numberArray1[5] = (Number) 0.2;
      numberArray1[6] = (Number) ganttRenderer0.ZERO;
      numberArray1[7] = (Number) 0.2;
      numberArray1[8] = (Number) statisticalBarRenderer0.ZERO;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray2[0] = (Number) ganttRenderer0.ZERO;
      numberArray2[1] = (Number) 0.2;
      numberArray2[2] = (Number) statisticalBarRenderer0.ZERO;
      numberArray2[3] = (Number) statisticalBarRenderer0.ZERO;
      numberArray2[4] = (Number) long0;
      numberArray2[5] = (Number) ganttRenderer0.ZERO;
      numberArray2[6] = (Number) ganttRenderer0.ZERO;
      numberArray2[7] = (Number) 0.2;
      numberArray2[8] = (Number) 3.0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = statisticalBarRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      boolean boolean0 = defaultCategoryItemRenderer0.getDrawOutlines();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(" High=", " High=", 1.0);
      categoryTextAnnotation0.setText(" High=");
      Layer layer0 = Layer.BACKGROUND;
      defaultCategoryItemRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setLastBarPaint(defaultCategoryItemRenderer0.DEFAULT_PAINT);
      Paint paint0 = waterfallBarRenderer0.getLastBarPaint();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      int int0 = (-877);
      Shape shape0 = stackedBarRenderer3D0.getLegendShape((-877));
      double double0 = stackedBarRenderer3D0.getXOffset();
      int int1 = stackedBarRenderer3D0.getRowCount();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean1 = scatterRenderer0.getUseOutlinePaint();
      CategoryPlot categoryPlot0 = stackedBarRenderer3D0.getPlot();
      int int2 = (-3676);
      // Undeclared exception!
      try { 
        areaRenderer0.getRangeAxis((CategoryPlot) null, (-3676));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = ganttRenderer0.getPlot();
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.drawBackground((Graphics2D) null, (CategoryPlot) null, rectangle0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean0 = false;
      scatterRenderer0.setUseFillPaint(false);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(scatterRenderer0.DEFAULT_PAINT, scatterRenderer0.DEFAULT_PAINT, scatterRenderer0.DEFAULT_OUTLINE_PAINT, scatterRenderer0.DEFAULT_PAINT);
      waterfallBarRenderer0.setMaximumBarWidth((double) scatterRenderer0.ZERO);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean1 = lineRenderer3D0.getUseOutlinePaint();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      String string0 = "UO`?oLFe$W&lwoO0]C";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("UO`?oLFe$W&lwoO0]C");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("0M~ST9I");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis3D0, numberAxis3D0, scatterRenderer0);
      CategoryAxis categoryAxis0 = lineRenderer3D0.getDomainAxis(categoryPlot0, defaultCategoryDataset0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      RectangleEdge rectangleEdge0 = categoryPlot0.getDomainAxisEdge();
      double double0 = ganttRenderer0.getItemMiddle(3.0, lineRenderer3D0.ZERO, defaultCategoryDataset0, categoryAxis0, rectangle2D_Float0, rectangleEdge0);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(true, 0.0F, false, 836.4741131227883, categoryAxis3D0.DEFAULT_AXIS_LINE_PAINT, waterfallBarRenderer0.DEFAULT_OUTLINE_STROKE);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(categoryLineAnnotation0);
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false, true, true, true, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setDrawLines(true);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemToolTipGenerator();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setAutoPopulateSeriesShape(true);
      lineAndShapeRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      Boolean boolean0 = lineAndShapeRenderer0.getSeriesShapesFilled(23);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[8];
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (float) 877;
      floatArray1[2] = (-1847.3447F);
      floatArray1[3] = (float) 877;
      floatArray1[4] = (float) 877;
      floatArray1[5] = (float) 23;
      floatArray1[6] = (float) 877;
      floatArray1[7] = (float) 23;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[8];
      floatArray2[0] = 0.0F;
      floatArray2[1] = (-1847.3447F);
      floatArray2[2] = (float) 877;
      floatArray2[3] = (-1.0F);
      floatArray2[4] = (-1.0F);
      floatArray2[5] = (-1.0F);
      floatArray2[6] = (-1847.3447F);
      floatArray2[7] = (float) 23;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray3[0] = (-1.0F);
      floatArray3[1] = 0.0F;
      floatArray3[2] = (float) 877;
      floatArray3[3] = (-1847.3447F);
      floatArray3[4] = (-1.0F);
      floatArray3[5] = (float) 877;
      floatArray0[2] = floatArray3;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, valueAxis0, valueAxis0);
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      levelRenderer0.updateCrosshairValues((CategoryCrosshairState) null, lineAndShapeRenderer0.ZERO, (Comparable) null, (double) lineAndShapeRenderer0.ZERO, 877, 877, 1.0, plotOrientation0);
      double double0 = levelRenderer0.getMaximumItemWidth();
      int int0 = levelRenderer0.getPassCount();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawDomainLine((Graphics2D) null, (CategoryPlot) null, (Rectangle2D) null, 0.0, categoryPlot0.DEFAULT_BACKGROUND_PAINT, categoryPlot0.DEFAULT_GRIDLINE_STROKE);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("Null 'plot' argument.", (-2078), (-2078));
      lineAndShapeRenderer0.setBaseLegendTextFont(font0);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = lineAndShapeRenderer0.getLegendItemURLGenerator();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemURLGenerator();
      statisticalBarRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      Shape shape0 = statisticalBarRenderer0.lookupLegendShape(84);
      ItemLabelPosition itemLabelPosition0 = statisticalBarRenderer0.getNegativeItemLabelPositionFallback();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(616.223438432875, 616.223438432875);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-165.460354846519));
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        barRenderer3D0.getDomainAxis(combinedRangeCategoryPlot0, defaultKeyedValues2DDataset0);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryPlot categoryPlot0 = waterfallBarRenderer0.getPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.getDomainAxis((CategoryPlot) null, defaultBoxAndWhiskerCategoryDataset0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setDrawOutlines(false);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      scatterRenderer0.setPlot(combinedDomainCategoryPlot0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      boolean boolean0 = stackedAreaRenderer0.equals(intervalCategoryToolTipGenerator0);
      CategoryToolTipGenerator categoryToolTipGenerator0 = scatterRenderer0.getBaseToolTipGenerator();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("({0}, {1}) = {2}", combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryItemRendererState categoryItemRendererState0 = stackedAreaRenderer0.createState((PlotRenderingInfo) null);
      JInternalFrame jInternalFrame0 = new JInternalFrame("({0}, {1}) = {3} - {4}");
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2142), 0);
      EntityCollection entityCollection0 = categoryItemRendererState0.getEntityCollection();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawHorizontalItem(graphics2D0, categoryItemRendererState0, rectangle0, categoryPlot0, categoryAxis3D0, numberAxis3D0, slidingGanttCategoryDataset0, 0, (-1518), true, 10);
      } catch(ClassCastException e) {
         //
         // org.jfree.data.gantt.SlidingGanttCategoryDataset cannot be cast to org.jfree.data.statistics.BoxAndWhiskerCategoryDataset
         //
         verifyException("org.jfree.chart.renderer.category.BoxAndWhiskerRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BarPainter barPainter0 = BarRenderer.getDefaultBarPainter();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = areaRenderer0.findRangeBounds(defaultKeyedValues2DDataset0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.setRenderAsPercentages(false);
      stackedBarRenderer3D0.setMinimumBarLength((double) areaRenderer0.ZERO);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      String string0 = "1uq.tZ-";
      Integer integer0 = new Integer((-1816));
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(integer0, integer1);
      WaferMapPlot waferMapPlot0 = waferMapRenderer0.getPlot();
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("1uq.tZ-", areaRenderer0.DEFAULT_VALUE_LABEL_FONT, (Plot) null, false);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.setShadowXOffset((-595.41209036));
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Paint paint0 = ganttRenderer0.getIncompletePaint();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = 1292;
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addEntity(standardEntityCollection0, groupedStackedBarRenderer0.DEFAULT_SHAPE, taskSeriesCollection0, 1292, (-496), true, 3.0, 0.0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1292, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Paint paint0 = lineRenderer3D0.lookupSeriesOutlinePaint((-667));
      lineRenderer3D0.setYOffset(2331.3284);
      Boolean boolean0 = lineRenderer3D0.getSeriesLinesVisible(1155);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setShadowVisible(true);
      waterfallBarRenderer0.setLastBarPaint(lineRenderer3D0.DEFAULT_WALL_PAINT);
      lineRenderer3D0.setDrawOutlines(false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, periodAxis0, lineRenderer3D0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createIntersection(rectangle0);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.calculateBarWidth(categoryPlot0, rectangle2D0, defaultMultiValueCategoryDataset0, (CategoryItemRendererState) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      DrawingSupplier drawingSupplier0 = layeredBarRenderer0.getDrawingSupplier();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(852.689, (double) layeredBarRenderer0.ZERO, false);
      Stack<CustomCategoryURLGenerator> stack0 = new Stack<CustomCategoryURLGenerator>();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("L[6B{c&<el.(G|f#", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = false;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      Object object0 = statisticalLineAndShapeRenderer0.clone();
      int int0 = 976;
      Stroke stroke0 = statisticalLineAndShapeRenderer0.lookupSeriesOutlineStroke(976);
      Stroke stroke1 = statisticalLineAndShapeRenderer0.lookupSeriesOutlineStroke(3);
      Shape shape0 = statisticalLineAndShapeRenderer0.lookupLegendShape(3);
      LegendItem legendItem0 = statisticalLineAndShapeRenderer0.getLegendItem(3, 805);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalLineAndShapeRenderer0.setSeriesShapesFilled(805, true);
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getBaseURLGenerator();
      scatterRenderer0.setSeriesURLGenerator(3, (CategoryURLGenerator) null, false);
      scatterRenderer0.setBaseLegendShape(statisticalLineAndShapeRenderer0.DEFAULT_SHAPE);
      statisticalLineAndShapeRenderer0.setItemLabelAnchorOffset(2060.1204451);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      String string0 = "NccLI66=isxV6rEx";
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("", (DateFormatSymbols) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(ganttRenderer0);
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.DATASET_UPDATED;
      rendererChangeEvent0.setType(chartChangeEventType0);
      lineRenderer3D0.setXOffset(2703.0);
      ganttRenderer0.notifyListeners(rendererChangeEvent0);
      ganttRenderer0.setMaximumBarWidth(1.0E-100);
      ganttRenderer0.setShadowPaint(lineRenderer3D0.DEFAULT_VALUE_LABEL_PAINT);
      ganttRenderer0.setEndPercent(1.0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Boolean boolean0 = defaultCategoryItemRenderer0.getSeriesLinesVisible(942);
      boolean boolean1 = Boolean.logicalXor(false, false);
      boolean boolean2 = Boolean.logicalAnd(true, false);
      lineRenderer3D0.setSeriesShapesVisible(942, (Boolean) null);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setAutoPopulateSeriesOutlinePaint(true);
      scatterRenderer0.setBaseShapesFilled(true);
      boolean boolean3 = scatterRenderer0.getUseSeriesOffset();
      int int0 = defaultCategoryItemRenderer0.hashCode();
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker(0.0, 3.0, ganttRenderer0.DEFAULT_OUTLINE_PAINT, defaultCategoryItemRenderer0.DEFAULT_OUTLINE_STROKE, (Paint) null, (Stroke) null, 863.97F);
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = intervalBarRenderer0.getBaseItemLabelGenerator();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Null 'orientation' argument.", 0.2, (double) intervalBarRenderer0.ZERO, (double) intervalBarRenderer0.ZERO);
      boolean boolean0 = intervalBarRenderer0.removeAnnotation(categoryPointerAnnotation0);
      intervalBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null);
      Paint paint0 = intervalBarRenderer0.lookupLegendTextPaint(991);
      ItemLabelPosition itemLabelPosition0 = intervalBarRenderer0.getNegativeItemLabelPositionFallback();
      int int0 = intervalBarRenderer0.getPassCount();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setArtifactPaint(categoryPointerAnnotation0.DEFAULT_PAINT);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      int int1 = 0;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("NS+Mn5<+U,RfEwHy", categoryPointerAnnotation0.DEFAULT_FONT, (Plot) null, true);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer();
      AreaRendererEndType areaRendererEndType0 = stackedAreaRenderer1.getEndType();
      stackedAreaRenderer0.setEndType(areaRendererEndType0);
      Shape shape0 = stackedAreaRenderer0.lookupSeriesShape(3);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Range range0 = stackedAreaRenderer0.findRangeBounds(jDBCCategoryDataset0);
      jDBCCategoryDataset0.clearSelection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = stackedAreaRenderer1.createState(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryItemRendererState0.getEntityCollection();
      int int0 = (-2975);
      // Undeclared exception!
      try { 
        stackedAreaRenderer1.addEntity(entityCollection0, stackedAreaRenderer0.DEFAULT_SHAPE, jDBCCategoryDataset0, 495, (-2975), false);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 495, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Rectangle rectangle0 = new Rectangle(0, 0, 0, 0);
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 8.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 8.0;
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 8.0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 8.0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) lineRenderer3D0.ZERO;
      doubleArray2[6] = 8.0;
      doubleArray2[7] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = 5.0E-4;
      doubleArray3[3] = (double) lineRenderer3D0.ZERO;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 0;
      doubleArray3[6] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 5.0E-4;
      doubleArray4[1] = 5.0E-4;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) lineRenderer3D0.ZERO;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = (double) 0;
      doubleArray5[3] = (-1365.13);
      doubleArray5[4] = 12.0;
      doubleArray5[5] = (double) 0;
      doubleArray5[6] = (double) 0;
      doubleArray5[7] = 12.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (double) 0;
      doubleArray6[3] = 5.0E-4;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = (double) 0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = 12.0;
      doubleArray9[1] = (double) 0;
      doubleArray9[2] = 5.0E-4;
      doubleArray9[3] = (double) 0;
      doubleArray9[4] = (-3763.5364561789734);
      doubleArray9[5] = (double) lineRenderer3D0.ZERO;
      doubleArray9[6] = 0.0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity(standardEntityCollection0, rectangle0, defaultIntervalCategoryDataset0, 53, 0, true);
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) null);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(92.2110771413, false);
      int int0 = 0;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(852, 10, 0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = layeredBarRenderer0.getBaseURLGenerator();
      layeredBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-1697.5604329840958), 0.0);
      int int0 = (-1843);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      int int1 = 0;
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getSeriesItemLabelGenerator(0);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesItemLabelGenerator((-1843), (CategoryItemLabelGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      boolean boolean0 = lineAndShapeRenderer0.getItemShapeFilled(1690, 1690);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(lineAndShapeRenderer0);
      boxAndWhiskerRenderer0.notifyListeners(rendererChangeEvent0);
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      boolean boolean1 = boxAndWhiskerRenderer0.isMeanVisible();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      Shape shape0 = categoryStepRenderer0.getLegendShape(1690);
      categoryStepRenderer0.setStagger(true);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) categoryStepRenderer0.ZERO, 5, false);
      int[] intArray0 = new int[7];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = (-6);
      intArray0[3] = 5;
      intArray0[4] = (-1589);
      intArray0[5] = 5;
      intArray0[6] = 5;
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.createStackedValueList(defaultKeyedValues2DDataset0, lineAndShapeRenderer0.ZERO, intArray0, (-2851.36), true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      Object object0 = taskSeriesCollection0.clone();
      Range range0 = barRenderer3D0.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0, tableOrder0);
      CategoryURLGenerator categoryURLGenerator0 = spiderWebPlot0.getURLGenerator();
      layeredBarRenderer0.setSeriesURLGenerator(1, (CategoryURLGenerator) null);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.getFillBox();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      layeredBarRenderer0.setPlot(combinedRangeCategoryPlot0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Color color0 = (Color)SymbolAxis.DEFAULT_GRID_BAND_PAINT;
      statisticalBarRenderer0.setErrorIndicatorPaint(color0);
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      boolean boolean0 = stackedBarRenderer0.getRenderAsPercentages();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setIncompletePaint(statisticalBarRenderer0.DEFAULT_PAINT);
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("MJ%qLX3C2<Ahmk", dateFormat0);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("({0}, {1}) = {2}", ganttRenderer0.ZERO, 0.0);
      boolean boolean1 = intervalCategoryToolTipGenerator0.equals(categoryTextAnnotation0);
      ganttRenderer0.setSeriesToolTipGenerator(30, (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      JFreeChart jFreeChart0 = new JFreeChart("MJ%qLX3C2<Ahmk", layeredBarRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainCategoryPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 3174, 58, 0, 0, 0, false, false, false, false, true, false, false);
      Point point0 = chartPanel0.getToolTipLocation((MouseEvent) null);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.findSubplot(plotRenderingInfo0, (Point2D) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      String string0 = null;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(3.0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Paint paint0 = meterPlot0.getNeedlePaint();
      statisticalBarRenderer0.setErrorIndicatorPaint(paint0);
      String string1 = "%a(2r9F";
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      spiderWebPlot0.handleClick(4164, (-3399), plotRenderingInfo0);
      CategoryToolTipGenerator categoryToolTipGenerator0 = spiderWebPlot0.getToolTipGenerator();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.setSeriesToolTipGenerator((-529), (CategoryToolTipGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      LegendItem legendItem0 = boxAndWhiskerRenderer0.getLegendItem(3, (-1993));
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("");
      boxAndWhiskerRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      CategoryURLGenerator categoryURLGenerator0 = boxAndWhiskerRenderer0.getURLGenerator(3, 3, true);
      int int0 = boxAndWhiskerRenderer0.getPassCount();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(multiplePiePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, true, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setSeriesShapesFilled(57, true);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      lineAndShapeRenderer0.setPlot(combinedDomainCategoryPlot0);
      Boolean boolean0 = lineAndShapeRenderer0.getSeriesShapesFilled(57);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      ImageIcon imageIcon0 = null;
      try {
        imageIcon0 = new ImageIcon((URL) null, "");
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      int int0 = categoryStepRenderer0.getPassCount();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator(" ");
      boolean boolean0 = stackedBarRenderer3D0.equals(standardCategorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("kkli\"p'&");
      barRenderer0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setDefaultEntityRadius(2592);
      barRenderer0.setAutoPopulateSeriesShape(false);
      Object object0 = standardCategorySeriesLabelGenerator0.clone();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getBaseURLGenerator();
      lineAndShapeRenderer0.setSeriesURLGenerator(2592, (CategoryURLGenerator) null);
      boolean boolean0 = lineAndShapeRenderer0.getBaseShapesVisible();
      barRenderer0.setShadowYOffset((double) lineAndShapeRenderer0.ZERO);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean1 = boxAndWhiskerRenderer0.isMeanVisible();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Object object1 = scatterRenderer0.clone();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("{0}", categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      categoryPlot0.setRangeZeroBaselinePaint(scatterRenderer0.DEFAULT_PAINT);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.createState(plotRenderingInfo0);
      ItemLabelPosition itemLabelPosition0 = barRenderer0.getPositiveItemLabelPositionFallback();
      barRenderer0.setPositiveItemLabelPositionFallback((ItemLabelPosition) null);
      lineAndShapeRenderer0.setBaseShapesVisible(true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Paint paint0 = boxAndWhiskerRenderer0.lookupSeriesOutlinePaint((-1309));
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = boxAndWhiskerRenderer0.getLegendItemLabelGenerator();
      boxAndWhiskerRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      boolean boolean0 = boxAndWhiskerRenderer0.isMeanVisible();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      boolean boolean1 = stackedAreaRenderer0.equals((Object) null);
      boolean boolean2 = stackedAreaRenderer0.getRenderAsPercentages();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      LegendItem legendItem0 = statisticalLineAndShapeRenderer0.getLegendItem(3, 3);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = null;
      try {
        bufferedImageRenderingSource0 = new BufferedImageRenderingSource((BufferedImage) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.BufferedImageRenderingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = true;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      int int0 = stackedAreaRenderer0.getPassCount();
      LegendItemCollection legendItemCollection0 = stackedAreaRenderer0.getLegendItems();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(stackedAreaRenderer0.DEFAULT_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_PAINT, stackedAreaRenderer0.DEFAULT_PAINT);
      Paint paint0 = waterfallBarRenderer0.getLastBarPaint();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        ganttRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2013), (-2013));
      Range range0 = intervalBarRenderer0.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryURLGenerator categoryURLGenerator0 = categoryStepRenderer0.getSeriesURLGenerator(0);
      categoryStepRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      double double0 = lineAndShapeRenderer0.getItemMargin();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      double double1 = stackedBarRenderer3D0.getYOffset();
      double[] doubleArray0 = stackedBarRenderer3D0.calculateBarL0L1(1127.3949, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = stackedAreaRenderer0.getSeriesItemLabelGenerator(0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getBaseURLGenerator();
      statisticalLineAndShapeRenderer0.setSeriesURLGenerator(0, (CategoryURLGenerator) null, true);
      statisticalLineAndShapeRenderer0.setBaseLinesVisible(true);
      statisticalLineAndShapeRenderer0.setSeriesShapesFilled(0, false);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Paint paint0 = ganttRenderer0.getIncompletePaint();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.getUseSeriesOffset();
      lineAndShapeRenderer0.setSeriesShapesFilled(957, true);
      Shape shape0 = lineAndShapeRenderer0.getLegendShape((-1160));
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(lineAndShapeRenderer0.ZERO, 115.57599, lineAndShapeRenderer0.ZERO, 143.1813565, lineAndShapeRenderer0.DEFAULT_PAINT, lineAndShapeRenderer0.DEFAULT_STROKE);
      lineAndShapeRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      double double0 = levelRenderer0.calculateSeriesWidth(143.1813565, categoryAxis0, 2073, (-1254));
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      double double1 = layeredBarRenderer0.getSeriesBarWidth(2073);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        layeredBarRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      String string0 = "csRF[tc";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("csRF[tc");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        levelRenderer0.calculateBarW0(combinedRangeCategoryPlot0, plotOrientation0, rectangle0, categoryAxis3D0, categoryItemRendererState0, 0, 0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: 0
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      int int0 = defaultCategoryItemRenderer0.getRowCount();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        scatterRenderer0.getDomainAxis(combinedRangeCategoryPlot0, defaultKeyedValues2DDataset0);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
      minMaxCategoryRenderer0.setMinIcon(icon0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      Color color0 = new Color(0, 0, 0);
      statisticalLineAndShapeRenderer0.setErrorIndicatorPaint(color0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Null 'orientation' argument.";
      stringArray0[1] = "";
      stringArray0[2] = "Null 'plot' argument.";
      Number[][] numberArray0 = new Number[4][8];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      numberArray2[0] = (Number) minMaxCategoryRenderer0.ZERO;
      numberArray2[1] = (Number) statisticalLineAndShapeRenderer0.ZERO;
      numberArray2[2] = (Number) minMaxCategoryRenderer0.ZERO;
      numberArray2[3] = (Number) statisticalLineAndShapeRenderer0.ZERO;
      numberArray2[4] = (Number) statisticalLineAndShapeRenderer0.ZERO;
      numberArray2[5] = (Number) statisticalLineAndShapeRenderer0.ZERO;
      double double0 = LineRenderer3D.DEFAULT_Y_OFFSET;
      numberArray2[6] = (Number) 8.0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[7];
      numberArray3[0] = (Number) minMaxCategoryRenderer0.ZERO;
      Float float0 = new Float((-749.9680445394924));
      numberArray3[1] = (Number) float0;
      numberArray3[2] = (Number) statisticalLineAndShapeRenderer0.ZERO;
      numberArray3[3] = (Number) stackedAreaRenderer0.ZERO;
      numberArray3[4] = (Number) minMaxCategoryRenderer0.ZERO;
      numberArray3[5] = (Number) minMaxCategoryRenderer0.ZERO;
      numberArray3[6] = (Number) statisticalLineAndShapeRenderer0.ZERO;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[5];
      Integer integer0 = (Integer)Plot.ZERO;
      numberArray4[0] = (Number) integer0;
      numberArray4[1] = (Number) statisticalLineAndShapeRenderer0.ZERO;
      numberArray4[2] = (Number) minMaxCategoryRenderer0.ZERO;
      numberArray4[3] = (Number) stackedAreaRenderer0.ZERO;
      numberArray4[4] = (Number) stackedAreaRenderer0.ZERO;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Paint paint0 = stackedAreaRenderer0.lookupSeriesOutlinePaint(0);
      int int0 = 0;
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedAreaRenderer0.getSeriesToolTipGenerator(0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      int int1 = 334;
      boolean boolean0 = false;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Comparable<IntervalCategoryItemLabelGenerator>[] comparableArray0 = (Comparable<IntervalCategoryItemLabelGenerator>[]) Array.newInstance(Comparable.class, 5);
      NumberTickUnit numberTickUnit0 = null;
      try {
        numberTickUnit0 = new NumberTickUnit(3239.05054605, (NumberFormat) null, (-6591));
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.axis.NumberTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = false;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      double double0 = 360.0;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryItemRendererState0.getEntityCollection();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "xTmUA;";
      stringArray0[2] = "";
      Number[][] numberArray0 = new Number[4][3];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) categoryStepRenderer0.ZERO;
      numberArray1[1] = (Number) stackedAreaRenderer0.ZERO;
      numberArray1[2] = (Number) stackedAreaRenderer0.ZERO;
      numberArray1[3] = (Number) categoryStepRenderer0.ZERO;
      numberArray1[4] = (Number) stackedAreaRenderer0.ZERO;
      numberArray1[5] = (Number) stackedAreaRenderer0.ZERO;
      numberArray1[6] = (Number) categoryStepRenderer0.ZERO;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      numberArray2[0] = (Number) categoryStepRenderer0.ZERO;
      numberArray2[1] = (Number) 5;
      numberArray2[2] = (Number) stackedAreaRenderer0.ZERO;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      numberArray3[0] = (Number) stackedAreaRenderer0.ZERO;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      numberArray4[0] = (Number) stackedAreaRenderer0.ZERO;
      numberArray4[1] = (Number) stackedAreaRenderer0.ZERO;
      numberArray4[2] = (Number) 5;
      numberArray4[3] = (Number) categoryStepRenderer0.ZERO;
      numberArray4[4] = (Number) stackedAreaRenderer0.ZERO;
      numberArray4[5] = (Number) categoryStepRenderer0.ZERO;
      numberArray4[6] = (Number) categoryStepRenderer0.ZERO;
      numberArray4[7] = (Number) stackedAreaRenderer0.ZERO;
      numberArray4[8] = (Number) stackedAreaRenderer0.ZERO;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, 0.0);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("Null 'labelAnchor' argument.", 3.0, 4.0);
      boolean boolean0 = barRenderer3D0.equals(categoryTextAnnotation0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'labelAnchor' argument.", barRenderer3D0.DEFAULT_VALUE_LABEL_FONT, piePlot3D0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      boolean boolean0 = barRenderer0.getShadowsVisible();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getBaseFillPaint();
      LegendItem legendItem0 = new LegendItem("RectangleAnchor.BOTTOM", "RectangleAnchor.BOTTOM", "mYX9){;=S", "mYX9){;=S", ganttRenderer0.DEFAULT_SHAPE, barRenderer0.DEFAULT_STROKE, paint0);
      GradientPaintTransformer gradientPaintTransformer0 = legendItem0.getFillPaintTransformer();
      ganttRenderer0.setGradientPaintTransformer(gradientPaintTransformer0);
      Paint paint1 = ganttRenderer0.lookupSeriesPaint(20);
      Paint paint2 = ganttRenderer0.getIncompletePaint();
      ganttRenderer0.setShadowPaint(paint0);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      Line2D.Double line2D_Double0 = null;
      try {
        line2D_Double0 = new Line2D.Double((Point2D) null, (Point2D) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Line2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      intervalBarRenderer0.setItemLabelAnchorOffset(0.0);
      CategoryPlot categoryPlot0 = null;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      MultiTextUI multiTextUI0 = new MultiTextUI();
      JTextField jTextField0 = new JTextField();
      Position.Bias position_Bias0 = Position.Bias.Backward;
      // Undeclared exception!
      try { 
        multiTextUI0.modelToView((JTextComponent) jTextField0, 0, position_Bias0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = intervalBarRenderer0.createState(plotRenderingInfo0);
      CategoryURLGenerator categoryURLGenerator0 = intervalBarRenderer0.getURLGenerator(0, 2534, false);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      BufferedImageRenderingSource bufferedImageRenderingSource0 = null;
      try {
        bufferedImageRenderingSource0 = new BufferedImageRenderingSource((BufferedImage) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.BufferedImageRenderingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      stackedBarRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setBaseLinesVisible(false);
      Object object0 = stackedBarRenderer0.clone();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = stackedBarRenderer0.getItemLabelGenerator((-810), 0, false);
      stackedBarRenderer0.setSeriesItemLabelGenerator(335, (CategoryItemLabelGenerator) null);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setNegativeBarPaint(stackedBarRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.getFillBox();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.2, 0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      String string0 = " it is no IntervalXYDataset";
      Color color0 = Color.cyan;
      boxAndWhiskerRenderer0.setBaseLegendTextPaint(color0);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator(" it is no IntervalXYDataset");
      boxAndWhiskerRenderer0.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      Paint paint0 = boxAndWhiskerRenderer0.getArtifactPaint();
      boolean boolean0 = boxAndWhiskerRenderer0.equals("");
      int int0 = 0;
      CategoryToolTipGenerator categoryToolTipGenerator0 = boxAndWhiskerRenderer0.getToolTipGenerator(0, 0, true);
      boxAndWhiskerRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null, true);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(0, 0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(waferMapPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.WaferMapPlot cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }
}
