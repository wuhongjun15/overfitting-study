/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 13:40:11 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.image.BufferedImage;
import java.util.EventListener;
import javax.swing.JEditorPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3108.34956730968, 3108.34956730968);
      ModuloAxis moduloAxis0 = new ModuloAxis("a8%oey#,d", cyclicNumberAxis0.DEFAULT_RANGE);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(moduloAxis0);
      cyclicNumberAxis0.notifyListeners(axisChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, (String) null);
      RectangleInsets rectangleInsets0 = cyclicNumberAxis0.getTickLabelInsets();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'font' argument.");
      float float0 = extendedCategoryAxis0.getTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("0W]");
      ModuloAxis moduloAxis0 = new ModuloAxis("0W]", periodAxis0.DEFAULT_RANGE);
      moduloAxis0.setAxisLineVisible(true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.01, 0.01, "yc");
      Paint paint0 = cyclicNumberAxis0.getTickMarkPaint();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2500.0);
      Stroke stroke0 = cyclicNumberAxis0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3108.34956730968, 3108.34956730968);
      Paint paint0 = cyclicNumberAxis0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Dan Rivett");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      extendedCategoryAxis0.addChangeListener(multiplePiePlot0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1003.79752), "Y");
      double double0 = cyclicNumberAxis0.getFixedDimension();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3108.34956730968, 3108.34956730968);
      ModuloAxis moduloAxis0 = new ModuloAxis("a8%oey#,d", cyclicNumberAxis0.DEFAULT_RANGE);
      boolean boolean0 = moduloAxis0.isAxisLineVisible();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("?\"5zj^.{-l,g", combinedDomainCategoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(53, 53, (double) 0.0F, (double) 2.0F, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1582.4061, 2536.3508274767, (String) null);
      boolean boolean0 = cyclicNumberAxis0.hasListener((EventListener) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("[_>0,@%*kX'CU.'DAKu");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setTickMarkPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3108.34956730968, 3108.34956730968);
      ModuloAxis moduloAxis0 = new ModuloAxis("a8%oey#,d", cyclicNumberAxis0.DEFAULT_RANGE);
      JEditorPane jEditorPane0 = new JEditorPane();
      Color color0 = jEditorPane0.getSelectedTextColor();
      moduloAxis0.setTickMarkPaint(color0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'stroke' argument.");
      DateAxis dateAxis0 = new DateAxis("1289");
      dateAxis0.setTickMarkStroke(logarithmicAxis0.DEFAULT_TICK_MARK_STROKE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      Paint paint0 = combinedDomainXYPlot0.getDomainCrosshairPaint();
      logarithmicAxis0.setTickLabelPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E10, 1.0E10);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("j(?E!!g&zW%G");
      logarithmicAxis0.setTickLabelFont(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("kcotwk.$iBZq&l");
      BasicStroke basicStroke0 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      categoryAxis0.setAxisLineStroke(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SymbolAxis symbolAxis0 = new SymbolAxis("?\"5zj^.{-l,g", stringArray0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("?\"5zj^.{-l,g");
      logarithmicAxis0.setLabelInsets(symbolAxis0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("kcotwk.$iBZq&l");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("kcotwk.$iBZq&l");
      logarithmicAxis0.setLabelPaint(categoryAxis0.DEFAULT_TICK_MARK_PAINT);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("0W]");
      periodAxis0.setLabel((String) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1648.815341));
      cyclicNumberAxis0.setLabel(":~;");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(413.5159231381, (String) null);
      cyclicNumberAxis0.setTickMarkInsideLength(473.5183F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "org.jfree.chart.block.LineBorder");
      cyclicNumberAxis0.removeChangeListener((AxisChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.01, 0.01, "yc");
      String string0 = cyclicNumberAxis0.getLabelURL();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setLabelAngle(0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("kcotwk.$iBZq&l");
      categoryAxis0.setTickMarkOutsideLength(0.0F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("j(?E!!g&zW%G");
      Paint paint0 = logarithmicAxis0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1582.4061, 2536.3508274767, (String) null);
      Object object0 = cyclicNumberAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2500.0);
      cyclicNumberAxis0.setLabelURL("E5Ta`7!4O]nQI");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(147.2610296270022, "Null 'font' argument.");
      cyclicNumberAxis0.setFixedDimension(147.2610296270022);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("j(?E!!g&zW%G");
      Font font0 = logarithmicAxis0.getLabelFont();
  }
}
