/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 13:40:04 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.SimpleTimeZone;
import javax.swing.JInternalFrame;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.TextAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTick;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.Quarter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.141592653589793, 1781.0);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(cyclicNumberAxis0);
      cyclicNumberAxis0.notifyListeners(axisChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("Null 'paint' argument.", simpleTimeZone0);
      dateAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("", quarter0, quarter0, quarter0.DEFAULT_TIME_ZONE);
      boolean boolean0 = periodAxis0.isVisible();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("*^k&dP\"F^/hw$of!>8");
      numberAxis3D0.setAxisLineVisible(true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      Font font0 = subCategoryAxis0.getTickLabelFont();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      Paint paint0 = cyclicNumberAxis0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("j]*T}i8[-fo2AO");
      Paint paint0 = dateAxis0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
      boolean boolean0 = subCategoryAxis0.hasListener(jTableHeader0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("TextBlockAnchor.TOP_CENTER");
      numberAxis0.setTickLabelInsets(numberAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.setTickLabelInsets(periodAxis0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.141592653589793, 1781.0);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setTickLabelPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("=#Iako}@Jhp6/d:");
      Number[][] numberArray0 = new Number[1][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      Paint paint0 = multiplePiePlot0.getAggregatedItemsPaint();
      extendedCategoryAxis0.setTickLabelPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickLabelsVisible(false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("TextBlockAnchor.TOP_CENTER");
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'paint' argument.");
      subCategoryAxis0.setAxisLinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("*^k&dP\"F^/hw$of!>8");
      numberAxis3D0.setLabelInsets(numberAxis3D0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.setLabel("");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "*:*");
      cyclicNumberAxis0.setTickMarkInsideLength(3.0F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      PeriodAxis periodAxis0 = new PeriodAxis((String) null, quarter0, quarter0, quarter0.DEFAULT_TIME_ZONE);
      String string0 = periodAxis0.getLabelToolTip();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      numberAxis0.removeChangeListener(piePlot3D0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1661.20294555081));
      cyclicNumberAxis0.setLabelToolTip(":q1zU{BJm{Ji");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(")V{9y?fZ56\"K");
      logarithmicAxis0.setLabelAngle((-321.6119841531));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2192.0);
      cyclicNumberAxis0.setTickMarkOutsideLength((-3137.67F));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Stroke stroke0 = categoryAxis3D0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3467L);
      Day day0 = new Day(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("QbL1x)c", day0, day0, day0.DEFAULT_TIME_ZONE);
      Object object0 = periodAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("\"");
      extendedCategoryAxis0.setFixedDimension(0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      ModuloAxis moduloAxis0 = new ModuloAxis("Null 'font' argument.", numberAxis0.DEFAULT_RANGE);
      Paint paint0 = moduloAxis0.getTickMarkPaint();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2.0F, 231.3, 0.0, 0.0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      TextAnchor textAnchor0 = TextAnnotation.DEFAULT_ROTATION_ANCHOR;
      NumberTick numberTick0 = new NumberTick(231.3, "", textAnchor0, textAnchor0, (-2855.86366285315));
      float[] floatArray0 = logarithmicAxis0.calculateAnchorPoint(numberTick0, 2.5E11, rectangle2D_Double0, (RectangleEdge) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("op");
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        dateAxis0.draw((Graphics2D) null, 1059.50119556, rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("a}>>J\behEC.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1928, 1, 6, chartRenderingInfo0);
  }
}
