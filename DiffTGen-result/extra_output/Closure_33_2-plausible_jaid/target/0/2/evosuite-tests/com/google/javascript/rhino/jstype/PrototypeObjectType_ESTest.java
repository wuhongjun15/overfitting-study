/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 07:22:07 GMT 2020
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.SimpleSlot;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PrototypeObjectType_ESTest extends PrototypeObjectType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      simpleErrorReporter0.error("Not declared as a constructor", "Not declared as a type name", 0, 4636);
      jSTypeRegistry0.incrementGeneration();
      boolean boolean0 = errorFunctionType0.isNumberObjectType();
      simpleErrorReporter0.error("", "W0&3gbz*?A*", 0, 0);
      functionType0.clearResolved();
      boolean boolean1 = functionType0.matchesObjectContext();
      boolean boolean2 = errorFunctionType0.isSubtype(functionType0);
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[0] = (JSType) functionType0;
      jSTypeArray0[1] = (JSType) errorFunctionType0;
      jSTypeArray0[2] = (JSType) errorFunctionType0;
      jSTypeArray0[3] = (JSType) functionType0;
      jSTypeArray0[4] = (JSType) errorFunctionType0;
      jSTypeArray0[5] = (JSType) functionType0;
      jSTypeArray0[6] = (JSType) errorFunctionType0;
      jSTypeArray0[7] = (JSType) functionType0;
      jSTypeArray0[8] = (JSType) functionType0;
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, jSTypeArray0);
      Node node0 = new Node(4636, 0, 31);
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(functionType0, node0);
      Node node1 = recordTypeBuilder_RecordProperty0.getPropertyNode();
      Node node2 = new Node(0, node0, node1, node0, node0, 29, 39);
      // Undeclared exception!
      try { 
        FunctionType.forInterface(jSTypeRegistry0, (String) null, node2);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "|QDvHHbV$xoKMX;.J");
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) templateType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSTypeArray0[0], jSTypeArray0);
      FunctionType functionType1 = jSTypeRegistry0.createConstructorTypeWithVarArgs(templateType0, jSTypeArray0);
      FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType1, templateType0);
      boolean boolean0 = functionType1.isNumber();
      boolean boolean1 = false;
      boolean boolean2 = false;
      Node node0 = Node.newNumber((double) 1, 23, 3054);
      Node node1 = new Node(1, node0, node0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, templateType0, functionType1);
      Node node2 = indexedType0.getPropertyNode("");
      Node node3 = null;
      try {
        node3 = new Node((-4975), node1, node1, (Node) null, (Node) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSType jSType0 = noObjectType0.getPropertyType("#N");
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = (JSType) noObjectType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = (JSType) noObjectType0;
      jSTypeArray0[6] = (JSType) noObjectType0;
      jSTypeArray0[7] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(noObjectType0, functionType0);
      jSTypeRegistry0.registerTypeImplementingInterface(functionType0, objectType0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = hashMap0.remove((Object) simpleErrorReporter0, (Object) booleanType0);
      boolean boolean1 = recordType0.isPropertyInExterns("");
      Iterable<ObjectType> iterable0 = recordType0.getCtorImplementedInterfaces();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.BOOLEAN_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSTypeNative jSTypeNative3 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[3] = jSTypeNative3;
      simpleErrorReporter0.error("com.google.javascript.rhino.jstype.PrototypeObjectType", "com.google.javascript.rhino.jstype.PrototypeObjectType", (-861), (-861));
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      String string0 = recordType0.getReferenceName();
      // Undeclared exception!
      try { 
        recordType0.isPropertyInExterns((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("com.google.javascript.rhino.jstype.NamedType$PropertyContinuation", "^,", 678, 678);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      Node node0 = functionType0.getPropertyNode("");
      boolean boolean0 = functionType0.canBeCalled();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0);
      ObjectType objectType0 = instanceObjectType0.getImplicitPrototype();
      JSType jSType0 = noObjectType0.resolveInternal(simpleErrorReporter0, objectType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      boolean boolean0 = instanceObjectType0.defineProperty("q4M#_mH.?aSV]Rb0N@", noObjectType0, false, node0);
      Node node1 = functionType0.getPropertyNode("VwbCd%8Enu $Bw`");
      simpleErrorReporter0.warning("Not declared as a constructor", "Unknown class name", 0, 37);
      instanceObjectType0.setPrettyPrint(true);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", (Node) null, objectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      boolean boolean1 = enumElementType0.isPropertyTypeInferred("Not declared as a constructor");
      noObjectType0.matchConstraint(enumElementType0);
      noObjectType0.setPrettyPrint(true);
      boolean boolean2 = instanceObjectType0.isPropertyTypeInferred("Unknown class name");
      JSType jSType1 = JSType.safeResolve(functionType0, simpleErrorReporter0, instanceObjectType0);
      SimpleSlot simpleSlot0 = new SimpleSlot("Not declared as a constructor", jSType1, true);
      JSDocInfo jSDocInfo0 = simpleSlot0.getJSDocInfo();
      noObjectType0.setPropertyJSDocInfo("Named type with empty name component", (JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node((-2075), node0, node0, 0, 0);
      Node node2 = new Node(0, node1, (-1266), 1396);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, (ObjectType) null, (JSType) null);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node2, indexedType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) arrowType0, (List<JSType>) linkedList0);
      boolean boolean0 = functionType0.isPropertyTypeInferred("");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      simpleErrorReporter0.error("", "", 1062, 8367);
      Node node0 = errorFunctionType0.getParametersNode();
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((String) null, node0, (ObjectType) errorFunctionType0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", objectType0);
      boolean boolean0 = prototypeObjectType0.isPrettyPrint();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      boolean boolean0 = jSTypeRegistry0.hasNamespace((String) null);
      EnumElementType enumElementType0 = recordType0.toMaybeEnumElementType();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      simpleErrorReporter0.error("", "Not declared as a constructor", 0, 440);
      simpleErrorReporter0.warning("", "Not declared as a type name", 0, 1);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 1, 1, 1939);
      nodeArray0[0] = node0;
      Node node1 = new Node(1, nodeArray0);
      node1.setVarArgs(false);
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, node1);
      boolean boolean1 = hashMap0.replace("Not declared as a type name", recordTypeBuilder_RecordProperty0, recordTypeBuilder_RecordProperty0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) linkedList0);
      FunctionType functionType1 = functionType0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "`\"}})x");
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, errorFunctionType0);
      boolean boolean0 = functionType1.isPrettyPrint();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      VoidType voidType0 = new VoidType(jSTypeRegistry1);
      JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(jSType0, jSTypeArray0);
      boolean boolean0 = functionType0.matchesNumberContext();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry1.createInterfaceType("A-", (Node) null);
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = (JSType) functionType0;
      jSTypeArray0[1] = (JSType) functionType0;
      jSTypeArray0[2] = (JSType) functionType0;
      jSTypeArray0[3] = (JSType) functionType0;
      jSTypeArray0[4] = (JSType) functionType0;
      jSTypeArray0[5] = (JSType) functionType0;
      jSTypeArray0[6] = (JSType) functionType0;
      jSTypeArray0[7] = (JSType) functionType0;
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, true, jSTypeArray0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, jSTypeArray0[1]);
      JSDocInfo jSDocInfo0 = indexedType0.getJSDocInfo();
      functionType1.setPropertyJSDocInfo("A-", (JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      ObjectType.Property objectType_Property0 = noType0.getSlot("8]WlQ9tlr^g");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "-dT");
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(0);
      simpleErrorReporter0.error("Not declared as a type name", ":c:b)", 931, (-231));
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      boolean boolean0 = linkedList0.add((JSType) functionType0);
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) functionType0, (JSType) errorFunctionType0, (List<JSType>) linkedList0);
      boolean boolean1 = functionType0.isStringObjectType();
      JSType jSType1 = functionType0.collapseUnion();
      boolean boolean2 = functionType0.isDateType();
      ObjectType objectType0 = functionType0.getParentScope();
      functionType0.setOwnerFunction(errorFunctionType0);
      ObjectType objectType1 = functionType0.getParentScope();
      JSDocInfo jSDocInfo0 = errorFunctionType0.getOwnPropertyJSDocInfo("Named type with empty name component");
      boolean boolean3 = errorFunctionType0.hasProperty("#");
      Node node0 = errorFunctionType0.getPropertyNode("java.io.IOException: Cannot run program \"");
      boolean boolean4 = errorFunctionType0.hasCachedValues();
      functionType0.matchConstraint(errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ObjectType objectType0 = noResolvedType0.getImplicitPrototype();
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "R**\"3tW", (ObjectType) null, false);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "valueOf");
      simpleErrorReporter0.error("valueOf", "?", 0, (-844));
      Node node0 = Node.newNumber(1.0, 4, 4);
      jSTypeRegistry0.setLastGeneration(false);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, node0);
      FunctionType functionType1 = errorFunctionType0.getSuperClassConstructor();
      JSType jSType0 = errorFunctionType0.getLeastSupertype(functionType1);
      ObjectType objectType0 = functionType1.getImplicitPrototype();
      JSType jSType1 = functionType1.autoboxesTo();
      // Undeclared exception!
      try { 
        errorFunctionType0.setImplicitPrototype(functionType1);
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "nQ.,k");
      simpleErrorReporter0.error("Not declared as a constructor", "p.k7w:0Md2EqXrP", 0, 1);
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(3288);
      functionType0.setPrettyPrint(false);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(functionType0);
      boolean boolean0 = functionType0.isNumberObjectType();
      int int0 = functionType0.getPropertiesCount();
      FunctionType functionType1 = functionType0.getOwnerFunction();
      boolean boolean1 = errorFunctionType0.isPropertyInExterns("Not declared as a constructor");
      boolean boolean2 = errorFunctionType0.hasCachedValues();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      Iterable<JSType> iterable0 = jSTypeRegistry0.getTypesWithProperty("Unknown class name");
      boolean boolean0 = recordType0.canBeCalled();
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = hashMap0.put("Not declared as a type name", (RecordTypeBuilder.RecordProperty) null);
      Node node0 = Node.newNumber((-1.0), 4040, 1);
      Node node1 = node0.removeFirstChild();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, recordType0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.setPrototypeBasedOn((ObjectType) recordType0, node0);
      boolean boolean1 = recordType0.isObject();
      JSType jSType0 = recordType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      Node node2 = Node.newString("Not declared as a type name");
      String string0 = recordType0.toStringHelper(false);
      boolean boolean2 = noResolvedType0.matchesObjectContext();
      Set<String> set0 = enumType0.getOwnPropertyNames();
      boolean boolean3 = noResolvedType0.defineInferredProperty("t+m4r]1nYtT@$O}Sa", recordType0, node0);
      ObjectType.Property objectType_Property0 = recordType0.getSlot("");
      boolean boolean4 = noResolvedType0.isPropertyTypeInferred("Named type with empty name component");
      ObjectType.Property objectType_Property1 = recordType0.getSlot("BOOLEAN_OBJECT_FUNCTION_TYPE");
      boolean boolean5 = enumType0.hasOwnProperty("{}");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry1, "");
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(58);
      JSType[] jSTypeArray0 = new JSType[5];
      JSType jSType0 = functionType0.getPropertyType("Unknown class name");
      boolean boolean0 = functionType0.isNumberObjectType();
      jSTypeArray0[0] = (JSType) functionType0;
      jSTypeArray0[1] = (JSType) errorFunctionType0;
      jSTypeArray0[2] = (JSType) errorFunctionType0;
      jSTypeArray0[3] = (JSType) functionType0;
      jSTypeArray0[4] = (JSType) errorFunctionType0;
      FunctionType functionType1 = jSTypeRegistry0.createConstructorType((JSType) functionType0, jSTypeArray0);
      ObjectType.Property objectType_Property0 = functionType1.getOwnSlot("Unknown class name");
      boolean boolean1 = functionType1.removeProperty("Not declared as a constructor");
      boolean boolean2 = functionType0.isPropertyTypeInferred("Not declared as a type name");
      // Undeclared exception!
      try { 
        functionType0.removeProperty((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "z,n");
      FunctionType functionType0 = errorFunctionType0.toMaybeFunctionType();
      boolean boolean0 = functionType0.matchesStringContext();
      boolean boolean1 = functionType0.matchesStringContext();
      JSType jSType0 = errorFunctionType0.unboxesTo();
      boolean boolean2 = errorFunctionType0.isPropertyTypeInferred((String) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      String string0 = "";
      simpleErrorReporter0.warning("", "", (-999), 8198);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isNativeObjectType();
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      ObjectType objectType0 = errorFunctionType0.getInstanceType();
      ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "valueOf");
      Node node0 = errorFunctionType1.getSource();
      Node node1 = null;
      try {
        node1 = new Node(0, (Node) null, (Node) null, (Node) null, (Node) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node((-452), 0, 1022);
      Node node1 = new Node((-452), node0, node0, node0, node0, 16, 43);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("2:)LYutF/?v4Z\"oNO", node1, stringType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      UnionType unionType0 = enumType1.toMaybeUnionType();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, (List<JSType>) linkedList0);
      String string0 = functionType0.getReferenceName();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "DadB;C{wO[{");
      Node node0 = errorFunctionType0.getSource();
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "", (Node) null);
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      functionType0.collectPropertyNames(set0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      ObjectType.Property objectType_Property0 = noObjectType0.getSlot("");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "z.:|qU");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      jSTypeArray0[1] = (JSType) errorFunctionType0;
      jSTypeArray0[2] = (JSType) errorFunctionType0;
      ObjectType objectType0 = jSTypeRegistry1.createAnonymousObjectType();
      jSTypeArray0[3] = (JSType) objectType0;
      FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) errorFunctionType0, jSTypeArray0);
      FunctionType functionType1 = errorFunctionType0.supAndInfHelper(functionType0, true);
      Iterable<ObjectType> iterable0 = functionType1.getCtorExtendedInterfaces();
  }
}
