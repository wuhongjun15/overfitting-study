/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 07:25:04 GMT 2020
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PrototypeObjectType_ESTest extends PrototypeObjectType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("", "", (-1), (-1));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = (JSType) noType0;
      jSTypeArray0[1] = (JSType) noType0;
      jSTypeArray0[2] = (JSType) noType0;
      jSTypeArray0[3] = (JSType) noType0;
      jSTypeArray0[4] = (JSType) noType0;
      jSTypeArray0[5] = (JSType) noType0;
      jSTypeArray0[6] = (JSType) noType0;
      jSTypeArray0[7] = (JSType) noType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, jSTypeArray0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "(Z~E]:6", noType0, false);
      JSType jSType0 = prototypeObjectType0.unboxesTo();
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      Iterable<ObjectType> iterable0 = prototypeObjectType0.getCtorImplementedInterfaces();
      boolean boolean0 = prototypeObjectType0.matchesObjectContext();
      TernaryValue ternaryValue0 = functionType0.testForEqualityHelper(jSTypeArray0[4], jSTypeArray0[4]);
      boolean boolean1 = noType0.hasProperty("?G/H)");
      boolean boolean2 = prototypeObjectType0.isPropertyInExterns(".:");
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      ObjectType.Property objectType_Property0 = noType0.getSlot("Not declared as a constructor");
      JSType jSType1 = prototypeObjectType0.unboxesTo();
      functionType0.setPrettyPrint(false);
      prototypeObjectType0.setPrettyPrint(true);
      boolean boolean3 = functionType0.hasProperty("\u0006xnO:G8");
      Node node1 = prototypeObjectType0.getPropertyNode("Zgc/CO96{S4'MNgUHrV");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "dfcVsn6Ic%p*.NxvrD");
      ObjectType.Property objectType_Property0 = errorFunctionType0.getOwnSlot("");
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      int int0 = functionType0.getMinArguments();
      boolean boolean1 = functionType0.isEquivalentTo(errorFunctionType0);
      Node node0 = functionType0.getPropertyNode("Unknown class name");
      functionType0.matchConstraint(errorFunctionType0);
      // Undeclared exception!
      try { 
        simpleErrorReporter0.error((String) null, "Unknown class name", 31, 31);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ", ");
      Node node0 = errorFunctionType0.getSource();
      EnumType enumType0 = jSTypeRegistry0.createEnumType(", ", (Node) null, errorFunctionType0);
      JSType jSType0 = enumType0.unboxesTo();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ", ...");
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, templateType0, templateType0);
      boolean boolean0 = indexedType0.isPropertyTypeInferred("Not declared as a type name");
      boolean boolean1 = templateType0.isImplicitPrototype(indexedType0);
      EnumElementType enumElementType0 = indexedType0.toMaybeEnumElementType();
      JSType jSType0 = templateType0.forceResolve((ErrorReporter) null, indexedType0);
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = (JSType) templateType0;
      jSTypeArray0[1] = (JSType) indexedType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = (JSType) indexedType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, jSTypeArray0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null);
      boolean boolean2 = prototypeObjectType0.hasReferenceName();
      prototypeObjectType0.setImplicitPrototype((ObjectType) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType jSType0 = allType0.unboxesTo();
      boolean boolean0 = instanceObjectType0.defineProperty("@i:/{G7]<5}`!LD #X", (JSType) null, true, (Node) null);
      simpleErrorReporter0.error("e}Ti[18Rm0a", (String) null, 1, 1);
      ObjectType objectType0 = instanceObjectType0.getImplicitPrototype();
      boolean boolean1 = instanceObjectType0.isSubtype(objectType0);
      noObjectType0.collectPropertyNames((Set<String>) null);
      JSDocInfo jSDocInfo0 = instanceObjectType0.getJSDocInfo();
      boolean boolean2 = noObjectType0.removeProperty("Not declared as a type name");
      instanceObjectType0.matchConstraint(objectType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      noObjectType0.setPropertyJSDocInfo("", jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "nc!OJ)L9Yhy~$i{mmb~");
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Unknown class name", (Node) null);
      FunctionType functionType1 = errorFunctionType0.supAndInfHelper(functionType0, false);
      FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType1, functionType0);
      ObjectType objectType0 = functionType2.getImplicitPrototype();
      Node node0 = functionType0.getPropertyNode("Named type with empty name component");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Q]WE;B'K{CG;p");
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      functionType0.setOwnerFunction(errorFunctionType0);
      boolean boolean0 = JSType.isSubtypeHelper(functionType0, functionType0);
      boolean boolean1 = functionType0.hasOwnProperty("Not declared as a type name");
      boolean boolean2 = functionType0.matchesStringContext();
      JSDocInfo jSDocInfo0 = functionType0.getOwnPropertyJSDocInfo("Not declared as a type name");
      // Undeclared exception!
      try { 
        functionType0.setImplicitPrototype(errorFunctionType0);
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      noType0.setPrettyPrint(true);
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderInequality(unionType0);
      boolean boolean0 = noType0.matchesNumberContext();
      JSType jSType0 = noType0.unboxesTo();
      JSType jSType1 = noType0.getPropertyType("");
      FunctionType functionType0 = noType0.getConstructor();
      // Undeclared exception!
      try { 
        noType0.matchConstraint((ObjectType) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.PrototypeObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "E7vOuy:>N";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "E7vOuy:>N");
      boolean boolean0 = errorFunctionType0.matchesInt32Context();
      FunctionType functionType0 = errorFunctionType0.toMaybeFunctionType();
      Node node0 = Node.newString("Named type with empty name component");
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node0, "d%c[BYpC]vsfP!", functionType0);
      JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;
      JSType jSType1 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      // Undeclared exception!
      try { 
        simpleErrorReporter0.error((String) null, "E7vOuy:>N", 1, 0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      RecordType recordType1 = recordType0.toMaybeRecordType();
      simpleErrorReporter0.error("Not declared as a type name", "Not declared as a constructor", 0, 1809);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType1, recordType0);
      RecordType recordType2 = indexedType0.toMaybeRecordType();
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(indexedType0, (Node) null);
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = Node.newString("X{Wv", 41, (-187));
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) indexedType0;
      jSTypeArray0[1] = (JSType) indexedType0;
      jSTypeArray0[2] = (JSType) indexedType0;
      jSTypeArray0[3] = (JSType) recordType1;
      jSTypeArray0[4] = (JSType) recordType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType1, jSTypeArray0);
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty2 = new RecordTypeBuilder.RecordProperty(recordType2, node0);
      JSType jSType0 = JSType.getGreatestSubtype((JSType) indexedType0, (JSType) recordType2);
      boolean boolean0 = hashMap0.replace("Not declared as a constructor", recordTypeBuilder_RecordProperty2, recordTypeBuilder_RecordProperty2);
      boolean boolean1 = recordType2.isPropertyTypeInferred("Dvxndk.+k*C");
      JSType jSType1 = recordType2.resolveInternal(simpleErrorReporter0, indexedType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "}L?nhlps;a7$U", recordType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = null;
      LinkedList<NumberType> linkedList0 = new LinkedList<NumberType>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>(linkedList0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList1);
      UnionType unionType1 = unionType0.toMaybeUnionType();
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      boolean boolean0 = linkedList0.add(numberType0);
      NumberType numberType1 = linkedList0.pollFirst();
      boolean boolean1 = numberType1.isUnknownType();
      NoObjectType noObjectType0 = (NoObjectType)unionType1.meet(unionType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, (Node) null, noObjectType0);
      JSType.TypePair jSType_TypePair0 = unionType1.getTypesUnderEquality(numberType1);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      boolean boolean2 = enumType1.hasCachedValues();
      Set<String> set0 = enumType1.getOwnPropertyNames();
      boolean boolean3 = enumType0.isPropertyTypeInferred("");
      boolean boolean4 = enumType1.canBeCalled();
      // Undeclared exception!
      try { 
        linkedList0.remove(0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry1.getNativeFunctionType(jSTypeNative0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      jSTypeRegistry0.identifyNonNullableName("");
      NoType noType0 = new NoType(jSTypeRegistry0);
      boolean boolean0 = noType0.matchesNumberContext();
      int int0 = noType0.getPropertiesCount();
      ObjectType.Property objectType_Property0 = noType0.getSlot("CkK6");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType jSType0 = nullType0.restrictByNotNullOrUndefined();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);
      JSType jSType1 = functionType0.getGreatestSubtype(nullType0);
      UnresolvedTypeExpression unresolvedTypeExpression0 = null;
      try {
        unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, (Node) null, "need root before directory at line %d of file %s%n");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(errorFunctionType0, errorFunctionType0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType1 = jSTypeRegistry0.createConstructorTypeWithVarArgs(errorFunctionType0, jSTypeArray0);
      simpleErrorReporter0.error("Not declared as a constructor", "Unknown class name", 523, 0);
      simpleErrorReporter0.warning("Not declared as a type name", "Not declared as a type name", 0, 77);
      FunctionType functionType2 = errorFunctionType0.supAndInfHelper(functionType0, true);
      String string0 = functionType2.getReferenceName();
      simpleErrorReporter0.error("Named type with empty name component", "yO,s", 307, 23);
      boolean boolean0 = errorFunctionType0.isSubtype(functionType2);
      boolean boolean1 = functionType2.isPrettyPrint();
      String string1 = errorFunctionType0.toStringHelper(true);
      boolean boolean2 = errorFunctionType0.matchesObjectContext();
      FunctionType functionType3 = functionType2.getOwnerFunction();
      boolean boolean3 = functionType2.isPropertyTypeInferred("{");
      functionType2.matchConstraint(functionType0);
      boolean boolean4 = errorFunctionType0.matchesObjectContext();
      boolean boolean5 = functionType0.isNativeObjectType();
      FunctionType functionType4 = functionType0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      JSType jSType0 = unionType0.restrictByNotNullOrUndefined();
      ObjectType objectType0 = ObjectType.cast(jSType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, (List<JSType>) linkedList0);
      functionType0.setPrettyPrint(false);
      boolean boolean0 = functionType0.isPropertyTypeDeclared("Not declared as a type name");
      boolean boolean1 = functionType0.isNativeObjectType();
  }
}
