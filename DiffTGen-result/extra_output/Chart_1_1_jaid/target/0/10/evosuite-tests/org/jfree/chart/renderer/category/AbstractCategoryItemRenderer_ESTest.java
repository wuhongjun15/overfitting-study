/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 13:51:20 GMT 2020
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.event.HierarchyListener;
import java.awt.geom.GeneralPath;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.sql.Connection;
import java.sql.Statement;
import java.text.ChoiceFormat;
import java.util.Date;
import java.util.EventListener;
import java.util.Stack;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.JList;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.multi.MultiTabbedPaneUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.AreaRendererEndType;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarPainter;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GradientBarPainter;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      EntityCollection entityCollection0 = null;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        categoryStepRenderer0.addEntity((EntityCollection) null, statisticalBarRenderer0.DEFAULT_SHAPE, defaultKeyedValues2DDataset0, (-25), (-91), true, (double) minMaxCategoryRenderer0.ZERO, (-25));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryItemRendererState0.getEntityCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      int[] intArray0 = new int[0];
      categoryItemRendererState0.setVisibleSeriesArray(intArray0);
      Range range0 = waterfallBarRenderer0.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(categoryItemRendererState0);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultMultiValueCategoryDataset0, 366, (-2916), true, (-2916), (-2916));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(771.866809, 771.866809);
      barRenderer3D0.setMinimumBarLength(0.6428571428571429);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      GradientBarPainter gradientBarPainter0 = new GradientBarPainter(1.0, 0.2, 1.0);
      groupedStackedBarRenderer0.setBarPainter(gradientBarPainter0);
      Color color0 = (Color)PeriodAxisLabelInfo.DEFAULT_LABEL_PAINT;
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(8.0, 0.0, 8.0, 60.1400971, color0, groupedStackedBarRenderer0.DEFAULT_STROKE);
      boolean boolean0 = groupedStackedBarRenderer0.equals(categoryLineAnnotation0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueAxis valueAxis0 = groupedStackedBarRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 10);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(valueAxis0.DEFAULT_AXIS_LABEL_PAINT, barRenderer3D0.DEFAULT_OUTLINE_PAINT, valueAxis0.DEFAULT_AXIS_LABEL_PAINT, valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      waterfallBarRenderer0.setPositiveBarPaint(groupedStackedBarRenderer0.DEFAULT_PAINT);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("JE#w?QhQ?$@Z;DEvi", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 0, 15, (-2335), (-823), 10, false, true, true, true, true, false);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Object object0 = scatterRenderer0.clone();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategoryDataset categoryDataset0 = null;
      stackedBarRenderer0.setAutoPopulateSeriesOutlineStroke(false);
      Range range0 = stackedBarRenderer0.findRangeBounds((CategoryDataset) null);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(stackedBarRenderer0.DEFAULT_PAINT, levelRenderer0.DEFAULT_PAINT, stackedBarRenderer0.DEFAULT_PAINT, stackedBarRenderer0.DEFAULT_PAINT);
      waterfallBarRenderer0.setFirstBarPaint(stackedBarRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      scatterRenderer0.setItemMargin(0.2);
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity((EntityCollection) null, stackedBarRenderer0.DEFAULT_SHAPE, (CategoryDataset) null, (-138), (-138), true, (-1.0), 2.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      int int0 = 244;
      boolean boolean0 = defaultCategoryItemRenderer0.getItemLineVisible(1247, 244);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(1247, 1247, 0);
      Date date0 = segmentedTimeline0.getDate((-1L));
      Hour hour0 = new Hour(date0);
      int int1 = hour0.getMonth();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.updateCrosshairValues(categoryCrosshairState0, hour0, (-2208988800000L), 2.0, 244, 2097.832448285695, (-1319.0), (PlotOrientation) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("?!h5W4T]z=S7B.S`N", stackedAreaRenderer1.ZERO, 0.0);
      categoryTextAnnotation0.setRotationAngle((double) stackedAreaRenderer0.ZERO);
      boolean boolean0 = stackedAreaRenderer1.removeAnnotation(categoryTextAnnotation0);
      boolean boolean1 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("?!h5W4T]z=S7B.S`N", piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, true, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = 999;
      Shape shape0 = minMaxCategoryRenderer0.lookupLegendShape(999);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addEntity((EntityCollection) null, shape0, jDBCCategoryDataset0, 999, 0, true, 999, 999);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.setSeriesURLGenerator(3, (CategoryURLGenerator) null, true);
      AreaRendererEndType areaRendererEndType0 = AreaRendererEndType.TRUNCATE;
      stackedAreaRenderer0.setEndType(areaRendererEndType0);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedAreaRenderer0.getLegendItemToolTipGenerator();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "z");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = categoryStepRenderer0.getLegendItemToolTipGenerator();
      categoryStepRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      categoryStepRenderer0.removeAnnotations();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      defaultCategoryItemRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0);
      int int0 = defaultCategoryItemRenderer0.hashCode();
      double double0 = defaultCategoryItemRenderer0.getItemMargin();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setMeanVisible(false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(86, 5, 12.0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(waferMapPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1356), (-1), 10, (-4358), 15, (-4031), false, false, false, true, false, false, false);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.setBaseLegendShape((Shape) null);
      double double0 = barRenderer3D0.getXOffset();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      boolean boolean0 = categoryStepRenderer0.getStagger();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = barRenderer3D0.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      CategoryCrosshairState categoryCrosshairState0 = categoryStepRenderer_State0.getCrosshairState();
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second(mockDate0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      scatterRenderer0.updateCrosshairValues((CategoryCrosshairState) null, second0, second0, 819.0, 0, 2072.61661336, 819.0, plotOrientation0);
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      scatterRenderer0.setLegendTextFont(954, font0);
      boolean boolean0 = scatterRenderer0.getUseFillPaint();
      // Undeclared exception!
      try { 
        Font.createFont((-597), (File) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) scatterRenderer0.ZERO;
      doubleArray1[1] = 2089.5;
      doubleArray1[2] = (double) scatterRenderer0.ZERO;
      doubleArray1[3] = (double) scatterRenderer0.ZERO;
      doubleArray1[4] = (double) scatterRenderer0.ZERO;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) scatterRenderer0.ZERO;
      doubleArray2[1] = (double) scatterRenderer0.ZERO;
      doubleArray2[2] = (double) scatterRenderer0.ZERO;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) scatterRenderer0.ZERO;
      doubleArray2[5] = 2089.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) scatterRenderer0.ZERO;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (double) scatterRenderer0.ZERO;
      doubleArray3[3] = (-2933.258825628139);
      doubleArray3[4] = 2089.5;
      doubleArray3[5] = (double) scatterRenderer0.ZERO;
      doubleArray3[6] = (double) scatterRenderer0.ZERO;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (double) scatterRenderer0.ZERO;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (double) scatterRenderer0.ZERO;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 2089.5;
      doubleArray5[1] = (-2933.258825628139);
      doubleArray5[2] = (double) scatterRenderer0.ZERO;
      doubleArray5[3] = (double) scatterRenderer0.ZERO;
      doubleArray5[4] = (double) scatterRenderer0.ZERO;
      doubleArray5[5] = 1.0;
      doubleArray5[6] = (-2933.258825628139);
      doubleArray5[7] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-1607.0);
      doubleArray6[2] = (double) scatterRenderer0.ZERO;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (-1607.0);
      doubleArray7[1] = (double) scatterRenderer0.ZERO;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 1.0;
      doubleArray7[4] = 0.0;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        scatterRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Paint paint0 = statisticalBarRenderer0.getLegendTextPaint((-481));
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getURLGenerator((-2278), 3378, true);
      minMaxCategoryRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      ItemLabelPosition itemLabelPosition0 = defaultPolarItemRenderer0.getNegativeItemLabelPosition(0, (-2278), true);
      statisticalBarRenderer0.setPositiveItemLabelPositionFallback(itemLabelPosition0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Number[][] numberArray0 = new Number[3][9];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = (Number) minMaxCategoryRenderer0.ZERO;
      numberArray2[1] = (Number) 3.0;
      numberArray2[2] = (Number) 0.2;
      numberArray2[3] = (Number) 3.0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      numberArray3[0] = (Number) statisticalBarRenderer0.ZERO;
      numberArray3[1] = (Number) minMaxCategoryRenderer0.ZERO;
      numberArray3[2] = (Number) defaultPolarItemRenderer0.ZERO;
      numberArray3[3] = (Number) minMaxCategoryRenderer0.ZERO;
      numberArray3[4] = (Number) minMaxCategoryRenderer0.ZERO;
      numberArray3[5] = (Number) minMaxCategoryRenderer0.ZERO;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = scatterRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      GradientBarPainter gradientBarPainter0 = new GradientBarPainter();
      BarRenderer.setDefaultBarPainter(gradientBarPainter0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      double double0 = statisticalBarRenderer0.calculateSeriesWidth(1.0, categoryAxis3D0, 3378, (-363));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = statisticalLineAndShapeRenderer0.createState(plotRenderingInfo0);
      Stroke stroke0 = combinedDomainXYPlot0.getDomainGridlineStroke();
      combinedDomainXYPlot0.setForegroundAlpha(1628.6F);
      IntervalMarker intervalMarker0 = new IntervalMarker((-1920.01474), 2.0, statisticalLineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker((-1654), (Marker) intervalMarker0, layer0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxisLocation((-1), (AxisLocation) null);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setAutoPopulateSeriesStroke(false);
      Paint paint0 = scatterRenderer0.lookupSeriesOutlinePaint((-1448));
      scatterRenderer0.setUseSeriesOffset(false);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getURLGenerator((-1448), 0, false);
      // Undeclared exception!
      try { 
        ganttRenderer0.setSeriesURLGenerator((-3063), (CategoryURLGenerator) null, false);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      statisticalBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      boolean boolean0 = lineAndShapeRenderer0.getUseOutlinePaint();
      LegendItemCollection legendItemCollection0 = statisticalBarRenderer0.getLegendItems();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      double double0 = 1618.881;
      int int0 = 0;
      float[][] floatArray0 = new float[1][8];
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      floatArray1[2] = 834.875F;
      floatArray1[3] = (float) 0;
      floatArray1[4] = (float) 0;
      floatArray1[5] = (float) 0;
      floatArray0[0] = floatArray1;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.04, (-1.5707963267948966));
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      Shape shape0 = intervalBarRenderer0.lookupLegendShape(0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      intervalBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, false);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(layeredBarRenderer0);
      taskSeriesCollection0.seriesChanged(seriesChangeEvent0);
      Range range0 = intervalBarRenderer0.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null, true);
      Stroke stroke0 = minMaxCategoryRenderer0.getGroupStroke();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.setRenderAsPercentages(true);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-1194.7), 0.0, true);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      double double0 = scatterRenderer0.getItemMargin();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setDataBoundsIncludesVisibleSeriesOnly(true);
      boolean boolean0 = groupedStackedBarRenderer0.equals(levelRenderer0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D0.setSeriesLinesVisible((-1656), true);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.isMeanVisible();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getSeriesItemLabelGenerator(0);
      boxAndWhiskerRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null);
      boxAndWhiskerRenderer0.removeAnnotations();
      boxAndWhiskerRenderer0.setAutoPopulateSeriesStroke(false);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setItemMargin(5.0E9);
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.removeAnnotations();
      Stroke stroke0 = statisticalBarRenderer0.getErrorIndicatorStroke();
      GradientBarPainter gradientBarPainter0 = new GradientBarPainter(3983.212, (double) minMaxCategoryRenderer0.ZERO, 0.0);
      BarRenderer.setDefaultBarPainter(gradientBarPainter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(3.0, (double) groupedStackedBarRenderer0.ZERO, 0.2, (-498.328280219407), groupedStackedBarRenderer0.DEFAULT_PAINT, groupedStackedBarRenderer0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      groupedStackedBarRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      groupedStackedBarRenderer0.setAutoPopulateSeriesShape(false);
      Object object0 = groupedStackedBarRenderer0.clone();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-498.328280219407), 0.2);
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", barRenderer3D0.DEFAULT_VALUE_LABEL_FONT, polarPlot0, true);
      PolarChartPanel polarChartPanel0 = new PolarChartPanel(jFreeChart0, false);
      // Undeclared exception!
      try { 
        polarChartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.initialise((Graphics2D) null, rectangle2D0, (CategoryPlot) null, (CategoryDataset) null, plotRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = new MinMaxCategoryRenderer();
      Paint paint0 = minMaxCategoryRenderer1.getLegendTextPaint(2562);
      Icon icon0 = minMaxCategoryRenderer1.getMaxIcon();
      minMaxCategoryRenderer0.setMinIcon(icon0);
      CategoryToolTipGenerator categoryToolTipGenerator0 = minMaxCategoryRenderer0.getToolTipGenerator(1577, 0, false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean0 = lineRenderer3D0.getUseSeriesOffset();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) minMaxCategoryRenderer0.ZERO, (double) minMaxCategoryRenderer0.ZERO);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-681), (-681));
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(waferMapPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(31, 10);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      boxAndWhiskerRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, false);
      boolean boolean0 = boxAndWhiskerRenderer0.isMedianVisible();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Paint paint0 = ganttRenderer0.getIncompletePaint();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setUseOutlinePaint(false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      String string0 = null;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((String) null, scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, (Plot) null, true);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      LegendItemCollection legendItemCollection0 = statisticalLineAndShapeRenderer0.getLegendItems();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      boolean boolean0 = stackedBarRenderer3D0.getRenderAsPercentages();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getBaseToolTipGenerator();
      groupedStackedBarRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      GeneralPath generalPath0 = new GeneralPath(groupedStackedBarRenderer0.DEFAULT_SHAPE);
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      int int0 = 3424;
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel((JFreeChart) null, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Stroke stroke0 = statisticalBarRenderer0.getErrorIndicatorStroke();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemToolTipGenerator();
      groupedStackedBarRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      boolean boolean0 = groupedStackedBarRenderer0.equals(stroke0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      double double0 = ganttRenderer0.getStartPercent();
      GradientBarPainter gradientBarPainter0 = new GradientBarPainter((-1.0), 0.0, (double) statisticalBarRenderer0.ZERO);
      statisticalBarRenderer0.setBarPainter(gradientBarPainter0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Paint paint0 = defaultCategoryItemRenderer0.getLegendTextPaint(0);
      DrawingSupplier drawingSupplier0 = defaultCategoryItemRenderer0.getDrawingSupplier();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("org.jfree.chart.imagemap.StandardURLTagFragmentGenerator", defaultCategoryItemRenderer0.ZERO, 1196.72156375105);
      Layer layer0 = Layer.BACKGROUND;
      defaultCategoryItemRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 1139, 0, 273, 5, 1139, (-1692), false, false, true, false, true, true, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(stackedAreaRenderer0.ZERO, 1.0, stackedAreaRenderer0.ZERO, (double) stackedAreaRenderer0.ZERO, stackedAreaRenderer0.DEFAULT_OUTLINE_PAINT, stackedAreaRenderer0.DEFAULT_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      stackedAreaRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      statisticalLineAndShapeRenderer0.setUseFillPaint(false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Graphics2D graphics2D0 = null;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.getRangeAxis((CategoryPlot) null, 10);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = categoryStepRenderer0.getLegendItemURLGenerator();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      int int0 = (-1401);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("P6");
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("P6", choiceFormat0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Paint paint0 = spiderWebPlot0.getSeriesOutlinePaint(2419);
      int int1 = statisticalBarRenderer0.hashCode();
      statisticalBarRenderer0.setErrorIndicatorPaint(paint0);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.setSeriesItemLabelGenerator((-1401), (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      boolean boolean0 = true;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      GradientBarPainter gradientBarPainter0 = new GradientBarPainter();
      intervalBarRenderer0.setBarPainter(gradientBarPainter0);
      boolean boolean1 = intervalBarRenderer0.equals(stackedBarRenderer0);
      intervalBarRenderer0.setShadowYOffset(3.4028234663852886E38);
      CategoryToolTipGenerator categoryToolTipGenerator0 = intervalBarRenderer0.getSeriesToolTipGenerator(0);
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer0.getSeriesURLGenerator(0);
      // Undeclared exception!
      try { 
        stackedBarRenderer0.setSeriesURLGenerator((-3935), (CategoryURLGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      String string0 = "\"[#9*A";
      int int0 = 21;
      MockDate mockDate0 = new MockDate(21, (-2660), 21, (-739), 0, 21);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("\"[#9*A", regularTimePeriod0, 4);
      boolean boolean0 = stackedBarRenderer0.removeAnnotation(categoryTextAnnotation0);
      stackedBarRenderer0.setIncludeBaseInRange(false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-2660), 10, 21, 2128.056F);
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        rectangle2D_Float0.createUnion((Rectangle2D) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Rectangle2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CategoryURLGenerator categoryURLGenerator0 = barRenderer3D0.getBaseURLGenerator();
      barRenderer3D0.setSeriesURLGenerator(3, (CategoryURLGenerator) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(scatterRenderer0.DEFAULT_VALUE_LABEL_PAINT, scatterRenderer0.DEFAULT_PAINT, scatterRenderer0.DEFAULT_VALUE_LABEL_PAINT, scatterRenderer0.DEFAULT_PAINT);
      boolean boolean0 = scatterRenderer0.equals(waterfallBarRenderer0);
      waterfallBarRenderer0.setNegativeBarPaint(scatterRenderer0.DEFAULT_OUTLINE_PAINT);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setAutoPopulateSeriesPaint(false);
      boolean boolean1 = defaultCategoryItemRenderer0.getUseFillPaint();
      boolean boolean2 = defaultCategoryItemRenderer0.getUseFillPaint();
      boolean boolean3 = defaultCategoryItemRenderer0.getDrawOutlines();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      int int0 = 0;
      boolean boolean4 = false;
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getToolTipGenerator(0, 0, false);
      boolean boolean5 = true;
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setSeriesToolTipGenerator((-334), (CategoryToolTipGenerator) null, true);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.lookupSeriesOutlinePaint(276);
      Paint paint1 = defaultPolarItemRenderer0.getItemPaint((-695), (-695), false);
      stackedBarRenderer0.setBaseLegendTextPaint(paint1);
      boolean boolean0 = stackedBarRenderer0.equals((Object) null);
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      Object object0 = customCategoryURLGenerator0.clone();
      stackedBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, true);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      statisticalLineAndShapeRenderer0.setUseFillPaint(true);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setMedianVisible(true);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setItemMargin((-3692.408909252794));
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("ItemLabelGenerator not cloneable.");
      double double0 = levelRenderer0.calculateSeriesWidth(4.0, categoryAxis3D0, (-261), (-261));
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = levelRenderer0.getItemLabelGenerator((-2633), (-1), true);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      double double1 = ganttRenderer0.calculateSeriesWidth(0.2, categoryAxis3D0, (-1), (-2633));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setAutoPopulateSeriesPaint(true);
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = minMaxCategoryRenderer0.getSeriesItemLabelGenerator(0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      BasicStroke basicStroke0 = (BasicStroke)PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(boxAndWhiskerRenderer0.ZERO, 7.0, boxAndWhiskerRenderer0.ZERO, (double) boxAndWhiskerRenderer0.ZERO, boxAndWhiskerRenderer0.DEFAULT_VALUE_LABEL_PAINT, basicStroke0);
      boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      boxAndWhiskerRenderer0.setFillBox(false);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setAutoPopulateSeriesStroke(false);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((double) lineRenderer3D0.ZERO, 8.0);
      barRenderer3D0.setItemMargin(8.0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = null;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        lineRenderer3D0.getDomainAxis((CategoryPlot) null, defaultStatisticalCategoryDataset0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      Shape shape0 = lineAndShapeRenderer0.lookupLegendShape(0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.setBaseSeriesOutlineStroke(lineAndShapeRenderer0.DEFAULT_OUTLINE_STROKE);
      CategoryToolTipGenerator categoryToolTipGenerator0 = spiderWebPlot0.getToolTipGenerator();
      lineAndShapeRenderer0.setSeriesToolTipGenerator(52, (CategoryToolTipGenerator) null);
      lineAndShapeRenderer0.setBaseShapesVisible(false);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      String string0 = "";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((String) null, "", (String) null, "");
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      Graphics2D graphics2D0 = null;
      CategoryItemRendererState categoryItemRendererState0 = null;
      Rectangle rectangle0 = new Rectangle();
      String string0 = "Null 'orientation' argument.";
      NumberAxis numberAxis0 = new NumberAxis("Null 'orientation' argument.");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.getDomainAxis(combinedRangeCategoryPlot0, defaultKeyedValues2DDataset0);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) styleContext0;
      objectArray0[1] = (Object) styleContext0;
      ChangeListener[] changeListenerArray0 = styleContext0.getChangeListeners();
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet0 = styleContext0.new SmallAttributeSet(objectArray0);
      AttributeSet attributeSet0 = styleContext0.addAttributes(styleContext_SmallAttributeSet0, styleContext_SmallAttributeSet0);
      Color color0 = styleContext0.getBackground(attributeSet0);
      SystemColor systemColor0 = SystemColor.windowBorder;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(color0, systemColor0, systemColor0, systemColor0);
      waterfallBarRenderer0.setMinimumBarLength(1234.111);
      waterfallBarRenderer0.setLastBarPaint(color0);
      CategoryURLGenerator categoryURLGenerator0 = waterfallBarRenderer0.getSeriesURLGenerator(0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.setRenderAsPercentages(true);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = false;
      CategoryURLGenerator categoryURLGenerator0 = boxAndWhiskerRenderer0.getURLGenerator(0, 0, false);
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      xYLine3DRenderer0.setLegendLine(boxAndWhiskerRenderer0.DEFAULT_SHAPE);
      Paint paint0 = xYLine3DRenderer0.getWallPaint();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(boxAndWhiskerRenderer0.DEFAULT_PAINT, boxAndWhiskerRenderer0.DEFAULT_VALUE_LABEL_PAINT, boxAndWhiskerRenderer0.DEFAULT_PAINT, paint0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      Stack<CategoryStepRenderer> stack0 = new Stack<CategoryStepRenderer>();
      JList<CategoryStepRenderer> jList0 = new JList<CategoryStepRenderer>(stack0);
      Rectangle rectangle0 = jList0.getCellBounds(1628, 39);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.getItemMiddle(12.0, boxAndWhiskerRenderer0.ZERO, defaultCategoryDataset0, subCategoryAxis0, (Rectangle2D) null, (RectangleEdge) null);
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.clear();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setMaximumBarWidth((-25));
      // Undeclared exception!
      try { 
        categoryStepRenderer0.addEntity((EntityCollection) null, statisticalBarRenderer0.DEFAULT_SHAPE, defaultKeyedValues2DDataset0, (-25), (-91), true, (double) minMaxCategoryRenderer0.ZERO, (-25));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      stackedAreaRenderer0.setAutoPopulateSeriesOutlinePaint(false);
      BarRenderer.setDefaultShadowsVisible(false);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis3D0, logarithmicAxis0, stackedBarRenderer3D0);
      CategoryAxis categoryAxis0 = stackedAreaRenderer0.getDomainAxis(categoryPlot0, defaultStatisticalCategoryDataset0);
      boolean boolean0 = stackedAreaRenderer0.equals(stackedBarRenderer3D0);
      int int0 = stackedAreaRenderer0.getRowCount();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean1 = scatterRenderer0.getSeriesShapesFilled(1158);
      double double0 = stackedBarRenderer3D0.getYOffset();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      statisticalLineAndShapeRenderer0.setDrawOutlines(false);
      CategoryPlot categoryPlot0 = statisticalLineAndShapeRenderer0.getPlot();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 87);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.getDomainAxis((CategoryPlot) null, slidingGanttCategoryDataset0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      int int0 = 2571;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Paint paint0 = lineAndShapeRenderer0.lookupSeriesPaint(2571);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getBaseItemLabelGenerator();
      boolean boolean0 = false;
      statisticalBarRenderer0.setMaximumBarWidth(0.0);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemToolTipGenerator();
      lineAndShapeRenderer0.setLegendItemToolTipGenerator((CategorySeriesLabelGenerator) null);
      statisticalBarRenderer0.setAutoPopulateSeriesPaint(false);
      lineAndShapeRenderer0.setSeriesItemLabelGenerator(2571, (CategoryItemLabelGenerator) null, false);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Paint paint1 = waterfallBarRenderer0.getNegativeBarPaint();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean1 = waterfallBarRenderer0.getShadowsVisible();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Rectangle rectangle0 = new Rectangle();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-2581.947532359869), "rO}XC|d.z");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis0, cyclicNumberAxis0, lineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 2571, 605, 67, 500, 2213, true, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        ganttRenderer0.createHotSpotBounds((Graphics2D) null, rectangle0, categoryPlot0, categoryAxis0, cyclicNumberAxis0, defaultCategoryDataset0, 1925, 2213, true, categoryStepRenderer_State0, rectangle0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1925, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = defaultCategoryItemRenderer0.getBaseToolTipGenerator();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.setSeriesToolTipGenerator((-2315), (CategoryToolTipGenerator) null, true);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Icon icon0 = minMaxCategoryRenderer0.getMinIcon();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DateAxis dateAxis0 = new DateAxis("j4waDv#4o\"u07E8=9h");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis3D0, dateAxis0, minMaxCategoryRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("j4waDv#4o\"u07E8=9h", categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Paint paint0 = lineRenderer3D0.lookupSeriesPaint(0);
      Paint paint1 = lineRenderer3D0.lookupLegendTextPaint(0);
      lineRenderer3D0.setXOffset((-777.2396998136469));
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getItemLabelGenerator((-1476), 0, false);
      lineRenderer3D0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getBaseToolTipGenerator();
      stackedBarRenderer0.setSeriesToolTipGenerator(182, (CategoryToolTipGenerator) null, true);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      CategoryPlot categoryPlot0 = barRenderer0.getPlot();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      boolean boolean0 = boxAndWhiskerRenderer0.hasListener((EventListener) null);
      Paint paint0 = boxAndWhiskerRenderer0.getArtifactPaint();
      int int0 = boxAndWhiskerRenderer0.getRowCount();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      boolean boolean1 = lineAndShapeRenderer0.getBaseShapesVisible();
      // Undeclared exception!
      try { 
        BarRenderer.setDefaultBarPainter((BarPainter) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'painter' argument.
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Graphics2D graphics2D0 = null;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0);
      int int0 = 279;
      Point point0 = new Point(279, 279);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      NumberAxis numberAxis0 = new NumberAxis("i+_$pe6MRz");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      Number[][] numberArray0 = new Number[6][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0.2;
      numberArray1[1] = (Number) 1.0F;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = (Number) 1.0F;
      numberArray2[1] = (Number) 500;
      numberArray2[2] = (Number) 0.2;
      numberArray2[3] = (Number) 279;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      numberArray3[0] = (Number) 0.05;
      numberArray3[1] = (Number) 2.0F;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      numberArray4[0] = (Number) 1.0E-8;
      numberArray4[1] = (Number) 10;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      numberArray5[0] = (Number) stackedBarRenderer3D0.ZERO;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[4];
      numberArray6[0] = (Number) 1.0E-8;
      numberArray6[1] = (Number) statisticalBarRenderer0.ZERO;
      numberArray6[2] = (Number) 0.2;
      numberArray6[3] = (Number) 3.0;
      numberArray0[5] = numberArray6;
      Number[][] numberArray7 = new Number[6][5];
      numberArray7[0] = numberArray4;
      numberArray7[1] = numberArray2;
      numberArray7[2] = numberArray5;
      Number[] numberArray8 = new Number[3];
      numberArray8[0] = (Number) 8.0;
      numberArray8[1] = (Number) 0;
      numberArray8[2] = (Number) 10;
      numberArray7[3] = numberArray8;
      numberArray7[4] = numberArray3;
      numberArray7[5] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray7);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.initialise((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, defaultIntervalCategoryDataset0, plotRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      Stroke stroke0 = stackedBarRenderer0.lookupSeriesOutlineStroke((-17));
      stackedBarRenderer0.setMaximumBarWidth(861.9);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Vector<IntervalCategoryItemLabelGenerator> vector0 = new Vector<IntervalCategoryItemLabelGenerator>();
      DefaultComboBoxModel<IntervalCategoryItemLabelGenerator> defaultComboBoxModel0 = new DefaultComboBoxModel<IntervalCategoryItemLabelGenerator>(vector0);
      JList<IntervalCategoryItemLabelGenerator> jList0 = new JList<IntervalCategoryItemLabelGenerator>(defaultComboBoxModel0);
      Point point0 = jList0.indexToLocation(10);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.findSubplot(plotRenderingInfo0, (Point2D) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int0 = (-2223);
      int int1 = (-1423);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        scatterRenderer0.setSeriesURLGenerator((-2057), (CategoryURLGenerator) standardCategoryURLGenerator0, true);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Paint paint0 = waterfallBarRenderer0.getNegativeBarPaint();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Object object0 = defaultCategoryItemRenderer0.clone();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(object0, false);
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategoryPlot categoryPlot0 = null;
      Object object0 = stackedBarRenderer0.clone();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(object0);
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      MultiTabbedPaneUI multiTabbedPaneUI0 = new MultiTabbedPaneUI();
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      // Undeclared exception!
      try { 
        multiTabbedPaneUI0.getTabBounds(jTabbedPane0, 0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
