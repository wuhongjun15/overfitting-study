/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 12:49:41 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.image.BufferedImage;
import javax.swing.JList;
import javax.swing.JViewport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.block.GridArrangement;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.time.Second;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'textAnchor' argument.");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(extendedCategoryAxis0);
      extendedCategoryAxis0.notifyListeners(axisChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(500, 0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      GridArrangement gridArrangement0 = new GridArrangement(2304, 2304);
      LegendTitle legendTitle0 = new LegendTitle(waferMapPlot0, gridArrangement0, gridArrangement0);
      PeriodAxis periodAxis0 = new PeriodAxis("ky");
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      // Undeclared exception!
      try { 
        periodAxis0.draw((Graphics2D) null, 0.0, rectangle0, rectangle0, legendTitle0.DEFAULT_POSITION, (PlotRenderingInfo) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickMarksVisible(true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("SansSerif");
      Paint paint0 = dateAxis0.getAxisLinePaint();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("DUr^K3h]w?");
      Stroke stroke0 = subCategoryAxis0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Plot plot0 = dateAxis0.getPlot();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      RectangleInsets rectangleInsets0 = cyclicNumberAxis0.getTickLabelInsets();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Unrecognised position.");
      double double0 = logarithmicAxis0.getFixedDimension();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ZaKp~Wf?y8AC2Ro0l");
      float float0 = subCategoryAxis0.getTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("sccB=] }Oyj}`dP0j");
      logarithmicAxis0.setAxisLineVisible(true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("R }byA[qZ]$f ");
      float float0 = numberAxis0.getTickMarkInsideLength();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("R }byA[qZ]$f ");
      String string0 = numberAxis0.getLabel();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("`");
      boolean boolean0 = subCategoryAxis0.isAxisLineVisible();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      periodAxis0.setPlot(combinedDomainXYPlot0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Second second0 = new Second();
      PeriodAxis periodAxis0 = new PeriodAxis("", second0, second0, second0.DEFAULT_TIME_ZONE);
      boolean boolean0 = periodAxis0.isTickLabelsVisible();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      Paint paint0 = extendedCategoryAxis0.getTickMarkPaint();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("F,zEt-so]YYl@DsuG=%");
      boolean boolean0 = categoryAxis0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("SansSerif");
      DateAxis dateAxis1 = new DateAxis();
      boolean boolean0 = dateAxis0.equals(dateAxis1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      boolean boolean0 = cyclicNumberAxis0.hasListener(thermometerPlot0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      // Undeclared exception!
      try { 
        dateAxis0.setTickMarkPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("y?fI,0f(&=");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setTickMarkStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(772.965847447, "org.jfree.chart.renderer.category.AreaRenderer");
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Stroke stroke0 = stackedAreaRenderer0.getItemStroke(2204, 273);
      cyclicNumberAxis0.setTickMarkStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      cyclicNumberAxis0.setTickMarksVisible(true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickLabelInsets(logarithmicAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("1MdG\"WWGXrPdnNj_");
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(500, 0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      GridArrangement gridArrangement0 = new GridArrangement(2304, 2304);
      LegendTitle legendTitle0 = new LegendTitle(waferMapPlot0, gridArrangement0, gridArrangement0);
      logarithmicAxis0.setTickLabelInsets(legendTitle0.DEFAULT_PADDING);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      Object[] objectArray0 = new Object[0];
      JList<Object> jList0 = new JList<Object>(objectArray0);
      Color color0 = jList0.getSelectionBackground();
      extendedCategoryAxis0.setTickLabelPaint(color0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SymbolAxis symbolAxis0 = new SymbolAxis("CategoryLabelEntity: ", stringArray0);
      symbolAxis0.setTickLabelFont(symbolAxis0.DEFAULT_TICK_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-193.4106324), (-193.4106324));
      cyclicNumberAxis0.setTickLabelsVisible(false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("&48.>%wB", stringArray0);
      symbolAxis0.setTickLabelsVisible(true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("R }byA[qZ]$f ");
      PiePlot piePlot0 = new PiePlot();
      Stroke stroke0 = piePlot0.getLabelOutlineStroke();
      numberAxis0.setAxisLineStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("U7al");
      // Undeclared exception!
      try { 
        numberAxis0.setAxisLinePaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      Object[] objectArray0 = new Object[0];
      JList<Object> jList0 = new JList<Object>(objectArray0);
      Color color0 = jList0.getSelectionBackground();
      extendedCategoryAxis0.setAxisLinePaint(color0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setLabelInsets((RectangleInsets) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setLabelInsets(dateAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      // Undeclared exception!
      try { 
        categoryAxis0.setLabelPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setLabelPaint(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("DZ8P1+Y5P[c%|^V");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1513.0), "");
      cyclicNumberAxis0.setLabelFont(subCategoryAxis0.DEFAULT_TICK_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("`");
      subCategoryAxis0.setLabel((String) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabel("Brian Cole");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("DUr^K3h]w?");
      subCategoryAxis0.setTickMarkInsideLength(0.0F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("SansSerif");
      String string0 = dateAxis0.getLabelToolTip();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      cyclicNumberAxis0.removeChangeListener((AxisChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Dx>\"4dRre'&,ty*c");
      String string0 = extendedCategoryAxis0.getLabelURL();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("Jelai Wang");
      numberAxis0.setLabelAngle(0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      cyclicNumberAxis0.setTickMarkOutsideLength((-2606.0F));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1500.9982542366272, "UA5Xps7+j$4<@tPsd3t");
      RectangleInsets rectangleInsets0 = cyclicNumberAxis0.getLabelInsets();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("org.jfree.chart.plot.CombinedRangeXYPlot");
      Object object0 = categoryAxis3D0.clone();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setLabelURL("Null 'stroke' argument.");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setFixedDimension(0.05);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(600, 12, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("X\rTjX~Ws&|wkL");
      Font font0 = categoryAxis3D0.getLabelFont();
  }
}
