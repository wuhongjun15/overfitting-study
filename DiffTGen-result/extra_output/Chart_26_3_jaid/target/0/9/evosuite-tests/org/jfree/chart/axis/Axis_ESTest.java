/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 12:50:09 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.IndexColorModel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.plaf.synth.SynthTextPaneUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.JTextComponent;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickMarkPosition;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTick;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.axis.ValueTick;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.time.DateRange;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("T_u>2]w5S/tu@6h9*^");
      logarithmicAxis0.setAutoTickUnitSelection(false, false);
      logarithmicAxis0.zoomRange(1.0, 1.0);
      logarithmicAxis0.autoRangeNextLogFlag = false;
      double double0 = logarithmicAxis0.computeLogFloor((-1605.76218));
      PeriodAxis periodAxis0 = new PeriodAxis("T_u>2]w5S/tu@6h9*^");
      Class<CombinedDomainXYPlot> class0 = CombinedDomainXYPlot.class;
      periodAxis0.setMajorTickTimePeriodClass(class0);
      periodAxis0.setMinorTickMarksVisible(false);
      float float0 = periodAxis0.getTickMarkInsideLength();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.";
      NumberAxis numberAxis0 = new NumberAxis("NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.");
      // Undeclared exception!
      try { 
        numberAxis0.setTickLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3862.86639, "Spider Web Plot");
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      Range range0 = Range.combine(dateRange0, cyclicNumberAxis0.DEFAULT_RANGE);
      cyclicNumberAxis0.setRangeWithMargins((Range) dateRange0);
      Plot plot0 = cyclicNumberAxis0.getPlot();
      cyclicNumberAxis0.setInverted(false);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Spider Web Plot");
      logarithmicAxis0.setLabelInsets(plot0.DEFAULT_INSETS);
      cyclicNumberAxis0.setFixedAutoRange(10);
      double double0 = logarithmicAxis0.computeLogCeil(0.05);
      double double1 = logarithmicAxis0.computeLogCeil(304.036);
      float float0 = logarithmicAxis0.getTickMarkOutsideLength();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Spider Web Plot");
      subCategoryAxis0.setSubLabelFont(cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setExpTickLabelsFlag(false);
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      logarithmicAxis0.setTickUnit(numberTickUnit0);
      logarithmicAxis0.setAllowNegativesFlag(false);
      MockDate mockDate0 = new MockDate(500, 193, 500, 0, 1231, 1231);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Month month0 = new Month(mockDate0, timeZone0);
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'font' argument.", month0, month0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Null 'font' argument.");
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      StringBuffer stringBuffer1 = mockSimpleDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      periodAxis0.setTickMarksVisible(true);
      Class class0 = periodAxis0.getAutoRangeTimePeriodClass();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      numberAxis3D0.setAxisLineStroke(basicStroke0);
      String string0 = numberAxis3D0.getLabelURL();
      ModuloAxis moduloAxis0 = new ModuloAxis("PLt~6/f)B19z,", numberAxis3D0.DEFAULT_RANGE);
      SynthTextPaneUI synthTextPaneUI0 = new SynthTextPaneUI();
      JTextField jTextField0 = new JTextField(2);
      // Undeclared exception!
      try { 
        synthTextPaneUI0.modelToView((JTextComponent) jTextField0, 2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicTextUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      int int0 = (-1810);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance((-1810), (double) 2.0F, 0.0);
      Font font0 = categoryAxis3D0.DEFAULT_TICK_LABEL_FONT.deriveFont(affineTransform0);
      categoryAxis3D0.setTickLabelFont(font0);
      Font font1 = categoryAxis3D0.getTickLabelFont((Comparable) "");
      boolean boolean0 = categoryAxis3D0.isTickLabelsVisible();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      String string0 = "Null 'paint' argument.";
      Font font2 = PiePlot.DEFAULT_LABEL_FONT;
      float[][] floatArray0 = new float[1][2];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) (-1810);
      floatArray1[1] = (float) (-1810);
      floatArray1[2] = 0.0F;
      floatArray0[0] = floatArray1;
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setLabel("al},\byHS");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("al},\byHS");
      short[][] shortArray0 = new short[2][6];
      short[] shortArray1 = new short[5];
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)2648;
      short short0 = (short)0;
      shortArray1[2] = (short)0;
      short short1 = (short)0;
      shortArray1[3] = (short)0;
      shortArray1[4] = (short) (-1295);
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[8];
      shortArray2[0] = (short) (-1295);
      shortArray2[1] = (short)0;
      shortArray2[2] = (short)0;
      shortArray2[3] = (short)2648;
      shortArray2[4] = (short)0;
      shortArray2[5] = (short) (-1295);
      shortArray2[6] = (short)0;
      shortArray2[7] = (short)0;
      shortArray0[1] = shortArray2;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(500, shortArray0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", thermometerPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((short) (-1295), 2585, byteArray0, 10, false);
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAnchor categoryAnchor0 = CategoryAnchor.END;
      int int0 = 2;
      int int1 = 600;
      Font font0 = Font.getFont("k+/", categoryAxis3D0.DEFAULT_AXIS_LABEL_FONT);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(100);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("k+/");
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext(affineTransform0, logarithmicAxis0, logarithmicAxis0);
      } catch(IllegalArgumentException e) {
         //
         // AA hint:org.jfree.chart.axis.LogarithmicAxis@1970f
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(18.058665982);
      boolean boolean0 = cyclicNumberAxis0.isTickLabelsVisible();
      boolean boolean1 = cyclicNumberAxis0.isAxisLineVisible();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4|FTz[F*!3";
      SymbolAxis symbolAxis0 = new SymbolAxis("4|FTz[F*!3", stringArray0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2.0F;
      floatArray0[3] = (float) 500;
      floatArray0[4] = 0.0F;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      int int0 = 0;
      ShortLookupTable shortLookupTable0 = null;
      try {
        shortLookupTable0 = new ShortLookupTable(0, (short[][]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.ShortLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "SerialDate.monthCodeToString: month outside valid range.";
      DateAxis dateAxis0 = new DateAxis("SerialDate.monthCodeToString: month outside valid range.");
      dateAxis0.setTickUnit((DateTickUnit) null);
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getTickPaint();
      dateAxis0.setAxisLinePaint(paint0);
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      TimeZone timeZone0 = dateAxis0.getTimeZone();
      int int0 = 0;
      Year year0 = null;
      try {
        year0 = new Year(0);
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (0) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      ModuloAxis moduloAxis0 = new ModuloAxis("SansSerif", dateRange0);
      moduloAxis0.setAutoRangeIncludesZero(true);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Font font0 = defaultPolarItemRenderer0.getBaseItemLabelFont();
      moduloAxis0.setTickLabelFont(font0);
      moduloAxis0.resizeRange(2523.7226420122, 0.0);
      float float0 = moduloAxis0.getTickMarkOutsideLength();
      Paint paint0 = moduloAxis0.getLabelPaint();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("SansSerif");
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      // Undeclared exception!
      try { 
        logarithmicAxis0.setRange((Range) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      short[][] shortArray0 = new short[3][3];
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short)800;
      short short0 = (short)6454;
      shortArray1[1] = (short)6454;
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[9];
      shortArray2[0] = (short)800;
      shortArray2[1] = (short)800;
      shortArray2[2] = (short)800;
      shortArray2[3] = (short)800;
      shortArray2[4] = (short)6454;
      shortArray2[5] = (short)800;
      shortArray2[6] = (short)6454;
      shortArray2[7] = (short)6454;
      shortArray2[8] = (short)800;
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[8];
      shortArray3[0] = (short)70;
      shortArray3[1] = (short)800;
      shortArray3[2] = (short)6454;
      shortArray3[3] = (short)6454;
      shortArray3[4] = (short)6454;
      shortArray3[5] = (short)800;
      shortArray3[6] = (short)800;
      shortArray3[7] = (short)6454;
      shortArray0[2] = shortArray3;
      ShortLookupTable shortLookupTable0 = null;
      try {
        shortLookupTable0 = new ShortLookupTable((-1), shortArray0);
      } catch(IllegalArgumentException e) {
         //
         // Offset must be greater than 0
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "All_Axes";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("All_Axes");
      subCategoryAxis0.setLabelAngle((-751.58));
      subCategoryAxis0.setVisible(true);
      subCategoryAxis0.addSubCategory("All_Axes");
      BasicStroke basicStroke0 = (BasicStroke)FastScatterPlot.DEFAULT_GRIDLINE_STROKE;
      subCategoryAxis0.setAxisLineStroke(basicStroke0);
      double double0 = subCategoryAxis0.getLabelAngle();
      Month month0 = new Month();
      Calendar calendar0 = MockCalendar.getInstance();
      long long0 = month0.getFirstMillisecond(calendar0);
      long long1 = month0.getMiddleMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("All_Axes", month0, month0, month0.DEFAULT_TIME_ZONE);
      periodAxis0.setMinorTickMarksVisible(true);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, periodAxis0, defaultPolarItemRenderer0);
      subCategoryAxis0.setPlot(polarPlot0);
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, 0);
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "e";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("e");
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_CROSSHAIR_STROKE;
      numberAxis3D0.setTickMarkStroke(basicStroke0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Ai");
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 794.0497872108;
      doubleArray0[1] = (double) 500;
      doubleArray0[2] = (double) 2.0F;
      AffineTransform affineTransform0 = null;
      try {
        affineTransform0 = new AffineTransform(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("java.awt.geom.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(" z}j@;XBy >YH0");
      logarithmicAxis0.setAutoTickIndex(73);
      double double0 = logarithmicAxis0.switchedLog10(5334.73036539);
      logarithmicAxis0.setTickMarkInsideLength(73);
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", simpleTimeZone0);
      boolean boolean0 = simpleTimeZone0.inDaylightTime(dateAxis0.DEFAULT_ANCHOR_DATE);
      boolean boolean1 = simpleTimeZone0.observesDaylightTime();
      Locale locale0 = new Locale("SansSerif", " z}j@;XBy >YH0");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      boolean boolean2 = hashSet0.add(locale0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) hashSet0);
      String string0 = simpleTimeZone0.getDisplayName(locale0);
      // Undeclared exception!
      try { 
        dateAxis0.setMaximumDate((Date) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'maximumDate' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      MeterPlot meterPlot0 = new MeterPlot();
      Object object0 = numberAxis0.clone();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      meterPlot0.setDataset(defaultValueDataset0);
      numberAxis0.setPlot(meterPlot0);
      numberAxis0.setLowerMargin(1741.129777835);
      numberAxis0.setVisible(true);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("u4*Zu-t@D9{Ec<>");
      boolean boolean0 = meterPlot0.equals(numberAxis3D0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("u4*Zu-t@D9{Ec<>");
      int int0 = subCategoryAxis0.getMaximumCategoryLabelLines();
      boolean boolean1 = subCategoryAxis0.hasListener(meterPlot0);
      boolean boolean2 = numberAxis0.hasListener(meterPlot0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "");
      cyclicNumberAxis0.setNegativeArrowVisible(true);
      cyclicNumberAxis0.setLabelURL("");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      int int0 = 4;
      Font font0 = defaultPolarItemRenderer0.getItemLabelFont(500, 4);
      cyclicNumberAxis0.setLabelFont(font0);
      double double0 = 1973.3311344;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2.0F;
      floatArray0[1] = 2.0F;
      floatArray0[2] = (float) 500;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 4;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = null;
      try {
        rescaleOp0 = new RescaleOp(floatArray0, (float[]) null, renderingHints0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.RescaleOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      JTable jTable0 = new JTable(0, 2);
      Rectangle rectangle0 = jTable0.getCellRect(1077, 571, true);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = categoryAxis0.getCategoryEnd((-625), (-1), rectangle0, rectangleEdge0);
      categoryAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits();
      DateAxis dateAxis0 = new DateAxis();
      TickUnitSource tickUnitSource1 = DateAxis.createStandardDateTickUnits();
      DateTickMarkPosition dateTickMarkPosition0 = dateAxis0.getTickMarkPosition();
      RingPlot ringPlot0 = new RingPlot();
      dateAxis0.addChangeListener(ringPlot0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "DR&-*<k?1F*=GN`";
      stringArray0[1] = "DR&-*<k?1F*=GN`";
      stringArray0[2] = "DR&-*<k?1F*=GN`";
      stringArray0[3] = "DR&-*<k?1F*=GN`";
      stringArray0[4] = "DR&-*<k?1F*=GN`";
      stringArray0[5] = "DR&-*<k?1F*=GN`";
      SymbolAxis symbolAxis0 = new SymbolAxis("DR&-*<k?1F*=GN`", stringArray0);
      Stack<String> stack0 = new Stack<String>();
      JTable jTable0 = new JTable(stack0, stack0);
      Color color0 = jTable0.getSelectionBackground();
      symbolAxis0.setTickMarkPaint(color0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.setAutoPopulateSeriesOutlinePaint(false);
      Paint paint0 = stackedAreaRenderer0.getSeriesItemLabelPaint(0);
      // Undeclared exception!
      try { 
        symbolAxis0.setGridBandPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.SymbolAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("r1\"7WQ>qwdh*(");
      logarithmicAxis0.setupNumberFmtObj();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String string0 = "SerialDate.monthCodeToQuarter: invalid month code.";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("SerialDate.monthCodeToQuarter: invalid month code.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.createLabel(1.0E-8, 0.0F, rectangleEdge0, (Graphics2D) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.G2TextMeasurer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeZone.setDefault(timeZone0);
      DateAxis dateAxis0 = new DateAxis("$o20_`Jn6(;s>", timeZone0);
      Date date0 = dateAxis0.getMinimumDate();
      PeriodAxis periodAxis0 = new PeriodAxis("']U]XE6^^4]^/-AU3k");
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextPane0.new AccessibleJTextComponent();
      Rectangle rectangle0 = jTextComponent_AccessibleJTextComponent0.getCharacterBounds(500);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge();
      // Undeclared exception!
      try { 
        periodAxis0.calculateAnchorPoint((ValueTick) null, 2935.0, (Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("uG", stringArray0);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)365;
      short short0 = (short)48;
      shortArray0[1] = (short)48;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)1458;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)603;
      short short1 = (short)0;
      shortArray0[6] = (short)0;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(500, shortArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      int int0 = (-14);
      // Undeclared exception!
      try { 
        shortLookupTable0.lookupPixel(shortArray0, shortArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // src[0]-offset is less than zero
         //
         verifyException("java.awt.image.ShortLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "0.000";
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickMinutes(zoneId0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      // Undeclared exception!
      try { 
        MockInstant.from(localDateTime0);
      } catch(DateTimeException e) {
         //
         // Unable to obtain Instant from TemporalAccessor: 2014-02-14T20:21 of type java.time.LocalDateTime
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "The 'data' array must have length == 2.";
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      Stroke stroke0 = clusteredXYBarRenderer0.lookupSeriesStroke(2828);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Range range0 = clusteredXYBarRenderer0.findDomainBounds(xYSeriesCollection0);
      ModuloAxis moduloAxis0 = new ModuloAxis("The 'data' array must have length == 2.", (Range) null);
      double double0 = moduloAxis0.getDisplayStart();
      Paint paint0 = moduloAxis0.getTickMarkPaint();
      boolean boolean0 = false;
      moduloAxis0.setAutoRange(false);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      String string1 = subCategoryAxis0.getCategoryLabelToolTip(moduloAxis0.DEFAULT_TICK_UNIT);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-42);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(410, 2828, byteArray0, byteArray0, byteArray0, byteArray0);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      float float0 = periodAxis0.getTickMarkOutsideLength();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      categoryAxis0.addCategoryLabelToolTip(0.0F, (String) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, (String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "42N3N^ <&4QCx");
      cyclicNumberAxis0.setLabelToolTip("");
      double double0 = cyclicNumberAxis0.getPeriod();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("42N3N^ <&4QCx");
      subCategoryAxis0.setSubLabelPaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      subCategoryAxis0.setTickMarkStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      Locale locale0 = Locale.GERMAN;
      TickUnitSource tickUnitSource0 = NumberAxis.createStandardTickUnits(locale0);
      String string0 = "'m";
      Minute minute0 = null;
      try {
        minute0 = new Minute(500, 0, (-844), (-863), 0);
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Minute minute0 = new Minute();
      Second second0 = new Second(1511, minute0);
      Class<CategoryPlot> class0 = CategoryPlot.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      String string0 = minute0.toString();
      Millisecond millisecond0 = new Millisecond(636, second0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      long long0 = millisecond0.getMiddleMillisecond(calendar0);
      PeriodAxis periodAxis0 = new PeriodAxis("=BPv\"vlpHy7lq", fixedMillisecond0, millisecond0);
      periodAxis0.setLabelAngle(1511);
      TimeZone timeZone0 = periodAxis0.getTimeZone();
      long long1 = millisecond0.getLastMillisecond(calendar0);
      Class<XYPlot> class2 = XYPlot.class;
      periodAxis0.setAutoRangeTimePeriodClass(class2);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1088.0747928, ":\b$Ss}JM");
      cyclicNumberAxis0.boundMappedToLastCycle = false;
      Object object0 = cyclicNumberAxis0.clone();
      cyclicNumberAxis0.setAutoRangeStickyZero(false);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      double double0 = categoryAxis0.getCategoryMargin();
      categoryAxis0.setMaximumCategoryLabelWidthRatio(2.0F);
      cyclicNumberAxis0.setAutoRangeMinimumSize(0.001, false);
      TimeZone timeZone1 = periodAxis0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle2D rectangle2D0 = categoryAxis0.DEFAULT_AXIS_LABEL_INSETS.createInsetRectangle((Rectangle2D) rectangle0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      double double0 = RectangleEdge.coordinate(rectangle2D0, rectangleEdge0);
      double double1 = categoryAxis0.calculateCategoryGapSize(0, rectangle2D0, rectangleEdge0);
      CategoryLabelPositions categoryLabelPositions0 = categoryAxis0.getCategoryLabelPositions();
      categoryAxis0.addCategoryLabelToolTip(1.0F, "");
      categoryAxis0.setFixedDimension((-1894.67392816069));
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "");
      TextAnchor textAnchor0 = XYTextAnnotation.DEFAULT_ROTATION_ANCHOR;
      NumberTick numberTick0 = new NumberTick(0.2, "K[cbe]q@K,N^VE", textAnchor0, textAnchor0, (-1521.48432019));
      float[] floatArray0 = cyclicNumberAxis0.calculateAnchorPoint(numberTick0, 213.0174, rectangle0, rectangleEdge0);
  }
}
