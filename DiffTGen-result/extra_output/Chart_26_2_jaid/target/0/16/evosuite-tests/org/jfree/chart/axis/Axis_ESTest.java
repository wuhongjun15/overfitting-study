/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:17:05 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.util.Date;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickMarkPosition;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setFixedDimension(0.0);
      Date date0 = dateAxis0.getMaximumDate();
      // Undeclared exception!
      try { 
        dateAxis0.setTickMarkPosition((DateTickMarkPosition) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'position' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      String string0 = null;
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        periodAxis0.valueToJava2D(1.0E-8, (Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String string0 = "~5^5yDl*5BOm=Um";
      categoryAxis0.setLabelToolTip("~5^5yDl*5BOm=Um");
      Object object0 = categoryAxis0.clone();
      Object object1 = categoryAxis0.clone();
      String string1 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3188.416902, (-372.6279));
      Range range0 = cyclicNumberAxis0.getDefaultAutoRange();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range1 = stackedAreaRenderer0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = "7!ROLY(Tc";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("7!ROLY(Tc");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "7!ROLY(Tc");
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 500;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2.0F;
      Kernel kernel0 = new Kernel(0, 500, floatArray0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      int int0 = 5754;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 5754, 901.565568597795, (double) 5754, chartRenderingInfo0);
      // Undeclared exception!
      try { 
        convolveOp0.filter(bufferedImage0, bufferedImage0);
      } catch(IllegalArgumentException e) {
         //
         // src image cannot be the same as the dst image
         //
         verifyException("java.awt.image.ConvolveOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'state' argument.");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("iqh2THt!Fn$vtB19z");
      String string0 = logarithmicAxis0.makeTickLabel(500, true);
      double double0 = logarithmicAxis0.switchedPow10((-1627.0));
      DateAxis dateAxis0 = new DateAxis("500");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Date date0 = dateAxis0.getMaximumDate();
      // Undeclared exception!
      try { 
        rectangle2D_Float0.createUnion((Rectangle2D) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Rectangle2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "";
      Minute minute0 = new Minute();
      String string1 = "";
      // Undeclared exception!
      try { 
        Week.parseWeek("");
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 32, (-486), 2, 0, 4864, 500, 32);
      Date date0 = dateTickUnit0.addToDate(dateAxis0.DEFAULT_ANCHOR_DATE, (TimeZone) simpleTimeZone0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Date date1 = dateTickUnit0.addToDate(dateAxis0.DEFAULT_ANCHOR_DATE, (TimeZone) zoneInfo0);
      String string0 = dateTickUnit0.dateToString(dateAxis0.DEFAULT_ANCHOR_DATE);
      dateAxis0.setTickUnit(dateTickUnit0, true, true);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("!5DY?2kAT<\"iMM]}g");
      boolean boolean0 = logarithmicAxis0.getExpTickLabelsFlag();
      boolean boolean1 = logarithmicAxis0.getStrictValuesFlag();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Font font0 = extendedCategoryAxis0.getTickLabelFont((Comparable) false);
  }
}
