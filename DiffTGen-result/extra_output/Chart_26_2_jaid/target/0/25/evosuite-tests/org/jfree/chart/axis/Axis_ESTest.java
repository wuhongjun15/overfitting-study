/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:20:35 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logarithmicAxis0);
      logarithmicAxis0.notifyListeners(axisChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      boolean boolean0 = dateAxis0.equals("");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      Object object0 = numberAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("Ls2(Qi!1\"=Z90W=--;", (Range) null);
      moduloAxis0.setTickMarksVisible(false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1181.5258733808694);
      Plot plot0 = cyclicNumberAxis0.getPlot();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.addChangeListener((AxisChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(189.5332571955907);
      cyclicNumberAxis0.setAxisLineVisible(false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "");
      JFreeChart jFreeChart0 = new JFreeChart(compassPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D rectangle2D0 = cyclicNumberAxis0.getLabelEnclosure(graphics2D0, (RectangleEdge) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("-ZeKaj&");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setTickMarkStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("fcFb#sa5");
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("[qaWT`", 3.0, 2.0F, 0.0);
      Stroke stroke0 = xYPointerAnnotation0.getArrowStroke();
      categoryAxis0.setTickMarkStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1173.0609039970052), (String) null);
      cyclicNumberAxis0.setTickMarksVisible(true);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Date date0 = dateAxis0.getMaximumDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Second second0 = new Second(date0, zoneInfo0);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null, second0, second0);
      periodAxis0.setTickLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("Ls2(Qi!1\"=Z90W=--;", (Range) null);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Ls2(Qi!1\"=Z90W=--;");
      moduloAxis0.setTickLabelPaint(extendedCategoryAxis0.DEFAULT_TICK_MARK_PAINT);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week((-1804), (-1804));
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      PeriodAxis periodAxis0 = new PeriodAxis(":", week0, week0, zoneInfo0);
      // Undeclared exception!
      try { 
        periodAxis0.setTickLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickLabelFont(categoryAxis3D0.DEFAULT_AXIS_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickLabelsVisible(false);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      periodAxis0.setTickLabelsVisible(true);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getItemStroke(1725, 1725);
      extendedCategoryAxis0.setAxisLineStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D0.setAxisLinePaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("N?C11-");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getItemOutlinePaint(0, 0);
      subCategoryAxis0.setAxisLinePaint(paint0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1173.0609039970052), (String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      cyclicNumberAxis0.setLabelInsets(combinedDomainXYPlot0.DEFAULT_INSETS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Z2Sb+51Ax:");
      SystemColor systemColor0 = SystemColor.activeCaption;
      periodAxis0.setLabelPaint(systemColor0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("3");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      categoryAxis0.setLabelFont(meterPlot0.DEFAULT_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setLabel("Null 'paint' argument.");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("-ZeKaj&");
      logarithmicAxis0.setTickMarkInsideLength(1418.0F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("#<(?");
      String string0 = dateAxis0.getLabelToolTip();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      float float0 = periodAxis0.getTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CompassPlot compassPlot0 = new CompassPlot();
      categoryAxis0.removeChangeListener(compassPlot0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setLabelToolTip("C");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      numberAxis3D0.setTickMarkOutsideLength(1163.3522F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("JFM(");
      double double0 = extendedCategoryAxis0.getLabelAngle();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-705.74902847), "ItemLabelAnchor.INSIDE7");
      boolean boolean0 = cyclicNumberAxis0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Stroke stroke0 = categoryAxis0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Font font0 = categoryAxis0.getTickLabelFont();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.setLabelURL("");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      Stroke stroke0 = numberAxis0.getTickMarkStroke();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis(",Sdl{{{TS5eL!aXE", (Range) null);
      moduloAxis0.setFixedDimension(0.05);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RectangleInsets rectangleInsets0 = categoryAxis0.getTickLabelInsets();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis("Dan Rivett", stringArray0);
      Minute minute0 = new Minute();
      PeriodAxis periodAxis0 = new PeriodAxis("^z1W1ZZ$D|),H)B7y", minute0, minute0, minute0.DEFAULT_TIME_ZONE);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        periodAxis0.reserveSpace((Graphics2D) null, combinedRangeXYPlot0, (Rectangle2D) null, rectangleEdge0, (AxisSpace) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }
}
