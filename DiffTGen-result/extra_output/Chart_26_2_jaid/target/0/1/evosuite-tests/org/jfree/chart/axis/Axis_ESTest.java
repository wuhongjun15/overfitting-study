/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:09:46 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.dnd.DropTarget;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.text.DateFormat;
import java.util.Date;
import java.util.EventListener;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JFormattedTextField;
import javax.swing.JPasswordField;
import javax.swing.JTree;
import javax.swing.plaf.multi.MultiTextUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.InternationalFormatter;
import javax.swing.text.JTextComponent;
import javax.swing.text.Position;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.MarkerAxisBand;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.axis.Timeline;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.data.Range;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeTableXYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      DateAxis dateAxis0 = new DateAxis("", simpleTimeZone0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      simpleTimeZone0.setRawOffset(500);
      categoryAxis0.setLabel("");
      String string0 = categoryAxis0.getCategoryLabelToolTip(0.05);
      Class<PolarPlot> class0 = PolarPlot.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, dateAxis0.DEFAULT_AXIS_LABEL_INSETS, categoryAxis0.DEFAULT_TICK_LABEL_FONT, categoryAxis0.DEFAULT_AXIS_LABEL_PAINT, true, dateAxis0.DEFAULT_TICK_MARK_STROKE, dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      RegularTimePeriod regularTimePeriod0 = periodAxisLabelInfo0.createInstance(dateAxis0.DEFAULT_ANCHOR_DATE, simpleTimeZone0);
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("\u0003GgO=xR6=t,6$xo{K", (RegularTimePeriod) null, (RegularTimePeriod) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Day day0 = new Day();
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.setAutoPopulateSeriesFillPaint(false);
      polarPlot0.setRenderer(defaultPolarItemRenderer0);
      int int0 = day0.compareTo(polarPlot0);
      Hour hour0 = new Hour(10, day0);
      long long0 = hour0.getMiddleMillisecond();
      RegularTimePeriod regularTimePeriod0 = day0.next();
      long long1 = hour0.getMiddleMillisecond();
      Date date0 = hour0.getEnd();
      PeriodAxis periodAxis0 = new PeriodAxis("6_Yo7!6nw", hour0, day0, hour0.DEFAULT_TIME_ZONE);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      MultiTextUI multiTextUI0 = new MultiTextUI();
      InternationalFormatter internationalFormatter0 = new InternationalFormatter();
      DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory(internationalFormatter0, internationalFormatter0, internationalFormatter0);
      logarithmicAxis0.smallLogFlag = true;
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatterFactory) defaultFormatterFactory0);
      periodAxis0.setAxisLinePaint(defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      DropTarget dropTarget0 = null;
      try {
        dropTarget0 = new DropTarget();
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3355.87559), "");
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      WaferMapPlot waferMapPlot0 = waferMapRenderer0.getPlot();
      boolean boolean0 = cyclicNumberAxis0.hasListener((EventListener) null);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      byte[] byteArray0 = new byte[6];
      Shape shape0 = waferMapRenderer0.lookupSeriesShape(500);
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-120);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)126;
      byteArray1[1] = (byte) (-120);
      byteArray1[2] = (byte) (-121);
      byteArray1[3] = (byte) (-120);
      Shape shape1 = waferMapRenderer0.getItemShape((byte) (-121), 1);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 500, byteArray0, byteArray0, byteArray0, byteArray1);
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_AXIS_LINE_STROKE;
      subCategoryAxis0.setTickMarkStroke(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("c#vC\u0000");
      TickUnitSource tickUnitSource0 = NumberAxis.createStandardTickUnits();
      numberAxis0.resizeRange(2862.4376750416995);
      numberAxis0.setLabelURL("c#vC\u0000");
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(500, 500, (float[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("YT}-h5+S\u0000U!.95i0=(");
      Font font0 = subCategoryAxis0.getTickLabelFont((Comparable) 500);
      dateAxis0.setTickLabelFont(font0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("4%`X2.`d*0");
      Plot plot0 = subCategoryAxis0.getPlot();
      String string0 = "TL0";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("TL0");
      float float0 = 0.0F;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, 338.188);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.findSubplot((PlotRenderingInfo) null, point2D_Double0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("H[n");
      categoryAxis0.setUpperMargin((-45.0));
      PeriodAxis periodAxis0 = new PeriodAxis("H[n");
      categoryAxis0.setTickLabelsVisible(true);
      Class class0 = periodAxis0.getMajorTickTimePeriodClass();
      categoryAxis0.setCategoryMargin(3305.2857337);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(380.5729790389067, "H[n");
      CyclicNumberAxis.DEFAULT_ADVANCE_LINE_STROKE = cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE;
      cyclicNumberAxis0.setTickLabelPaint(categoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      cyclicNumberAxis0.setOffset(0.0F);
      boolean boolean0 = cyclicNumberAxis0.getAutoRangeStickyZero();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " it is no IntervalXYDataset";
      SymbolAxis symbolAxis0 = new SymbolAxis(" it is no IntervalXYDataset", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      boolean boolean1 = symbolAxis0.isVisible();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setUpperMargin((-3256.326));
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 0.05);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      boolean boolean0 = cyclicNumberAxis0.equals(combinedDomainCategoryPlot0);
      DateAxis dateAxis0 = new DateAxis();
      double double0 = (-4.0);
      int int0 = 2804;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2.0F;
      floatArray0[2] = 0.0F;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(21, 2804, floatArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 3 and should be 58884
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.axis.Axis");
      logarithmicAxis0.setLabelToolTip("SansSerif");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8, 1.0E-100, (String) null);
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) logarithmicAxis0;
      objectArray0[1] = (Object) logarithmicAxis0;
      objectArray0[2] = (Object) synthTreeUI0;
      objectArray0[3] = (Object) logarithmicAxis0;
      JTree jTree0 = new JTree(objectArray0);
      TreePath treePath0 = jTree0.getLeadSelectionPath();
      Rectangle rectangle0 = synthTreeUI0.getPathBounds((JTree) null, (TreePath) null);
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      double double0 = cyclicNumberAxis0.valueToJava2D((-729.81424929), (Rectangle2D) null, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Font font0 = categoryAxis0.getLabelFont();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.axis.Axis");
      double double0 = 1.0;
      MultiTextUI multiTextUI0 = new MultiTextUI();
      StringContent stringContent0 = new StringContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JPasswordField jPasswordField0 = new JPasswordField(defaultStyledDocument0, "org.jfree.chart.axis.Axis", 0);
      Position.Bias position_Bias0 = Position.Bias.Forward;
      // Undeclared exception!
      try { 
        multiTextUI0.modelToView((JTextComponent) jPasswordField0, 500, position_Bias0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      DateAxis dateAxis0 = new DateAxis("2&V", timeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("~5V{", combinedRangeXYPlot0);
      dateAxis0.setTickLabelInsets(combinedRangeXYPlot0.DEFAULT_INSETS);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2386, (-3616), (double) 0.0F, 0.0, chartRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Width (2386) and height (-3616) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 2463.3796192;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2463.3796192);
      CyclicNumberAxis.DEFAULT_ADVANCE_LINE_STROKE = cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE;
      cyclicNumberAxis0.setFixedDimension(2463.3796192);
      cyclicNumberAxis0.advanceLineVisible = false;
      cyclicNumberAxis0.setNegativeArrowVisible(false);
      double double1 = cyclicNumberAxis0.getCycleBound();
      cyclicNumberAxis0.setFixedAutoRange(0.0);
      Paint paint0 = cyclicNumberAxis0.getAxisLinePaint();
      PeriodAxis periodAxis0 = new PeriodAxis("QdIAL");
      periodAxis0.setLowerMargin(2.0F);
      periodAxis0.setRangeWithMargins(cyclicNumberAxis0.DEFAULT_RANGE, false, false);
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      double double2 = periodAxis0.valueToJava2D(0.0, rectangle2D0, (RectangleEdge) null);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("QdIAL");
      subCategoryAxis0.setTickLabelFont((Comparable) true, periodAxis0.DEFAULT_AXIS_LABEL_FONT);
      MarkerAxisBand markerAxisBand0 = cyclicNumberAxis0.getMarkerBand();
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_SHADOW_PAINT;
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker(0.05, 0.0, color0, subCategoryAxis0.DEFAULT_TICK_MARK_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, 2.0F);
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "pU";
      stringArray0[1] = "&CPd8J";
      stringArray0[2] = "&CPd8J";
      stringArray0[3] = "&CPd8J";
      stringArray0[4] = "&CPd8J";
      SymbolAxis symbolAxis0 = new SymbolAxis("&CPd8J", stringArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      Font font0 = stackedAreaRenderer0.getItemLabelFont(1451, 1451);
      dateAxis0.setTickLabelFont(font0);
      Timeline timeline0 = dateAxis0.getTimeline();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      Paint paint0 = extendedCategoryAxis0.getTickMarkPaint();
      Object object0 = extendedCategoryAxis0.clone();
      boolean boolean0 = extendedCategoryAxis0.equals(object0);
      Paint paint1 = extendedCategoryAxis0.getTickLabelPaint();
      extendedCategoryAxis0.setFixedDimension(3206.00628478484);
      Paint paint2 = extendedCategoryAxis0.getSubLabelPaint();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getPlotArea();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RectangleEdge rectangleEdge0 = categoryPlot0.getDomainAxisEdge(500);
      // Undeclared exception!
      try { 
        logarithmicAxis0.valueToJava2D(0.05, (Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateFormat dateFormat0 = dateAxis0.getDateFormatOverride();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("+p30a ");
      logarithmicAxis0.setStrictValuesFlag(false);
      logarithmicAxis0.setupNumberFmtObj();
      TickUnitSource tickUnitSource0 = NumberAxis.createIntegerTickUnits();
      Day day0 = new Day(dateAxis0.DEFAULT_ANCHOR_DATE);
      PeriodAxis periodAxis0 = new PeriodAxis("+p30a ", day0, day0);
      Graphics2D graphics2D0 = null;
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Font font0 = new Font((String) null, 3355, (-1));
      String string0 = null;
      AffineTransform affineTransform0 = null;
      try {
        affineTransform0 = new AffineTransform((AffineTransform) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E7, (-97.9), (String) null);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Range range0 = timeTableXYDataset0.getDomainBounds(true);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setRangeWithMargins((Range) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TickUnitSource tickUnitSource0 = DateAxis.createStandardDateTickUnits();
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setAutoRangeMinimumSize(0.0);
      } catch(IllegalArgumentException e) {
         //
         // NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D0.equals("e");
      categoryAxis3D0.setCategoryLabelPositionOffset((-218));
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(0L, (-218), (-218));
      Date date0 = segmentedTimeline0.getDate(2729L);
      Millisecond millisecond0 = new Millisecond(date0);
      PeriodAxis periodAxis0 = new PeriodAxis("item", millisecond0, millisecond0);
      PeriodAxisLabelInfo[] periodAxisLabelInfoArray0 = new PeriodAxisLabelInfo[2];
      Class<CombinedDomainCategoryPlot> class0 = CombinedDomainCategoryPlot.class;
      // Undeclared exception!
      try { 
        MockDateFormat.getTimeInstance((-218));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -218
         //
         verifyException("java.text.DateFormat", e);
      }
  }
}
