/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 07:37:17 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.JList;
import javax.swing.plaf.synth.SynthScrollPaneUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.time.Minute;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.02147, 2807.4449126935);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'position' argument.");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(cyclicNumberAxis0);
      extendedCategoryAxis0.notifyListeners(axisChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      boolean boolean0 = numberAxis3D0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      BasicStroke basicStroke0 = new BasicStroke();
      boolean boolean0 = numberAxis3D0.equals(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickMarksVisible(true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      boolean boolean0 = cyclicNumberAxis0.isVisible();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      Plot plot0 = numberAxis0.getPlot();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      float float0 = symbolAxis0.getTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'negativePaint' argument.");
      String string0 = subCategoryAxis0.getLabel();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CompassPlot compassPlot0 = new CompassPlot();
      numberAxis0.setPlot(compassPlot0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer");
      boolean boolean0 = categoryAxis3D0.isTickLabelsVisible();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      SynthScrollPaneUI synthScrollPaneUI0 = new SynthScrollPaneUI();
      boolean boolean0 = logarithmicAxis0.hasListener(synthScrollPaneUI0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("'64_zX");
      // Undeclared exception!
      try { 
        categoryAxis3D0.setTickMarkPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_CROSSHAIR_STROKE;
      numberAxis3D0.setTickMarkStroke(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(280.69191591, 280.69191591, "Th");
      cyclicNumberAxis0.setTickMarksVisible(true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.setTickLabelInsets(periodAxis0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'negativePaint' argument.");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'negativePaint' argument.");
      subCategoryAxis0.setTickLabelInsets(logarithmicAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("UnitType.ABSOLUTE");
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      categoryAxis0.setTickLabelPaint(color0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("a/", stringArray0);
      symbolAxis0.setTickLabelFont(symbolAxis0.DEFAULT_TICK_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'font' argument.");
      periodAxis0.setTickLabelsVisible(false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'negativePaint' argument.");
      logarithmicAxis0.setTickLabelsVisible(true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      // Undeclared exception!
      try { 
        numberAxis0.setAxisLineStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      BasicStroke basicStroke0 = new BasicStroke();
      numberAxis3D0.setAxisLineStroke(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("SansSerif");
      Object[] objectArray0 = new Object[3];
      JList<Object> jList0 = new JList<Object>(objectArray0);
      Color color0 = jList0.getSelectionForeground();
      periodAxis0.setAxisLinePaint(color0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3037.972005561223));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      cyclicNumberAxis0.setLabelInsets(rectangleInsets0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3037.972005561223));
      cyclicNumberAxis0.setLabelInsets(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(370.649354024886, (-667.81335998289));
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setLabelPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.setLabel("");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      cyclicNumberAxis0.setLabel("");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickMarkInsideLength((-2265));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      String string0 = numberAxis3D0.getLabelToolTip();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      periodAxis0.removeChangeListener(combinedRangeCategoryPlot0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), "Combined_Domain_XYPlot");
      String string0 = cyclicNumberAxis0.getLabelURL();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("/p9UDt0x@%*W");
      periodAxis0.setLabelToolTip("/p9UDt0x@%*W");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.setLabelAngle((-3999.0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickMarkOutsideLength(522.0F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      double double0 = extendedCategoryAxis0.getLabelAngle();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Minute minute0 = new Minute();
      PeriodAxis periodAxis0 = new PeriodAxis("`o[fz]+_j9'a%wonH_8", minute0, minute0, minute0.DEFAULT_TIME_ZONE);
      Paint paint0 = periodAxis0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      double double0 = dateAxis0.getFixedDimension();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1009.84, "Craig MacFarlane");
      Object object0 = cyclicNumberAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'negativePaint' argument.");
      subCategoryAxis0.setLabelURL("");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.02147, 2807.4449126935);
      Stroke stroke0 = cyclicNumberAxis0.getTickMarkStroke();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("SECOND");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(55);
      BufferedImage bufferedImage0 = new BufferedImage(56, 56, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      TextBlock textBlock0 = extendedCategoryAxis0.createLabel(true, 0.0F, rectangleEdge0, graphics2D0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("SECOND");
      extendedCategoryAxis0.setFixedDimension(0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      Paint paint0 = numberAxis3D0.getTickMarkPaint();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(8000000.0, "");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("zMA9!+n", meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 73);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      FontRenderContext fontRenderContext0 = new FontRenderContext(((SunGraphics2D) graphics2D0).transform, false, true);
      Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getStringBounds("Uy'M</", fontRenderContext0);
      Rectangle rectangle0 = new Rectangle();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisState axisState0 = cyclicNumberAxis0.drawTickMarksAndLabels(graphics2D0, 0.0, rectangle2D0, rectangle0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      Paint paint0 = logarithmicAxis0.getAxisLinePaint();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("/p9UDt0x@%*W");
      float float0 = periodAxis0.getTickMarkInsideLength();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1079);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      Font font0 = periodAxis0.getLabelFont();
  }
}
