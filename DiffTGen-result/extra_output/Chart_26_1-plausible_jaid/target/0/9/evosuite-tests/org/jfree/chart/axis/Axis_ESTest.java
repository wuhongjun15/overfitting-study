/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 07:37:09 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickMarkPosition;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      symbolAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 1.0E8);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      Rectangle2D rectangle2D0 = cyclicNumberAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      DateAxis dateAxis0 = new DateAxis("");
      boolean boolean0 = logarithmicAxis0.equals(dateAxis0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SymbolAxis symbolAxis0 = new SymbolAxis("ItemLabelAnchor.INSIDE11", stringArray0);
      Object object0 = symbolAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("NXD@S3TAvh4m?1Kt1.");
      boolean boolean0 = extendedCategoryAxis0.isVisible();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 1.0E8);
      Stroke stroke0 = cyclicNumberAxis0.getTickMarkStroke();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("Null 'rectangle' argument.", zoneInfo0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis3D0, dateAxis0, statisticalLineAndShapeRenderer0);
      DateTickMarkPosition dateTickMarkPosition0 = DateTickMarkPosition.END;
      dateAxis0.setTickMarkPosition(dateTickMarkPosition0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("ItemLabelAnchor.OUTSIDE2");
      logarithmicAxis0.setTickMarksVisible(true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("SansSerif");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setTickLabelInsets((RectangleInsets) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("ItemLabelAnchor.OUTSIDE2");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      extendedCategoryAxis0.setTickLabelPaint(periodAxis0.DEFAULT_TICK_MARK_PAINT);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("SansSerif");
      extendedCategoryAxis0.setTickLabelFont(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Y.X~");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setAxisLineStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'paint' argument.");
      Color color0 = (Color)XYLine3DRenderer.DEFAULT_WALL_PAINT;
      categoryAxis0.setLabelPaint(color0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(500, 500, 500);
      Date date0 = segmentedTimeline0.getDate((-20L));
      Day day0 = new Day(date0);
      PeriodAxis periodAxis0 = new PeriodAxis("", day0, day0, segmentedTimeline0.NO_DST_TIME_ZONE);
      periodAxis0.setLabel((String) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelToolTip("&v|z3#UPU Y$j#tIUD`");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2437.387417972298));
      cyclicNumberAxis0.setTickMarkOutsideLength(3647.272F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      double double0 = dateAxis0.getLabelAngle();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Stroke stroke0 = numberAxis3D0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("NXD@S3TAvh4m?1Kt1.");
      extendedCategoryAxis0.setLabelURL("NXD@S3TAvh4m?1Kt1.");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      periodAxis0.setFixedDimension(0.0025);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage((int) (byte)126, 1953);
  }
}
