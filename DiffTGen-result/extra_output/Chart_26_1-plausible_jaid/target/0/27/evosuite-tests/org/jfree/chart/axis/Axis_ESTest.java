/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 07:44:08 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Second;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("/q[K.;(_V:T.]Kk%;(G");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logarithmicAxis0);
      logarithmicAxis0.notifyListeners(axisChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "Null 'direction' argument.");
      cyclicNumberAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2015.74670844595), 0.0, "q%-p|65^:m^Md");
      cyclicNumberAxis0.setTickMarksVisible(false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      Font font0 = numberAxis0.getTickLabelFont();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Plot plot0 = categoryAxis3D0.getPlot();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("+E_@d[c$p}Py*T\n|");
      XYPlot xYPlot0 = new XYPlot();
      categoryAxis0.addChangeListener(xYPlot0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.getFixedDimension();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("n.],r8mtR$n$i1Op");
      logarithmicAxis0.setAxisLineVisible(true);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "Null 'state' argument.");
      PiePlot piePlot0 = new PiePlot();
      cyclicNumberAxis0.setPlot(piePlot0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("2[fb%n5");
      boolean boolean0 = logarithmicAxis0.hasListener((EventListener) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("{0}");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-768.0), 0.0, "8!4kA");
      subCategoryAxis0.setTickMarkPaint(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("Ts|pa!GqpUN", second0, second0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Stroke stroke0 = thermometerPlot0.getThermometerStroke();
      periodAxis0.setTickMarkStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "Null 'direction' argument.");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'direction' argument.");
      cyclicNumberAxis0.setTickLabelInsets(logarithmicAxis0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickLabelInsets((RectangleInsets) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(149.06420417009946, "");
      cyclicNumberAxis0.setTickLabelFont(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("G9o259D@sy:.@Nd0v*+");
      periodAxis0.setTickLabelsVisible(false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("9Q[{b(+7fsuG ");
      periodAxis0.setTickLabelsVisible(true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SymbolAxis symbolAxis0 = new SymbolAxis("zORLEyW", stringArray0);
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Stroke stroke0 = defaultDrawingSupplier0.getNextStroke();
      symbolAxis0.setAxisLineStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("{0}");
      PeriodAxis periodAxis0 = new PeriodAxis("5S\"]B2M9~|(qXr}gWx");
      periodAxis0.setAxisLinePaint(subCategoryAxis0.DEFAULT_AXIS_LINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis("RK&$]-F(bUeT<<Cn");
      dateAxis0.setLabelInsets(combinedDomainXYPlot0.DEFAULT_INSETS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, "");
      cyclicNumberAxis0.setLabelPaint(logarithmicAxis0.DEFAULT_TICK_MARK_PAINT);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      // Undeclared exception!
      try { 
        periodAxis0.setLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("yv=nM|HCut!=[0");
      logarithmicAxis0.setLabel("c&q_Nvx<(;Ry\".*[-");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setLabel("");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabel(":;t1qf$");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("dA(+7\"L");
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      metalComboBoxEditor0.setItem(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(":1cCAn~trbEa/8ntM");
      extendedCategoryAxis0.setTickMarkInsideLength(0.95F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      extendedCategoryAxis0.removeChangeListener((AxisChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'paint' argument.", stringArray0);
      symbolAxis0.setLabelToolTip("Null 'paint' argument.");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("dA(+7\"L");
      categoryAxis0.setLabelAngle(304.95739);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'insets' argument.");
      periodAxis0.setTickMarkOutsideLength(0.0F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("RK&$]-F(bUeT<<Cn");
      Paint paint0 = logarithmicAxis0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      RectangleInsets rectangleInsets0 = categoryAxis3D0.getLabelInsets();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(":1cCAn~trbEa/8ntM");
      boolean boolean0 = extendedCategoryAxis0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SymbolAxis symbolAxis0 = new SymbolAxis("`3?o&17xQQZd/A4j", stringArray0);
      Stroke stroke0 = symbolAxis0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      Object object0 = categoryAxis3D0.clone();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickLabelInsets(numberAxis3D0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis("org.jfree.data.xy.Vector", stringArray0);
      symbolAxis0.setLabelURL("org.jfree.chart.axis.Axis");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("L]eC~;gm3");
      Stroke stroke0 = periodAxis0.getTickMarkStroke();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("RK&$]-F(bUeT<<Cn");
      Paint paint0 = logarithmicAxis0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("yv=nM|HCut!=[0");
      logarithmicAxis0.setFixedDimension((-1740.61303357));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("'bOC", millisecond0, millisecond0);
      boolean boolean0 = periodAxis0.isAxisLineVisible();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("uB7PqJh |iYZjr2]");
      RectangleInsets rectangleInsets0 = dateAxis0.getTickLabelInsets();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(149.06420417009946, "");
      float float0 = cyclicNumberAxis0.getTickMarkInsideLength();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2539.758996823);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("xF93rCakc,$");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge();
      AxisSpace axisSpace0 = new AxisSpace();
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.reserveSpace((Graphics2D) null, combinedDomainCategoryPlot0, (Rectangle2D) null, rectangleEdge0, axisSpace0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }
}
