/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 07:37:19 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.JInternalFrame;
import javax.swing.plaf.synth.SynthOptionPaneUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.time.Hour;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("2&&GX5SkPY}M}4G;");
      categoryAxis0.notifyListeners((AxisChangeEvent) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      boolean boolean0 = symbolAxis0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      cyclicNumberAxis0.setTickMarksVisible(false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      double double0 = periodAxis0.getLabelAngle();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Stroke stroke0 = dateAxis0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "@#9 S|'yXHaHdjk");
      boolean boolean0 = cyclicNumberAxis0.isVisible();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      RectangleInsets rectangleInsets0 = numberAxis3D0.getTickLabelInsets();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, "");
      PiePlot piePlot0 = new PiePlot();
      cyclicNumberAxis0.addChangeListener(piePlot0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      double double0 = cyclicNumberAxis0.getFixedDimension();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("2&&GX5SkPY}M}4G;");
      categoryAxis0.setAxisLineVisible(true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("4X]mL>AuSpFQT*]");
      Paint paint0 = numberAxis0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("&1}P~QD#6b4x%T}$ZNM");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
      logarithmicAxis0.removeChangeListener(multiplePiePlot0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2074.2, (-33.879760320443));
      PiePlot3D piePlot3D0 = new PiePlot3D();
      cyclicNumberAxis0.setPlot(piePlot3D0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2377.82752384629, 2377.82752384629);
      boolean boolean0 = cyclicNumberAxis0.isTickLabelsVisible();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("org.jfree.chart.axis.Axis");
      Paint paint0 = categoryAxis0.getTickMarkPaint();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      boolean boolean0 = numberAxis3D0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, (-1067.999416173), rectangle2D_Float0, rectangle2D_Float0, rectangleEdge0, plotRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Requires start >= 0.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      boolean boolean0 = categoryAxis3D0.hasListener(combinedDomainCategoryPlot0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      SynthOptionPaneUI synthOptionPaneUI0 = new SynthOptionPaneUI();
      boolean boolean0 = periodAxis0.hasListener(synthOptionPaneUI0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Paint paint0 = defaultDrawingSupplier0.getNextOutlinePaint();
      numberAxis3D0.setTickMarkPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1373.742, 2.0);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setTickMarkStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("ro9C!e=O\"w,");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      Stroke stroke0 = combinedDomainXYPlot0.getRangeGridlineStroke();
      extendedCategoryAxis0.setTickMarkStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.setTickMarksVisible(true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickLabelInsets(categoryAxis3D0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (String) null);
      Hour hour0 = new Hour();
      PeriodAxis periodAxis0 = new PeriodAxis((String) null, hour0, hour0);
      periodAxis0.setTickLabelInsets(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      Paint paint0 = categoryAxis0.getTickLabelPaint((Comparable) "");
      categoryAxis0.setTickLabelPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("&1}P~QD#6b4x%T}$ZNM");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setTickLabelFont(logarithmicAxis0.DEFAULT_TICK_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2074.2, (-33.879760320443));
      cyclicNumberAxis0.setTickLabelsVisible(false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickLabelsVisible(true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, "");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("V9G ^i``]8");
      cyclicNumberAxis0.setAxisLinePaint(logarithmicAxis0.DEFAULT_AXIS_LINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelInsets(logarithmicAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("de-DE");
      extendedCategoryAxis0.setLabelPaint(categoryAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      // Undeclared exception!
      try { 
        dateAxis0.setLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelFont(categoryAxis3D0.DEFAULT_AXIS_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(".*4");
      logarithmicAxis0.setLabel(".*4");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "@#9 S|'yXHaHdjk");
      cyclicNumberAxis0.setLabel("");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("d#$@");
      extendedCategoryAxis0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("a%iQ ^");
      logarithmicAxis0.setTickMarkInsideLength((-559.7F));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelToolTip("q3");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Requires start >= 0.");
      categoryAxis3D0.setLabelAngle(0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      periodAxis0.setTickMarkOutsideLength(0.0F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Requires start >= 0.");
      Object object0 = categoryAxis3D0.clone();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.setLabelURL("");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hour hour0 = new Hour();
      PeriodAxis periodAxis0 = new PeriodAxis((String) null, hour0, hour0);
      periodAxis0.setFixedDimension(2500.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ItemLabelAnchor.OUTSIDE5");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", subCategoryAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("_'wp");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 217, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      Rectangle2D rectangle2D0 = dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'interval' argument.");
      JInternalFrame jInternalFrame0 = new JInternalFrame("OP7^%Za+3ZdkAbe^g4", false, true, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 2.0F, rectangle0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }
}
