/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 07:40:47 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.SimpleTimeZone;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("SansSerif");
      boolean boolean0 = logarithmicAxis0.equals("SansSerif");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hour hour0 = new Hour();
      PeriodAxis periodAxis0 = new PeriodAxis(",l=", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
      Object object0 = periodAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickMarksVisible(false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("6p>'m0ma$f4}|q|I");
      PolarPlot polarPlot0 = new PolarPlot();
      subCategoryAxis0.addChangeListener(polarPlot0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setAxisLineVisible(true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      cyclicNumberAxis0.setPlot((Plot) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("SansSerif");
      DefaultEditorKit.PasteAction defaultEditorKit_PasteAction0 = new DefaultEditorKit.PasteAction();
      boolean boolean0 = logarithmicAxis0.hasListener(defaultEditorKit_PasteAction0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.setTickMarkPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("\"S5#G_AF*G>i");
      Color color0 = (Color)XYTextAnnotation.DEFAULT_PAINT;
      logarithmicAxis0.setTickMarkPaint(color0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("v~S0IW");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "9YBN;NRFUM@&");
      cyclicNumberAxis0.setTickMarkStroke(subCategoryAxis0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      PeriodAxis periodAxis0 = new PeriodAxis("KACh72,#+a6~j${s");
      periodAxis0.setTickLabelInsets(dateAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'font' argument.");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setTickLabelInsets((RectangleInsets) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Null 'paint' argument.");
      numberAxis3D0.setTickLabelInsets(numberAxis3D0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Vm(a_ ");
      DateAxis dateAxis0 = new DateAxis("", simpleTimeZone0);
      Color color0 = Color.blue;
      dateAxis0.setTickLabelPaint(color0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setTickLabelFont(logarithmicAxis0.DEFAULT_TICK_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setTickLabelsVisible(false);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("6p>'m0ma$f4}|q|I");
      subCategoryAxis0.setTickLabelsVisible(true);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1368.9599485), (-465.95196340172), "");
      BasicStroke basicStroke0 = (BasicStroke)cyclicNumberAxis0.advanceLineStroke;
      logarithmicAxis0.setAxisLineStroke(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("TTQ^VP%+],lzMkLa");
      // Undeclared exception!
      try { 
        categoryAxis3D0.setAxisLinePaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(360.0, (-1722.104407559834), "Sergei Ivanov");
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      RectangleInsets rectangleInsets0 = combinedDomainCategoryPlot0.getAxisOffset();
      cyclicNumberAxis0.setLabelInsets(rectangleInsets0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("rT|)'Jclw$So6B");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setLabelInsets((RectangleInsets) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(360.0, (-1722.104407559834), "Sergei Ivanov");
      cyclicNumberAxis0.setLabelInsets(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      TextBox textBox0 = new TextBox("");
      Paint paint0 = textBox0.getShadowPaint();
      logarithmicAxis0.setLabelPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.5707963267948966, 1.5707963267948966);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 0.9, 2.0F, 1.5707963267948966);
      cyclicNumberAxis0.setLabelFont(xYPointerAnnotation0.DEFAULT_FONT);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(".p-J;laW_Q");
      subCategoryAxis0.setLabel("Null 'state' argument.");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "9YBN;NRFUM@&");
      cyclicNumberAxis0.setLabel("9YBN;NRFUM@&");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0));
      cyclicNumberAxis0.setLabel("");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(";#te^I.`+@!!WK");
      extendedCategoryAxis0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(".p-J;laW_Q");
      String string0 = subCategoryAxis0.getLabel();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setTickMarkInsideLength(4793.6206F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("TextBlockAnchor.CENTER_RIGHT");
      String string0 = subCategoryAxis0.getLabelToolTip();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("nPeatv'D", zoneInfo0);
      float float0 = dateAxis0.getTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("\" V/>17nbG:O");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      subCategoryAxis0.removeChangeListener(combinedRangeXYPlot0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'font' argument.");
      String string0 = subCategoryAxis0.getLabelURL();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelAngle(0.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Null 'paint' argument.");
      numberAxis3D0.setTickMarkOutsideLength((-284.9786F));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Paint paint0 = dateAxis0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("!j>|2H[?t_7Lg\",");
      boolean boolean0 = subCategoryAxis0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1983.71229699677));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      RectangleInsets rectangleInsets0 = valueAxis0.getLabelInsets();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("/gZUes\".;}7Mp[k@l");
      periodAxis0.setLabelURL("8ZxqK [#n");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Week week0 = new Week(228, 228);
      PeriodAxis periodAxis0 = new PeriodAxis("lOFNhF{\"nIv w", week0, week0);
      Paint paint0 = periodAxis0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, (-3463), (-3463));
      Quarter quarter0 = new Quarter(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null, quarter0, quarter0, quarter0.DEFAULT_TIME_ZONE);
      periodAxis0.setFixedDimension(1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.5707963267948966, 1.5707963267948966);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 0.9, 2.0F, 1.5707963267948966);
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(false, 2.0F, "", xYPointerAnnotation0.DEFAULT_TEXT_ANCHOR, xYPointerAnnotation0.DEFAULT_ROTATION_ANCHOR, 0.05);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(2.0F, 0.0F, 0.0F, 0.0F);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      LegendTitle legendTitle0 = new LegendTitle(statisticalLineAndShapeRenderer0, columnArrangement0, columnArrangement0);
      float[] floatArray0 = cyclicNumberAxis0.calculateAnchorPoint(cyclicNumberAxis_CycleBoundTick0, 5.0, rectangle2D_Float0, legendTitle0.DEFAULT_POSITION);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("6\nk-QC`)%f'DCD8V4/");
      Paint paint0 = logarithmicAxis0.getAxisLinePaint();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("%lZ$=Fh^NK)3i");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(1);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      AxisSpace axisSpace0 = new AxisSpace();
      // Undeclared exception!
      try { 
        subCategoryAxis0.reserveSpace(graphics2D0, multiplePiePlot0, (Rectangle2D) null, rectangleEdge0, axisSpace0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      Font font0 = categoryAxis3D0.getLabelFont();
  }
}
