/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 08:40:32 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.color.ICC_Profile;
import java.awt.event.FocusListener;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.ShortLookupTable;
import java.io.IOException;
import java.sql.Connection;
import java.text.CharacterIterator;
import java.text.NumberFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.EventListener;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JTree;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.multi.MultiTreeUI;
import javax.swing.plaf.synth.SynthToggleButtonUI;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.event.ChartChangeEventType;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.Range;
import org.jfree.data.RangeType;
import org.jfree.data.general.Dataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null 'state' argument.";
      stringArray0[1] = "Null 'stroke' argument.";
      stringArray0[2] = "Null 'stroke' argument.";
      stringArray0[3] = "Null 'stroke' argument.";
      stringArray0[4] = "Null 'stroke' argument.";
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'stroke' argument.", stringArray0);
      symbolAxis0.setLabelAngle(0.0);
      symbolAxis0.autoAdjustRange();
      CategoryAxis categoryAxis0 = new CategoryAxis("wJX98A!b[So6rihxy");
      categoryAxis0.setCategoryMargin(0.0);
      categoryAxis0.setCategoryMargin(5000000.0);
      Paint paint0 = categoryAxis0.getAxisLinePaint();
      MockDate mockDate0 = new MockDate(500, 10, (-1989), 718, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Second second0 = new Second(mockDate0, zoneInfo0);
      RegularTimePeriod regularTimePeriod0 = second0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'state' argument.", regularTimePeriod0, second0);
      float float0 = periodAxis0.getMinorTickMarkOutsideLength();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'stroke' argument.");
      logarithmicAxis0.setLog10TickLabelsFlag(true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = null;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(957.086529, 957.086529, (String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      symbolAxis0.setLabel("D_dFLxd)q2");
      Paint paint0 = symbolAxis0.getGridBandPaint();
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'font' argument.");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(500, 776, byteArray0, byteArray0, byteArray0);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "v\\eFCQuk/$Rrn*,'3jt";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0, "veFCQuk/$Rrn*,'3jt");
      cyclicNumberAxis0.period = (-1711.829);
      cyclicNumberAxis0.resizeRange(0.0);
      RectangleInsets rectangleInsets0 = cyclicNumberAxis0.getTickLabelInsets();
      String string1 = "3>/4eL}go~41";
      PeriodAxis periodAxis0 = new PeriodAxis("3>/4eL}go~41");
      Class class0 = periodAxis0.getMinorTickTimePeriodClass();
      Object object0 = cyclicNumberAxis0.clone();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(84, 839, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      Hashtable<LogarithmicAxis, XYPlot> hashtable0 = new Hashtable<LogarithmicAxis, XYPlot>();
      JTree jTree0 = new JTree(hashtable0);
      TreePath treePath0 = jTree0.getEditingPath();
      // Undeclared exception!
      try { 
        multiTreeUI0.getPathBounds(jTree0, (TreePath) null);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Martin Cordova");
      Paint paint0 = subCategoryAxis0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3474.3), (-3474.3), "Null 'insets' argument.");
      RangeType rangeType0 = RangeType.NEGATIVE;
      cyclicNumberAxis0.setRangeType(rangeType0);
      Paint paint0 = cyclicNumberAxis0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("&L%ga.?");
      int int0 = (-2617);
      categoryAxis0.setCategoryLabelPositionOffset((-2617));
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(".png");
      subCategoryAxis0.setTickLabelFont(categoryAxis0.DEFAULT_TICK_LABEL_FONT);
      subCategoryAxis0.setFixedDimension(0.2);
      subCategoryAxis0.addSubCategory(true);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(".png");
      double double0 = logarithmicAxis0.switchedLog10(2.0F);
      Vector<CategoryAxis> vector0 = new Vector<CategoryAxis>();
      int int1 = (-1647);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byte byte2 = (byte)60;
      byteArray0[2] = (byte)60;
      byte byte3 = (byte)62;
      byteArray0[3] = (byte)62;
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable((-1647), byteArray0);
      } catch(IllegalArgumentException e) {
         //
         // Offset must be greater than 0
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1832, 0, 1832, (-736), 121);
      Second second0 = new Second(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(121, 0, 59, 59, 59);
      long long0 = second0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      long long1 = second0.getMiddleMillisecond();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      Second second1 = Second.parseSecond("");
      PeriodAxis periodAxis0 = new PeriodAxis("", regularTimePeriod0, second0);
      Plot plot0 = periodAxis0.getPlot();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("j\"(OhDA( |rEy", stringArray0);
      Graphics2D graphics2D0 = null;
      Rectangle rectangle0 = new Rectangle();
      CharacterIterator characterIterator0 = null;
      int int0 = 0;
      int int1 = 1147;
      AffineTransform affineTransform0 = AffineTransform.getShearInstance(10, 2.0F);
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext(affineTransform0, "", (Object) null);
      } catch(IllegalArgumentException e) {
         //
         // AA hint:
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxis0.setTickMarksVisible(true);
      thermometerPlot0.setBackgroundImageAlpha(0.0F);
      String string0 = "JR|VO@HJk%`Y`o%Bpe";
      int int0 = (-466);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-466), "Lz-iX'F", (-466), 1572, (-267), 12, 10, (-267), 1541, 1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -466
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setAutoRangeMinimumSize(2.0);
      TimeZone timeZone0 = dateAxis0.getTimeZone();
      String string0 = "org.jfree.chart.axis.StandardTickUnitSource";
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, dateAxis0, dateAxis0, xYAreaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.axis.StandardTickUnitSource", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 500, 1, 0, 1066, 0, true, false, false, false, false, true);
      Font font0 = chartPanel0.getFont();
      dateAxis0.setTickLabelFont(font0);
      NumberAxis numberAxis0 = new NumberAxis();
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable(1066, (byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.ByteLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("0wJK");
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(subCategoryAxis0, (Dataset) null);
      thermometerPlot0.datasetChanged(datasetChangeEvent0);
      valueAxis0.setVisible(false);
      String string0 = "H\\o5|hR^0OD3\\0";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2, "@rAp7*aB^s-P|}ql", 6538, 0, 1182, 0, 1810, 1, 856, 10);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 1810
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "Thomas Meier";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-6, "Thomas Meier");
      boolean boolean0 = cyclicNumberAxis0.isAxisLineVisible();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Thomas Meier");
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short)2612;
      shortArray0[2] = (short) (-2245);
      shortArray0[3] = (short) (-2861);
      shortArray0[4] = (short) (-2693);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      short short0 = (short) (-1581);
      shortArray0[7] = (short) (-1581);
      ShortLookupTable shortLookupTable0 = null;
      try {
        shortLookupTable0 = new ShortLookupTable((-1), shortArray0);
      } catch(IllegalArgumentException e) {
         //
         // Offset must be greater than 0
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("yBUuE0Ol");
      categoryAxis0.setLabelAngle(4.0);
      categoryAxis0.addCategoryLabelToolTip("yBUuE0Ol", "yBUuE0Ol");
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setFixedAutoRange(Double.NEGATIVE_INFINITY);
      categoryAxis0.setFixedDimension(1096.96);
      dateAxis0.zoomRange((-1251.553), 0.2);
      Object object0 = categoryAxis0.clone();
      String string0 = "ZOOM_RESET_DOMAIN";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("ZOOM_RESET_DOMAIN");
      double double0 = logarithmicAxis0.computeLogFloor(0.05);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F);
      try { 
        ICC_Profile.getInstance("yBUuE0Ol");
      } catch(IOException e) {
         //
         // Cannot open file yBUuE0Ol
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Qji+^$O:p}");
      periodAxis0.setLabelAngle((-835.1231942079829));
      periodAxis0.configure();
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, periodAxis0.DEFAULT_RANGE);
      Graphics2D graphics2D0 = null;
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      // Undeclared exception!
      try { 
        jDesktopPane0.selectFrame(true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JDesktopPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, (VerticalAlignment) null, 3401.0, 0.05);
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainCategoryPlot0, columnArrangement0, columnArrangement0);
      RectangleInsets rectangleInsets0 = legendTitle0.getPadding();
      numberAxis0.setTickLabelInsets(rectangleInsets0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("Null 'annotation' argument.");
      Date date0 = dateAxis0.getMinimumDate();
      dateAxis0.setLabelURL("Null 'annotation' argument.");
      dateAxis0.zoomRange(0.0, 0.0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Null 'annotation' argument.", dateAxis0.DEFAULT_RANGE);
      moduloAxis0.setPlot((Plot) null);
      double double0 = moduloAxis0.getDisplayEnd();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Object object0 = categoryAxis3D0.clone();
      String string0 = "/R]0I;*L`?KU}VMO";
      Day day0 = new Day();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.getDisplayName(500, 1900, locale0);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      int int0 = 0;
      Stroke stroke0 = areaRenderer0.getSeriesOutlineStroke(0);
      // Undeclared exception!
      try { 
        numberAxis0.setTickMarkStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.setTickLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("dKzI?5m?JpW9L,z");
      boolean boolean0 = categoryAxis0.equals("dKzI?5m?JpW9L,z");
      String string0 = "";
      // Undeclared exception!
      try { 
        Week.parseWeek("");
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      XYPlot[] xYPlotArray0 = new XYPlot[6];
      HistogramDataset histogramDataset0 = new HistogramDataset();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(1.0E-8);
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, numberAxis3D0, numberAxis3D0, xYBoxAndWhiskerRenderer0);
      xYPlotArray0[0] = xYPlot0;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      xYPlotArray0[1] = (XYPlot) combinedDomainXYPlot0;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      xYPlotArray0[2] = (XYPlot) combinedDomainXYPlot1;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      XYPlot xYPlot1 = combinedDomainXYPlot0.findSubplot(plotRenderingInfo0, point2D_Float0);
      xYPlotArray0[3] = null;
      XYPlot xYPlot2 = new XYPlot();
      xYPlotArray0[4] = xYPlot2;
      XYPlot xYPlot3 = new XYPlot();
      xYPlotArray0[5] = xYPlot3;
      JComboBox<XYPlot> jComboBox0 = new JComboBox<XYPlot>(xYPlotArray0);
      basicComboBoxEditor_UIResource0.removeActionListener(jComboBox0);
      FocusListener focusListener0 = AWTEventMulticaster.remove((FocusListener) basicComboBoxEditor_UIResource0, (FocusListener) basicComboBoxEditor_UIResource0);
      boolean boolean0 = numberAxis3D0.hasListener((EventListener) null);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.setRange(numberAxis3D0.DEFAULT_RANGE, true, false);
      Range range0 = periodAxis0.getRange();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("h*nBBu");
      double double0 = logarithmicAxis0.java2DToValue((-1967.33900449236), (Rectangle2D) null, (RectangleEdge) null);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("h*nBBu");
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, extendedCategoryAxis0, (ValueAxis) null, lineAndShapeRenderer0);
      CategoryAnchor categoryAnchor0 = categoryPlot0.getDomainGridlinePosition();
      int[] intArray0 = new int[2];
      intArray0[0] = 500;
      intArray0[1] = 500;
      Polygon polygon0 = new Polygon(intArray0, intArray0, 0);
      numberAxis3D0.setNegativeArrowVisible(true);
      Rectangle rectangle0 = polygon0.getBounds();
      double double1 = extendedCategoryAxis0.getCategoryJava2DCoordinate(categoryAnchor0, 10, 574, rectangle0, (RectangleEdge) null);
      String string0 = logarithmicAxis0.makeTickLabel(0, true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-4.0), (-4.0), "org.jfree.chart.renderer.xy.DeviationRenderer$State");
      double double0 = cyclicNumberAxis0.calculateHighestVisibleTickValue();
      cyclicNumberAxis0.setAxisLineVisible(true);
      cyclicNumberAxis0.setFixedAutoRange((-4.0));
      cyclicNumberAxis0.removeChangeListener((AxisChangeListener) null);
      Week week0 = new Week();
      PeriodAxis periodAxis0 = new PeriodAxis("", week0, week0);
      long long0 = week0.getMiddleMillisecond();
      long long1 = week0.getMiddleMillisecond();
      Class<SpiderWebPlot> class0 = SpiderWebPlot.class;
      periodAxis0.setMinorTickTimePeriodClass(class0);
      boolean boolean0 = cyclicNumberAxis0.equals(week0);
      Paint paint0 = periodAxis0.getTickMarkPaint();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setRange(cyclicNumberAxis0.DEFAULT_RANGE);
      Object object0 = cyclicNumberAxis0.clone();
      boolean boolean1 = logarithmicAxis0.getAutoRangeNextLogFlag();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Not enough valid columns where generated by query.";
      stringArray0[1] = "Not enough valid columns where generated by query.";
      stringArray0[2] = "org.jfree.chart.renderer.xy.DeviationRenderer$State";
      stringArray0[3] = "org.jfree.chart.renderer.xy.DeviationRenderer$State";
      stringArray0[4] = "NSjIcuU~";
      stringArray0[5] = "Not enough valid columns where generated by query.";
      SymbolAxis symbolAxis0 = new SymbolAxis("Not enough valid columns where generated by query.", stringArray0);
      DateAxis dateAxis0 = new DateAxis("Not enough valid columns where generated by query.");
      dateAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "L Y8o(-o";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(209.1185754, "L Y8o(-o");
      cyclicNumberAxis0.setAxisLineVisible(false);
      cyclicNumberAxis0.setVisible(true);
      cyclicNumberAxis0.configure();
      String string1 = cyclicNumberAxis0.getLabelToolTip();
      String string2 = "PRINT";
      // Undeclared exception!
      try { 
        MockInstant.parse((CharSequence) null);
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("lFeUDahH;aGL3]0G`");
      DateAxis dateAxis0 = new DateAxis("w>|[t", timeZone0);
      Date date0 = dateAxis0.getMaximumDate();
      dateAxis0.setMinimumDate(date0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "org.jfree.chart.plot.PiePlotState");
      cyclicNumberAxis0.centerRange(0.0);
      Paint paint0 = cyclicNumberAxis0.getAdvanceLinePaint();
      Year year0 = new Year(dateAxis0.DEFAULT_ANCHOR_DATE, timeZone0);
      Year year1 = new Year(date0);
      RegularTimePeriod regularTimePeriod0 = year1.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("lFeUDahH;aGL3]0G`", year0, regularTimePeriod0, year1.DEFAULT_TIME_ZONE);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(60, 420, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge(3384);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 0.0, rectangle0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
      List list0 = periodAxis0.refreshTicks(graphics2D0, axisState0, rectangle0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("LbN[3,9(Wr^");
      extendedCategoryAxis0.setLabelURL("");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1749.3939355122643);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Stroke stroke0 = piePlot3D0.getLabelLinkStroke();
      cyclicNumberAxis0.setAxisLineStroke(stroke0);
      double double0 = cyclicNumberAxis0.getPeriod();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      piePlot3D0.removeChangeListener(jFreeChart0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("QU>d.\"fH<a");
      boolean boolean0 = logarithmicAxis0.getExpTickLabelsFlag();
      cyclicNumberAxis0.setAdvanceLineStroke(piePlot3D0.DEFAULT_OUTLINE_STROKE);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("org.jfree.chart.axis.Axis");
      String string0 = categoryAxis3D0.getLabel();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("SeriesRenderingOrder.REVERSE");
      extendedCategoryAxis0.setCategoryLabelPositionOffset(0);
      Font font0 = extendedCategoryAxis0.getSubLabelFont();
      extendedCategoryAxis0.setSubLabelFont(font0);
      extendedCategoryAxis0.setTickMarkInsideLength((-1884.81F));
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("gLiyndn2;");
      boolean boolean0 = logarithmicAxis0.getAutoRangeNextLogFlag();
      logarithmicAxis0.configure();
      DateAxis dateAxis0 = new DateAxis();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultStatisticalCategoryDataset0, tableOrder0);
      dateAxis0.addChangeListener(spiderWebPlot0);
      boolean boolean1 = dateAxis0.equals("SeriesRenderingOrder.REVERSE");
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("David M. O'Donnell", (RegularTimePeriod) null, (RegularTimePeriod) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.renderer.xy.XYStepAreaRenderer");
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      extendedCategoryAxis0.setLabelPaint(color0);
      Day day0 = new Day();
      extendedCategoryAxis0.setLabelToolTip("org.jfree.chart.renderer.xy.XYStepAreaRenderer");
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      extendedCategoryAxis0.removeCategoryLabelToolTip(regularTimePeriod0);
      DateAxis dateAxis0 = new DateAxis("%\"", regularTimePeriod0.DEFAULT_TIME_ZONE);
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      XYPlot xYPlot0 = new XYPlot();
      dateAxis0.removeChangeListener(xYPlot0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2);
      Locale locale0 = Locale.US;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(25.5, numberFormat0);
      cyclicNumberAxis0.setTickUnit(numberTickUnit0, false, false);
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.util.VerticalAlignment", day0, day0, day0.DEFAULT_TIME_ZONE);
      PeriodAxisLabelInfo[] periodAxisLabelInfoArray0 = periodAxis0.getLabelInfo();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("8cft9E/@vK@m=|,n");
      String string0 = "Null 'paint' argument.";
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'paint' argument.", periodAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, true);
      int int0 = 11;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 11, 0, chartRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      JTree jTree0 = new JTree((TreeNode) null, true);
      Rectangle rectangle0 = jTree0.getRowBounds(500);
      // Undeclared exception!
      try { 
        Rectangle2D.union((Rectangle2D) null, (Rectangle2D) null, (Rectangle2D) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Rectangle2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = null;
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      String string1 = null;
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset((Connection) null, (String) null);
      } catch(Throwable e) {
         //
         // There is no database to execute the query.
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "Jon Iles";
      PeriodAxis periodAxis0 = new PeriodAxis("Jon Iles");
      Graphics2D graphics2D0 = null;
      DateAxis dateAxis0 = new DateAxis();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-2807.9164));
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      // Undeclared exception!
      try { 
        dateAxis0.DEFAULT_AXIS_LABEL_FONT.getStringBounds("!dbu+F.o1rf}", 500, 4490, fontRenderContext0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.autoAdjustRange();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      boolean boolean0 = logarithmicAxis0.equals(combinedDomainCategoryPlot0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0F, (-1278.7232174), 2.0F, 44);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      double double0 = extendedCategoryAxis0.getCategoryJava2DCoordinate((CategoryAnchor) null, 11, 44, rectangle2D_Double0, rectangleEdge0);
      extendedCategoryAxis0.setSubLabelPaint(combinedDomainCategoryPlot0.DEFAULT_OUTLINE_PAINT);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 10;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) 11;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-1328.7F);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(44, 10, floatArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 9 and should be 440
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("#cp/*Lmd6J");
      SynthToggleButtonUI synthToggleButtonUI0 = new SynthToggleButtonUI();
      boolean boolean0 = subCategoryAxis0.hasListener(synthToggleButtonUI0);
      double double0 = subCategoryAxis0.getLowerMargin();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      ModuloAxis moduloAxis0 = new ModuloAxis("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.setDisplayRange(1099.46, 0.0F);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Month month0 = new Month();
      PeriodAxis periodAxis0 = new PeriodAxis("z~t5uu>x\u0004sYqS|][Q", month0, month0, month0.DEFAULT_TIME_ZONE);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("z~t5uu>x\u0004sYqS|][Q", mockSimpleDateFormat0, mockSimpleDateFormat0, mockSimpleDateFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0F, false, standardXYZToolTipGenerator0);
      Stroke stroke0 = candlestickRenderer0.getSeriesOutlineStroke((-2702));
      // Undeclared exception!
      try { 
        periodAxis0.setMinorTickMarkStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("9h&'uA=");
      boolean boolean0 = logarithmicAxis0.getStrictValuesFlag();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logarithmicAxis0);
      ChartChangeEventType chartChangeEventType0 = axisChangeEvent0.getType();
      axisChangeEvent0.setType(chartChangeEventType0);
      logarithmicAxis0.notifyListeners(axisChangeEvent0);
      DateAxis dateAxis0 = new DateAxis();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(2673.9817F, 2673.9817F, 2.0F, 500);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      String string0 = thermometerPlot0.getPlotType();
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation1, plotOrientation0);
      double double0 = dateAxis0.valueToJava2D(2.302585092994046, rectangle2D0, rectangleEdge0);
      dateAxis0.setRange(logarithmicAxis0.DEFAULT_RANGE);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-100, (-628.2941961837013));
      cyclicNumberAxis0.setBoundMappedToLastCycle(false);
      ModuloAxis moduloAxis0 = new ModuloAxis("9h&'uA=", dateAxis0.DEFAULT_DATE_RANGE);
      double double1 = moduloAxis0.getDisplayStart();
      Object object0 = cyclicNumberAxis0.clone();
      Stroke stroke0 = cyclicNumberAxis0.getAdvanceLineStroke();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9h&'uA=";
      stringArray0[1] = "9h&'uA=";
      stringArray0[2] = "9h&'uA=";
      stringArray0[3] = "Thermometer Plot";
      stringArray0[4] = "Thermometer Plot";
      SymbolAxis symbolAxis0 = new SymbolAxis("Thermometer Plot", stringArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      MockDate mockDate0 = (MockDate)DateAxis.DEFAULT_ANCHOR_DATE;
      Second second0 = new Second(mockDate0);
      long long0 = second0.getSerialIndex();
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'insets' argument.", regularTimePeriod0, second0);
      boolean boolean0 = periodAxis0.isTickLabelsVisible();
      String[] stringArray0 = new String[7];
      long long1 = fixedMillisecond0.getLastMillisecond();
      stringArray0[0] = "Null 'values' argument.";
      stringArray0[1] = "Null 'values' argument.";
      stringArray0[2] = "Null 'values' argument.";
      stringArray0[3] = "Null 'values' argument.";
      periodAxis0.setLast(regularTimePeriod0);
      String string0 = second0.toString();
      periodAxis0.setFixedAutoRange(0.0);
      stringArray0[4] = "Null 'values' argument.";
      stringArray0[5] = "Null 'values' argument.";
      stringArray0[6] = "org.jfree.chart.axis.CategoryAxis3D";
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'values' argument.", stringArray0);
      periodAxis0.setFirst(regularTimePeriod0);
      DateAxis dateAxis0 = new DateAxis();
      String string1 = dateAxis0.getLabelToolTip();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 29.454784218103, "");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "Null 'distributor' argument.";
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("Null 'distributor' argument.");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
}
