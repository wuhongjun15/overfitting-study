/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 08:44:17 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.MouseWheelEvent;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.text.CharacterIterator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.TimeZone;
import javax.swing.DebugGraphics;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.plaf.multi.MultiListUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CategoryLabelPosition;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.MarkerAxisBand;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.ChartChangeEventType;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.UnitType;
import org.jfree.data.RangeType;
import org.jfree.data.general.CombinedDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.setUpperBound((-3483.269));
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      periodAxis0.setLabelInsets(rectangleInsets0);
      String string0 = periodAxis0.getLabelURL();
      boolean boolean0 = periodAxis0.isTickLabelsVisible();
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, periodAxis0.DEFAULT_RANGE);
      moduloAxis0.setDisplayRange(0.0, 1784.703901700296);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1413.8923274, 1413.8923274);
      boolean boolean0 = cyclicNumberAxis0.isBoundMappedToLastCycle();
      boolean boolean1 = cyclicNumberAxis0.isBoundMappedToLastCycle();
      Plot plot0 = cyclicNumberAxis0.getPlot();
      String string0 = "TZ'gDOMd";
      Rectangle2D rectangle2D0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      combinedRangeCategoryPlot0.setDomainGridlinePaint(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getDomainAxisEdge();
      // Undeclared exception!
      try { 
        RectangleEdge.coordinate((Rectangle2D) null, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateFormat dateFormat0 = DateFormat.getInstance();
      dateAxis0.setDateFormatOverride(dateFormat0);
      dateAxis0.setAutoTickUnitSelection(false, false);
      Font font0 = dateAxis0.getLabelFont();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, 5.0E-6, "XYItemEntity: series = ");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      double double0 = cyclicNumberAxis0.valueToJava2D((-1794.234112833), rectangle2D_Double0, rectangleEdge0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("XYItemEntity: series = ");
      logarithmicAxis0.setRange(dateAxis0.DEFAULT_RANGE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, 680, 10, (-1973), 300, 420, 180, false, 0, 0, 0);
      Point point0 = mouseWheelEvent0.getLocationOnScreen();
      Point point1 = chartPanel0.getLocation(point0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 2.0F, (PlotRenderingInfo) null, (Point2D) point1);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(500);
      RectangleEdge rectangleEdge1 = combinedDomainXYPlot0.getDomainAxisEdge();
      double double1 = dateAxis0.java2DToValue((-1889.759814818961), rectangle2D_Double0, rectangleEdge1);
      dateAxis0.zoomRange(5.0E-6, 156.760636649);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      boolean boolean0 = subCategoryAxis0.equals((Object) null);
      boolean boolean1 = logarithmicAxis0.getLog10TickLabelsFlag();
      Font font1 = subCategoryAxis0.getSubLabelFont();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "org.jfree.data.time.TimePeriodValue";
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.data.time.TimePeriodValue");
      periodAxis0.setFixedDimension(0.0);
      int int0 = 1574;
      periodAxis0.setAutoTickIndex(1574);
      periodAxis0.setMinorTickMarkInsideLength(470.75494F);
      RectangleInsets rectangleInsets0 = periodAxis0.getLabelInsets();
      boolean boolean0 = periodAxis0.isAxisLineVisible();
      periodAxis0.centerRange(0.0);
      ModuloAxis moduloAxis0 = new ModuloAxis("org.jfree.data.time.TimePeriodValue", periodAxis0.DEFAULT_RANGE);
      // Undeclared exception!
      try { 
        moduloAxis0.setRangeType((RangeType) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'rangeType' argument.
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelAngle(0.6428571428571429);
      int int0 = 10;
      CharacterIterator characterIterator0 = null;
      int int1 = 2238;
      categoryAxis3D0.setVisible(false);
      AffineTransform affineTransform0 = new AffineTransform((float) 2238, 0.0F, 2.0F, (-2237.098F), (float) 10, 0.0F);
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext(affineTransform0, categoryAxis3D0, affineTransform0);
      } catch(IllegalArgumentException e) {
         //
         // AA hint:org.jfree.chart.axis.CategoryAxis3D@0
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(392.98618, "Null 'paint' argument.");
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setTickLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "\\htj}>$sy-D1u";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(29.7, (-1701.3868697), "htj}>$sy-D1u");
      cyclicNumberAxis0.setLowerMargin((-1701.3868697));
      cyclicNumberAxis0.setAutoTickUnitSelection(false);
      cyclicNumberAxis0.setAutoRangeMinimumSize(29.7, true);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'state' argument.");
      logarithmicAxis0.setVerticalTickLabels(false);
      logarithmicAxis0.setTickMarkOutsideLength(0.0F);
      logarithmicAxis0.autoAdjustRange();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("htj}>$sy-D1u");
      int int0 = 325;
      ImageIcon imageIcon0 = new ImageIcon();
      JCheckBox jCheckBox0 = new JCheckBox("Null 'state' argument.", imageIcon0);
      JScrollPane jScrollPane0 = null;
      try {
        jScrollPane0 = new JScrollPane(jCheckBox0, 500, 500);
      } catch(IllegalArgumentException e) {
         //
         // invalid verticalScrollBarPolicy
         //
         verifyException("javax.swing.JScrollPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      RectangleEdge rectangleEdge2 = Title.DEFAULT_POSITION;
      double double0 = RectangleEdge.coordinate(rectangle2D0, rectangleEdge2);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, (-2196.7538794331313), rectangle2D0, rectangle2D0, rectangleEdge1, plotRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.data.time.RegularTimePeriod");
      extendedCategoryAxis0.configure();
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      extendedCategoryAxis0.setTickLabelInsets(rectangleInsets0);
      DateAxis dateAxis0 = new DateAxis();
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1651);
      Date date0 = spreadsheetDate0.toDate();
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      Date date1 = dateAxis0.previousStandardDate(date0, dateTickUnit0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.data.time.RegularTimePeriod");
      boolean boolean0 = logarithmicAxis0.getAllowNegativesFlag();
      logarithmicAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      boolean boolean0 = numberAxis0.equals(jInternalFrame0);
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      Font font0 = numberAxis0.getTickLabelFont();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[7];
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      RectangleInsets rectangleInsets0 = dateAxis0.getLabelInsets();
      dateAxis0.setTickMarksVisible(false);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("5-j`dA}@Z==|!U_)Zzx");
      String string0 = logarithmicAxis0.makeTickLabel(0.0, true);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(subCategoryAxis0);
      NumberAxis numberAxis0 = new NumberAxis("bX");
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.NEW_DATASET;
      axisChangeEvent0.setType(chartChangeEventType0);
      numberAxis0.setAxisLinePaint(subCategoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      axisChangeEvent0.setChart(jFreeChart0);
      JFreeChart jFreeChart1 = new JFreeChart("bX", combinedRangeCategoryPlot0);
      axisChangeEvent0.setChart(jFreeChart1);
      subCategoryAxis0.notifyListeners(axisChangeEvent0);
      Font font0 = subCategoryAxis0.getSubLabelFont();
      // Undeclared exception!
      try { 
        subCategoryAxis0.getTickLabelFont((Comparable) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1997.9388198962145, "");
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setTickLabelPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickMarkInsideLength(0.0F);
      Paint paint0 = categoryAxis3D0.getTickMarkPaint();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      ICC_ColorSpace iCC_ColorSpace0 = null;
      try {
        iCC_ColorSpace0 = new ICC_ColorSpace((ICC_Profile) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.color.ICC_ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'state' argument.");
      boolean boolean0 = numberAxis3D0.equals(periodAxis0);
      numberAxis3D0.setPositiveArrowVisible(true);
      periodAxis0.setTickLabelFont(numberAxis3D0.DEFAULT_AXIS_LABEL_FONT);
      numberAxis3D0.setAutoRangeIncludesZero(true);
      DateAxis dateAxis0 = new DateAxis((String) null);
      boolean boolean1 = dateAxis0.equals((Object) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("", periodAxis0.DEFAULT_RANGE);
      moduloAxis0.resizeRange(71.06765192899, (-279.0614094562));
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat((String) null, dateFormatSymbols0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      Paint paint0 = logarithmicAxis0.getAxisLinePaint();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.setTickLabelPaint((Comparable) 1.0E-100, logarithmicAxis0.DEFAULT_TICK_MARK_PAINT);
      subCategoryAxis0.addSubCategory(logarithmicAxis0.DEFAULT_TICK_UNIT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-763.1761664783), (String) null);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(938, 10, (double) 10, 1.5707963267948966, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.05, 0.0, 2451.133172504769, 30.0);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      List list0 = cyclicNumberAxis0.refreshTicksHorizontal(graphics2D0, rectangle0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      boolean boolean0 = numberAxis3D0.hasListener(defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0);
      UnitType unitType0 = cyclicXYItemRenderer0.getGapThresholdType();
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0F, 2000000.0, (-4811.38100101), 1);
      categoryAxis3D0.setLabelInsets(rectangleInsets0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(25000.0, 25000.0);
      cyclicNumberAxis0.setAutoRangeMinimumSize(25000.0, false);
      double double0 = cyclicNumberAxis0.getOffset();
      cyclicNumberAxis0.setAutoTickUnitSelection(false, false);
      ModuloAxis moduloAxis0 = new ModuloAxis("9nL", cyclicNumberAxis0.DEFAULT_RANGE);
      double double1 = moduloAxis0.getDisplayStart();
      PeriodAxis periodAxis0 = new PeriodAxis("9nL");
      DateAxis dateAxis0 = new DateAxis();
      Date date0 = dateAxis0.getMaximumDate();
      dateAxis0.setLabel("9nL");
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Quarter quarter0 = new Quarter(date0, zoneInfo0);
      Year year0 = quarter0.getYear();
      periodAxis0.setLast(quarter0);
      cyclicNumberAxis0.setAutoRangeStickyZero(true);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("3*&%Kx");
      boolean boolean0 = subCategoryAxis0.equals("3*&%Kx");
      subCategoryAxis0.setSubLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
      double double2 = moduloAxis0.calculateHighestVisibleTickValue();
      Graphics2D graphics2D0 = null;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("", true);
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null, jCheckBoxMenuItem0);
      // Undeclared exception!
      try { 
        debugGraphics0.getClipBounds();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "55.a^3U[~U>";
      stringArray0[1] = "55.a^3U[~U>";
      stringArray0[2] = "55.a^3U[~U>";
      stringArray0[3] = "55.a^3U[~U>";
      SymbolAxis symbolAxis0 = new SymbolAxis("55.a^3U[~U>", stringArray0);
      symbolAxis0.setLabel("{ -,>o@f _+I:G5");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("55.a^3U[~U>");
      Paint paint0 = extendedCategoryAxis0.getSubLabelPaint();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("HwH :ns;=R:IKuIuIX");
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1891), 29, 0.0F);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      waferMapRenderer0.setBaseItemLabelsVisible(true, false);
      waferMapPlot0.setBackgroundImageAlignment(177);
      waferMapRenderer0.setSeriesOutlinePaint(0, categoryAxis3D0.DEFAULT_TICK_LABEL_PAINT, true);
      waferMapPlot0.setInsets(categoryAxis3D0.DEFAULT_AXIS_LABEL_INSETS, false);
      categoryAxis3D0.setPlot(waferMapPlot0);
      categoryAxis3D0.setCategoryMargin(2.5E11);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'stroke' argument.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYDataset xYDataset0 = combinedDomainXYPlot0.getDataset(500);
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, logarithmicAxis0, logarithmicAxis0, xYLineAndShapeRenderer0);
      boolean boolean0 = logarithmicAxis0.equals(xYPlot0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      ColorConvertOp colorConvertOp0 = null;
      try {
        colorConvertOp0 = new ColorConvertOp((ICC_Profile[]) null, renderingHints0);
      } catch(NullPointerException e) {
         //
         // Profiles cannot be null
         //
         verifyException("java.awt.image.ColorConvertOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Pn~zzsvJ5bH`");
      float float0 = logarithmicAxis0.getTickMarkInsideLength();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'stroke' argument.");
      CombinedDataset combinedDataset0 = new CombinedDataset();
      boolean boolean0 = subCategoryAxis0.hasListener(combinedDataset0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("ka${PyZY\"'Qs9m{.^B");
      extendedCategoryAxis0.setMaximumCategoryLabelWidthRatio(1.0F);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("{<geu{V4uZO@<@");
      boolean boolean0 = extendedCategoryAxis0.isTickLabelsVisible();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "ka${PyZY\"'Qs9m{.^B");
      boolean boolean1 = cyclicNumberAxis0.getAutoRangeStickyZero();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3378, (-584), (-584), 2683, (-584));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      TimeZone timeZone0 = TimeZone.getDefault();
      PeriodAxis periodAxis0 = new PeriodAxis("#.#h#S-@!z)mV]:BM", quarter0, quarter0, timeZone0);
      TimeZone timeZone1 = periodAxis0.getTimeZone();
      Stroke stroke0 = periodAxis0.getAxisLineStroke();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      numberAxis3D0.setFixedDimension(4);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      numberAxis3D0.setNumberFormatOverride(decimalFormat0);
      boolean boolean0 = numberAxis3D0.getAutoRangeIncludesZero();
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.calculateLowestVisibleTickValue((DateTickUnit) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      RectangleInsets rectangleInsets0 = numberAxis3D0.getTickLabelInsets();
      String string0 = "[`k,9X";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8, 741.6, "[`k,9X");
      boolean boolean0 = cyclicNumberAxis0.equals("[`k,9X");
      cyclicNumberAxis0.setAxisLinePaint(numberAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      cyclicNumberAxis0.setTickMarkInsideLength((-396.5888F));
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("[`k,9X");
      extendedCategoryAxis0.setMaximumCategoryLabelLines(500);
      RectangleEdge rectangleEdge0 = null;
      cyclicNumberAxis0.advanceLineStroke = extendedCategoryAxis0.DEFAULT_TICK_MARK_STROKE;
      int int0 = 0;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(500, 500, 0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'stroke' argument.");
      subCategoryAxis0.setMaximumCategoryLabelWidthRatio(0.0F);
      String string0 = subCategoryAxis0.getLabel();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Null 'stroke' argument.";
      stringArray0[1] = "GradientPaintTransformType.CENTER_VERTICAL";
      stringArray0[2] = "Null 'stroke' argument.";
      stringArray0[3] = "org.jfree.chart.text.TextAnchor";
      stringArray0[4] = "Null 'font' not allowed.";
      stringArray0[5] = "Null 'stroke' argument.";
      stringArray0[6] = "Null 'stroke' argument.";
      stringArray0[7] = "Null 'stroke' argument.";
      SymbolAxis symbolAxis0 = new SymbolAxis("GradientPaintTransformType.CENTER_VERTICAL", stringArray0);
      String[] stringArray1 = symbolAxis0.getSymbols();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, 0.75, "org.jfree.chart.text.TextAnchor");
      Rectangle rectangle0 = new Rectangle(500, 500);
      Rectangle2D rectangle2D0 = subCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0, true, true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(500);
      double double0 = cyclicNumberAxis0.valueToJava2D(0.05, rectangle2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2393.56578993, 2393.56578993, "");
      cyclicNumberAxis0.setRangeAboutValue(2393.56578993, 2393.56578993);
      cyclicNumberAxis0.setAutoTickUnitSelection(false);
      cyclicNumberAxis0.setTickLabelsVisible(false);
      cyclicNumberAxis0.configure();
      cyclicNumberAxis0.setFixedAutoRange(0.0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "FM9.R]";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(500, 0, 500);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 500
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "DL,`Qz>\"";
      DateAxis dateAxis0 = new DateAxis("DL,`Qz>\"");
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("DL,`Qz>\"", "DL,`Qz>\"", 0.0F, 2.0);
      Paint paint0 = categoryPointerAnnotation0.getPaint();
      dateAxis0.setTickMarkPaint(paint0);
      dateAxis0.setTickLabelsVisible(true);
      dateAxis0.setTickMarkInsideLength(778.0F);
      // Undeclared exception!
      try { 
        dateAxis0.setRange(1338.0, 1338.0);
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("4b&x<\"wfDdm@,");
      Paint paint0 = subCategoryAxis0.getSubLabelPaint();
      subCategoryAxis0.setAxisLineVisible(false);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.configure();
      // Undeclared exception!
      try { 
        subCategoryAxis0.setCategoryLabelPositions((CategoryLabelPositions) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'positions' argument.
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1587.563682), (-1587.563682));
      double double0 = cyclicNumberAxis0.getCycleBound();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      cyclicNumberAxis0.addChangeListener(combinedDomainXYPlot0);
      cyclicNumberAxis0.setLabelURL("ZT2`@");
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.addSubCategory(true);
      MultiListUI multiListUI0 = new MultiListUI();
      NumberAxis[] numberAxisArray0 = new NumberAxis[7];
      numberAxisArray0[0] = (NumberAxis) cyclicNumberAxis0;
      numberAxisArray0[1] = (NumberAxis) cyclicNumberAxis0;
      numberAxisArray0[2] = (NumberAxis) cyclicNumberAxis0;
      numberAxisArray0[3] = (NumberAxis) cyclicNumberAxis0;
      numberAxisArray0[4] = (NumberAxis) cyclicNumberAxis0;
      numberAxisArray0[5] = (NumberAxis) cyclicNumberAxis0;
      numberAxisArray0[6] = (NumberAxis) cyclicNumberAxis0;
      DefaultComboBoxModel<NumberAxis> defaultComboBoxModel0 = new DefaultComboBoxModel<NumberAxis>(numberAxisArray0);
      JList<NumberAxis> jList0 = new JList<NumberAxis>(defaultComboBoxModel0);
      // Undeclared exception!
      try { 
        multiListUI0.indexToLocation(jList0, (-3309));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      Object object0 = categoryAxis3D0.clone();
      Paint paint0 = categoryAxis3D0.getTickLabelPaint();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      Paint paint1 = subCategoryAxis0.getSubLabelPaint();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("g4= tCz=mILnPMx");
      TextBlock textBlock0 = new TextBlock();
      CategoryLabelPosition categoryLabelPosition0 = new CategoryLabelPosition();
      extendedCategoryAxis0.setVisible(false);
      Graphics2D graphics2D0 = null;
      double double0 = extendedCategoryAxis0.calculateTextBlockWidth(textBlock0, categoryLabelPosition0, (Graphics2D) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "g4= tCz=mILnPMx");
      cyclicNumberAxis0.setFixedAutoRange(0.0F);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS.createAdjustedRectangle((Rectangle2D) null, lengthAdjustmentType0, lengthAdjustmentType0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.data.general.WaferMapDataset");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3135.4), "8\rTm B)");
      TickUnitSource tickUnitSource0 = NumberAxis.createStandardTickUnits();
      MarkerAxisBand markerAxisBand0 = cyclicNumberAxis0.getMarkerBand();
      cyclicNumberAxis0.setMarkerBand((MarkerAxisBand) null);
      boolean boolean0 = cyclicNumberAxis0.isAdvanceLineVisible();
      double double0 = cyclicNumberAxis0.getFixedDimension();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1014.7254097, 1014.7254097, "H+~#w^(4");
      cyclicNumberAxis0.setRangeWithMargins(1014.7254097, 1693.0);
      float[][] floatArray0 = new float[9][1];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 2.0F;
      floatArray1[2] = (float) 500;
      floatArray1[3] = (-1928.4F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = (float) 500;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = (-1928.4F);
      floatArray2[1] = 577.9061F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = (float) 500;
      floatArray2[4] = 0.0F;
      floatArray2[5] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray3[0] = 0.0F;
      floatArray3[1] = (float) 500;
      floatArray3[2] = 577.9061F;
      floatArray3[3] = 2.0F;
      floatArray3[4] = 577.9061F;
      floatArray3[5] = 577.9061F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[3];
      floatArray4[0] = 0.0F;
      floatArray4[1] = (-1928.4F);
      floatArray4[2] = (-1928.4F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      floatArray5[0] = 2.0F;
      floatArray5[1] = 2.0F;
      floatArray5[2] = 0.0F;
      floatArray5[3] = (float) 500;
      floatArray5[4] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[9];
      floatArray6[0] = (float) 500;
      floatArray6[1] = 577.9061F;
      floatArray6[2] = 0.0F;
      floatArray6[3] = 577.9061F;
      floatArray6[4] = 577.9061F;
      floatArray6[5] = 0.0F;
      floatArray6[6] = 577.9061F;
      floatArray6[7] = (float) 500;
      floatArray6[8] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[5];
      floatArray7[0] = 2.0F;
      floatArray7[1] = (float) 500;
      floatArray7[2] = (float) 500;
      floatArray7[3] = (float) 500;
      floatArray7[4] = 2.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[2];
      floatArray8[0] = 2.0F;
      floatArray8[1] = 577.9061F;
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[1];
      floatArray9[0] = 2.0F;
      floatArray0[8] = floatArray9;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 500, 10, 757, 10, 0, true, true, false, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2382, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      int[] intArray0 = new int[1];
      intArray0[0] = 420;
      Polygon polygon0 = null;
      try {
        polygon0 = new Polygon(intArray0, intArray0, (-1815));
      } catch(NegativeArraySizeException e) {
         //
         // npoints < 0
         //
         verifyException("java.awt.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      DateAxis dateAxis0 = null;
      try {
        dateAxis0 = new DateAxis("", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }
}
