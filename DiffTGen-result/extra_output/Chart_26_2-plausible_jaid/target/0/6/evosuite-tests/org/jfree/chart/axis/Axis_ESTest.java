/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 08:40:01 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.time.Hour;
import org.jfree.data.time.RegularTimePeriod;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis3D0);
      categoryAxis3D0.notifyListeners(axisChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(">lQ-*!6");
      boolean boolean0 = numberAxis3D0.equals(zoneInfo0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      Object object0 = cyclicNumberAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickMarksVisible(false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis("9cxTSorM(A+'`#@4:E,", stringArray0);
      RectangleInsets rectangleInsets0 = symbolAxis0.getTickLabelInsets();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      float float0 = valueAxis0.getTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setAxisLineVisible(false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      boolean boolean0 = numberAxis3D0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      Stroke stroke0 = valueAxis0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("H~_I4d)");
      Plot plot0 = extendedCategoryAxis0.getPlot();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      symbolAxis0.addChangeListener(piePlot3D0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("PLtAWv,s");
      boolean boolean0 = categoryAxis0.isAxisLineVisible();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      PiePlot3D piePlot3D0 = new PiePlot3D();
      logarithmicAxis0.setPlot(piePlot3D0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      Rectangle2D rectangle2D0 = dateAxis0.getLabelEnclosure((Graphics2D) null, (RectangleEdge) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      boolean boolean0 = categoryAxis3D0.hasListener((EventListener) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("38A`/<mYj/$C6Rs");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Paint paint0 = thermometerPlot0.getSubrangePaint(64);
      subCategoryAxis0.setTickMarkPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("org.jfree.chart.renderer.LookupPaintScale", stringArray0);
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickMarkStroke(symbolAxis0.DEFAULT_TICK_MARK_STROKE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Stroke stroke0 = combinedDomainXYPlot0.getRangeCrosshairStroke();
      symbolAxis0.setTickMarkStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("DefaultIntervalCategoryDataset.setValue: unrecognised category.");
      logarithmicAxis0.setTickMarksVisible(true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'insets' argument.");
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'insets' argument.");
      DateAxis dateAxis0 = new DateAxis();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, dateAxis0, stackedBarRenderer0);
      periodAxis0.setTickLabelInsets(categoryPlot0.DEFAULT_INSETS);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      Color color0 = (Color)XYTextAnnotation.DEFAULT_PAINT;
      categoryAxis3D0.setTickLabelPaint(color0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'id' argument.");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setTickLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("org.jfree.data.time.TimePeriodValue");
      categoryAxis3D0.setTickLabelFont(numberAxis3D0.DEFAULT_AXIS_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "fz(");
      cyclicNumberAxis0.setTickLabelsVisible(false);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'paint' argument.");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1541.1));
      Stroke stroke0 = candlestickRenderer0.getBaseOutlineStroke();
      categoryAxis0.setAxisLineStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      // Undeclared exception!
      try { 
        periodAxis0.setAxisLinePaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      Color color0 = (Color)XYTextAnnotation.DEFAULT_PAINT;
      categoryAxis3D0.setAxisLinePaint(color0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0, "18FZh7vBMC");
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setLabelInsets((RectangleInsets) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.setLabelPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("YR],`");
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelPaint(numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setLabelFont(logarithmicAxis0.DEFAULT_AXIS_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      cyclicNumberAxis0.setLabel(" !g'J/Vbz4^[;a?X0bV");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabel("");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("^>KldL");
      String string0 = extendedCategoryAxis0.getLabelToolTip();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      double[][] doubleArray0 = new double[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultIntervalCategoryDataset0, tableOrder0);
      extendedCategoryAxis0.removeChangeListener(spiderWebPlot0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("^>KldL");
      extendedCategoryAxis0.setLabelToolTip("^>KldL");
      String string0 = extendedCategoryAxis0.getLabelToolTip();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setLabelAngle(2085.925044764067);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0, "");
      cyclicNumberAxis0.setTickMarkOutsideLength(0.0F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      double double0 = dateAxis0.getLabelAngle();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'insets' argument.");
      Paint paint0 = periodAxis0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = (MockDate)DateAxis.DEFAULT_ANCHOR_DATE;
      Hour hour0 = new Hour(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("fz(", hour0, hour0);
      RectangleInsets rectangleInsets0 = periodAxis0.getLabelInsets();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0, "18FZh7vBMC");
      cyclicNumberAxis0.setLabelURL("");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.axis.CategoryLabelPositions");
      extendedCategoryAxis0.setFixedDimension(948.769272);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2688, 3278, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Font font0 = dateAxis0.getLabelFont();
  }
}
