/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 07:07:45 GMT 2020
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JApplet;
import javax.swing.JRadioButton;
import javax.swing.JTextPane;
import javax.swing.plaf.metal.MetalLabelUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = BarRenderer.getDefaultShadowsVisible();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Shape shape0 = scatterRenderer0.lookupLegendShape((-741));
      boolean boolean1 = true;
      int int0 = 0;
      CategoryToolTipGenerator categoryToolTipGenerator0 = scatterRenderer0.getSeriesToolTipGenerator(0);
      // Undeclared exception!
      try { 
        scatterRenderer0.setSeriesToolTipGenerator((-741), (CategoryToolTipGenerator) null, true);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int0 = 0;
      boolean boolean0 = scatterRenderer0.getSeriesShapesFilled(0);
      int int1 = 2061;
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = scatterRenderer0.getItemLabelGenerator(2061, 3731, true);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      BufferedImageRenderingSource bufferedImageRenderingSource0 = null;
      try {
        bufferedImageRenderingSource0 = new BufferedImageRenderingSource((BufferedImage) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.BufferedImageRenderingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = (-834);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      int int1 = (-972);
      int int2 = 0;
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.setPlot((CategoryPlot) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getTickLabelPaint();
      intervalBarRenderer0.setLegendTextPaint(0, paint0);
      Paint paint1 = intervalBarRenderer0.lookupSeriesOutlinePaint((-2908));
      CategoryURLGenerator categoryURLGenerator0 = intervalBarRenderer0.getBaseURLGenerator();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.getFillBox();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      Number[][] numberArray0 = new Number[6][7];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) 10.0F;
      numberArray1[1] = (Number) 10;
      numberArray1[2] = (Number) 3.0F;
      numberArray1[3] = (Number) 10;
      numberArray1[4] = (Number) 10;
      numberArray1[5] = (Number) intervalBarRenderer0.ZERO;
      numberArray1[6] = (Number) 0.2;
      numberArray1[7] = (Number) 0.05;
      numberArray1[8] = (Number) 0.2;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      numberArray3[0] = (Number) 0.0F;
      numberArray3[1] = (Number) 0.0F;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[8];
      numberArray4[0] = (Number) 10;
      numberArray4[1] = (Number) 0.2;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getStartX(10, 10);
      numberArray4[2] = number0;
      numberArray4[3] = (Number) 10;
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        taskSeriesCollection1.getEndValue(10, (-2908));
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      int int0 = barRenderer3D0.hashCode();
      CategoryToolTipGenerator categoryToolTipGenerator0 = barRenderer3D0.getSeriesToolTipGenerator(3);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(standardCategorySeriesLabelGenerator0, true);
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 3, 0, 0, 0, 0, 4377, true, false, true, false, false, true, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      int int0 = defaultCategoryItemRenderer0.hashCode();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(defaultCategoryItemRenderer0.ZERO, 0.0, defaultCategoryItemRenderer0.ZERO, 0.0, defaultCategoryItemRenderer0.DEFAULT_PAINT, defaultCategoryItemRenderer0.DEFAULT_OUTLINE_STROKE);
      float[][] floatArray0 = new float[7][4];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 477.91675F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 4013.9683F;
      floatArray1[3] = 0.8F;
      floatArray1[4] = (-3117.743F);
      floatArray1[5] = 34.8F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = 34.8F;
      floatArray2[1] = 4013.9683F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = 477.91675F;
      floatArray2[5] = 4013.9683F;
      floatArray2[6] = 122.4F;
      floatArray2[7] = 0.0F;
      floatArray2[8] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[1];
      floatArray3[0] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[9];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.8F;
      floatArray4[2] = 0.8F;
      floatArray4[3] = 4013.9683F;
      floatArray4[4] = 477.91675F;
      floatArray4[5] = (-3117.743F);
      floatArray4[6] = 122.4F;
      floatArray4[7] = 122.4F;
      floatArray4[8] = 477.91675F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[4];
      floatArray5[0] = 34.8F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray5[3] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[0];
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[6];
      floatArray7[0] = 0.0F;
      floatArray7[1] = 4013.9683F;
      floatArray7[2] = (-75.1F);
      floatArray7[3] = 0.0F;
      floatArray7[4] = 0.8F;
      floatArray7[5] = 0.0F;
      floatArray0[6] = floatArray7;
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("Base tool tip generator not cloneable.", stringArray0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, symbolAxis0, symbolAxis0);
      Stroke stroke0 = fastScatterPlot0.getRangeGridlineStroke();
      categoryLineAnnotation0.setStroke(stroke0);
      Object object0 = categoryLineAnnotation0.clone();
      boolean boolean0 = defaultCategoryItemRenderer0.removeAnnotation(categoryLineAnnotation0);
      int int1 = defaultCategoryItemRenderer0.getPassCount();
      LegendItem legendItem0 = defaultCategoryItemRenderer0.getLegendItem(2, (-1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setLegendTextFont(0, lineRenderer3D0.DEFAULT_VALUE_LABEL_FONT);
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getBaseURLGenerator();
      lineRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) null, true);
      lineRenderer3D0.setSeriesShapesFilled(59, true);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(12.0, (double) lineRenderer3D0.ZERO, 8.0, 12.0, lineRenderer3D0.DEFAULT_VALUE_LABEL_PAINT, lineRenderer3D0.DEFAULT_OUTLINE_STROKE);
      lineRenderer3D0.setLegendTextFont(0, statisticalBarRenderer0.DEFAULT_VALUE_LABEL_FONT);
      categoryLineAnnotation0.setStroke(lineRenderer3D0.DEFAULT_STROKE);
      boolean boolean0 = lineRenderer3D0.equals(categoryLineAnnotation0);
      double double0 = lineRenderer3D0.getXOffset();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      String string0 = "Jean-Luc SCHWAB";
      lineAndShapeRenderer0.setItemLabelAnchorOffset(500.0);
      lineAndShapeRenderer0.setUseFillPaint(true);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("Jean-Luc SCHWAB");
      Object object0 = standardCategorySeriesLabelGenerator0.clone();
      lineAndShapeRenderer0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      Boolean boolean0 = lineAndShapeRenderer0.getSeriesShapesVisible((-1));
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(3186.5479395424586, 3186.5479395424586, true);
      stackedBarRenderer3D0.setIgnoreZeroValues(true);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setGroupStroke(lineAndShapeRenderer0.DEFAULT_STROKE);
      int int0 = 3;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-1925), 3, (-1));
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -1
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = minMaxCategoryRenderer0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      Image image0 = JFreeChart.DEFAULT_BACKGROUND_IMAGE;
      String string0 = "8F?(-_Hw<Ca1<";
      ImageIcon imageIcon0 = null;
      try {
        imageIcon0 = new ImageIcon((Image) null, "8F?(-_Hw<Ca1<");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.ImageIcon", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setBaseShapesFilled(true);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(476.392712005, (-4003.522), true);
      CategoryPlot categoryPlot0 = stackedBarRenderer3D0.getPlot();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(1.0F, (-2191.439F), 1024.0F, (-2.0F), 10, 0.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      CategoryDataset categoryDataset0 = null;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      boolean boolean0 = groupedStackedBarRenderer0.equals(statisticalBarRenderer0);
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 3.0;
      doubleArray2[1] = (double) groupedStackedBarRenderer0.ZERO;
      doubleArray2[2] = (double) 1.0F;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 10;
      doubleArray3[1] = (double) 10;
      doubleArray3[2] = 3514.96;
      doubleArray3[3] = 3.0;
      doubleArray3[4] = (double) 10;
      doubleArray3[5] = (double) 10;
      doubleArray3[6] = 0.2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 3514.96;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 3514.96;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) statisticalBarRenderer0.ZERO;
      doubleArray5[3] = (double) 10;
      doubleArray5[4] = (double) 1.0F;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.getDomainAxis((CategoryPlot) null, defaultIntervalCategoryDataset0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer0.getDrawOutlines();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      int int0 = 1949;
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getToolTipGenerator(1949, 1949, false);
      scatterRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, false);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getSelectionColor();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(color0, color0, color0, color0);
      LegendItemCollection legendItemCollection0 = waterfallBarRenderer0.getLegendItems();
      Paint paint0 = waterfallBarRenderer0.getFirstBarPaint();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      Boolean boolean0 = lineAndShapeRenderer0.getSeriesShapesVisible((-899));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.getItemLineVisible(0, 1397);
      boolean boolean1 = lineAndShapeRenderer0.getItemShapeFilled(1397, (-2370));
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean2 = true;
      boxAndWhiskerRenderer0.setAutoPopulateSeriesOutlinePaint(true);
      boolean boolean3 = boxAndWhiskerRenderer0.getFillBox();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getBaseItemLabelGenerator();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesItemLabelGenerator((-2370), (CategoryItemLabelGenerator) null, true);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      int int0 = 0;
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      Stroke stroke0 = defaultCategoryItemRenderer0.lookupSeriesOutlineStroke(127);
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, true);
      defaultCategoryItemRenderer0.setUseOutlinePaint(false);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 453.865308, true);
      Vector<DefaultCategoryDataset> vector0 = new Vector<DefaultCategoryDataset>();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setAutoPopulateSeriesOutlinePaint(false);
      double double0 = lineRenderer3D0.getYOffset();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      double double1 = ganttRenderer0.getMinimumBarLength();
      int int0 = 532;
      CategoryURLGenerator categoryURLGenerator0 = ganttRenderer0.getURLGenerator(532, 0, false);
      DrawingSupplier drawingSupplier0 = lineRenderer3D0.getDrawingSupplier();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int1 = 2369;
      int int2 = 44;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 0, byteArray0, byteArray0, byteArray0);
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      categoryStepRenderer0.setPlot(combinedRangeCategoryPlot0);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = categoryStepRenderer0.getLegendItemLabelGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Boolean boolean0 = Boolean.TRUE;
      scatterRenderer0.setSeriesShapesFilled(5, boolean0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Paint paint0 = stackedBarRenderer3D0.getShadowPaint();
      JFreeChart jFreeChart0 = new JFreeChart("Base item URL generator not cloneable.", combinedRangeCategoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(68, 3712, 1, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(3712);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3712, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = false;
      CategoryToolTipGenerator categoryToolTipGenerator0 = boxAndWhiskerRenderer0.getToolTipGenerator(1370, (-940), false);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Stroke stroke0 = minMaxCategoryRenderer0.getItemOutlineStroke(1658, 182, false);
      minMaxCategoryRenderer0.setGroupStroke(stroke0);
      CategoryToolTipGenerator categoryToolTipGenerator0 = minMaxCategoryRenderer0.getToolTipGenerator(1658, 0, true);
      int int0 = minMaxCategoryRenderer0.getPassCount();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-489.00472905404), (-489.00472905404));
      Color color0 = (Color)XYLine3DRenderer.DEFAULT_WALL_PAINT;
      barRenderer3D0.setBaseLegendTextPaint(color0);
      Paint paint0 = barRenderer3D0.getWallPaint();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = barRenderer3D0.getSeriesItemLabelGenerator(1148);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getClosedIcon();
      minMaxCategoryRenderer0.setMinIcon(icon0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("Null 'paint' argument.", numberFormat0);
      Shape shape0 = lineAndShapeRenderer0.lookupSeriesShape(1543);
      Object object0 = intervalCategoryToolTipGenerator0.clone();
      lineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.setMaximumBarWidth(0.0);
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 0.2;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, (-1), (-1), (-1), 1543, true, true, true, true, true, true, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setAutoPopulateSeriesOutlinePaint(true);
      int int0 = stackedAreaRenderer0.hashCode();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = null;
      DateAxis dateAxis0 = new DateAxis();
      AffineTransform affineTransform0 = null;
      lineRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, true);
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("org.jfree.data.xy.YIntervalSeriesCollection", (Plot) null);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, false);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      Range range0 = lineAndShapeRenderer0.findRangeBounds((CategoryDataset) null);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) lineAndShapeRenderer0.ZERO);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, false);
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getSeriesItemLabelGenerator(1);
      areaRenderer0.setSeriesItemLabelGenerator(5, (CategoryItemLabelGenerator) null, false);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      JRadioButton jRadioButton0 = new JRadioButton("Null 'object' argument.", false);
      boolean boolean0 = scatterRenderer0.equals(jRadioButton0);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      boolean boolean1 = lineAndShapeRenderer0.getUseSeriesOffset();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      Range range0 = stackedBarRenderer0.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Line2D.Double line2D_Double0 = new Line2D.Double(0.2, 0.0, (-1396.382889932758), 0.2);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryStepRenderer_State0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, rectangle0, categoryPlot0, defaultCategoryDataset0, plotRenderingInfo1);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      int int0 = (-1222);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CategoryURLGenerator categoryURLGenerator0 = spiderWebPlot0.getURLGenerator();
      // Undeclared exception!
      try { 
        lineRenderer3D0.setSeriesURLGenerator((-1222), (CategoryURLGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      BasicStroke basicStroke0 = (BasicStroke)PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
      minMaxCategoryRenderer0.setGroupStroke(basicStroke0);
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem(0, 20);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("David Berry", minMaxCategoryRenderer0.ZERO, (-391.38867));
      boolean boolean0 = minMaxCategoryRenderer0.removeAnnotation(categoryTextAnnotation0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setStartPercent((-2607.938549));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setAutoPopulateSeriesStroke(true);
      boolean boolean0 = stackedAreaRenderer0.getRenderAsPercentages();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      LegendItem legendItem0 = boxAndWhiskerRenderer0.getLegendItem(1, 176);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.removeAnnotations();
      Object object0 = minMaxCategoryRenderer0.clone();
      CategoryURLGenerator categoryURLGenerator0 = minMaxCategoryRenderer0.getURLGenerator((-757), (-757), true);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      double double0 = stackedBarRenderer3D0.getYOffset();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Object object1 = chartRenderingInfo0.clone();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      boolean boolean0 = plotRenderingInfo0.equals(categoryStepRenderer0);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getItemLabelGenerator((-305), (-4142), true);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.setSeriesItemLabelGenerator((-757), (CategoryItemLabelGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.getUseSeriesOffset();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) lineAndShapeRenderer0.ZERO, (-1936.54833), false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(lineAndShapeRenderer0.ZERO, 4.0, lineAndShapeRenderer0.ZERO, (-1936.54833), lineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT, stackedBarRenderer3D0.DEFAULT_OUTLINE_STROKE);
      boolean boolean1 = stackedBarRenderer3D0.equals(categoryLineAnnotation0);
  }
}
