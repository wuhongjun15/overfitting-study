/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 04:35:53 GMT 2020
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.IndexColorModel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.lang.reflect.Array;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.JTextComponent;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardXYItemLabelGenerator;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.AreaRendererEndType;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarPainter;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GradientBarPainter;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.WindItemRenderer;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.SpreadsheetDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int0 = (-5479);
      Paint paint0 = scatterRenderer0.lookupSeriesFillPaint((-5479));
      Object object0 = scatterRenderer0.clone();
      scatterRenderer0.setLegendTextPaint(0, paint0);
      int int1 = (-89);
      boolean boolean0 = scatterRenderer0.getSeriesShapesFilled((-89));
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-89), (double) scatterRenderer0.ZERO);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        scatterRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet(styleContext_NamedStyle0);
      Color color0 = defaultStyledDocument0.getBackground(simpleAttributeSet0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Paint paint0 = combinedDomainXYPlot0.getDomainGridlinePaint();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(color0, color0, color0, paint0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      boolean boolean0 = minMaxCategoryRenderer0.isDrawLines();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      String string0 = "org.jfree.chart.labels.IntervalCategoryToolTipGenerator";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.labels.IntervalCategoryToolTipGenerator");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = minMaxCategoryRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedDomainCategoryPlot0, defaultKeyedValues2DDataset0, plotRenderingInfo0);
      CategoryCrosshairState categoryCrosshairState0 = categoryItemRendererState0.getCrosshairState();
      int int0 = (-1194);
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(10, 1767, (-1194));
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setErrorIndicatorPaint(stackedAreaRenderer0.DEFAULT_PAINT);
      Object object0 = stackedAreaRenderer0.clone();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getBaseURLGenerator();
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      stackedAreaRenderer0.setRenderAsPercentages(false);
      Comparable<LineAndShapeRenderer>[] comparableArray0 = (Comparable<LineAndShapeRenderer>[]) Array.newInstance(Comparable.class, 5);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      comparableArray0[0] = (Comparable<LineAndShapeRenderer>) fixedMillisecond0;
      String string0 = null;
      // Undeclared exception!
      try { 
        Quarter.parseQuarter((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Locale locale0 = Locale.CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("Null 'annotation' argument.", numberFormat0);
      Object object0 = intervalCategoryItemLabelGenerator0.clone();
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      boolean boolean0 = scatterRenderer0.getItemShapeFilled(2274, 2274);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-783.6497678), (double) scatterRenderer0.ZERO);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = new IntervalCategoryItemLabelGenerator();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(intervalCategoryItemLabelGenerator1);
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("");
      stackedBarRenderer3D0.setSeriesURLGenerator(200, (CategoryURLGenerator) standardCategoryURLGenerator0);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setSeriesShapesFilled(3, true);
      scatterRenderer0.setLegendTextFont(3, stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_FONT);
      LegendItem legendItem0 = stackedBarRenderer3D0.getLegendItem(3515, 3515);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setNegativeBarPaint(scatterRenderer0.DEFAULT_OUTLINE_PAINT);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(boxAndWhiskerRenderer0, false);
      waterfallBarRenderer0.notifyListeners(rendererChangeEvent0);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", 0.2, 0.2, 0.2);
      boolean boolean0 = waterfallBarRenderer0.removeAnnotation(categoryPointerAnnotation0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      int int0 = 1930;
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = levelRenderer0.getSeriesItemLabelGenerator(1930);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      int int1 = 3;
      waterfallBarRenderer0.setLegendShape(3, levelRenderer0.DEFAULT_SHAPE);
      double double0 = waterfallBarRenderer0.getMinimumBarLength();
      waterfallBarRenderer0.setShadowYOffset(1930);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1930, (-1.0));
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 1930;
      intArray0[2] = 1930;
      intArray0[3] = 3;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      boolean boolean0 = false;
      int int2 = 0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-1), 3, intArray0, 3, false, 0, 0);
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      Stroke stroke0 = statisticalLineAndShapeRenderer0.getErrorIndicatorStroke();
      boolean boolean0 = statisticalLineAndShapeRenderer0.getBaseLinesVisible();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getItemLabelPaint(0, 0, true);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(statisticalLineAndShapeRenderer0.DEFAULT_PAINT, paint0, statisticalLineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      Paint paint1 = waterfallBarRenderer0.getLastBarPaint();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalLineAndShapeRenderer0.getLegendItemLabelGenerator();
      waterfallBarRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      int int0 = 1;
      statisticalLineAndShapeRenderer0.setSeriesLinesVisible(1, false);
      Paint paint0 = null;
      statisticalLineAndShapeRenderer0.setLegendTextPaint(1, (Paint) null);
      int int1 = 2233;
      statisticalLineAndShapeRenderer0.setSeriesShapesFilled(2233, false);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      double double0 = ganttRenderer0.getEndPercent();
      int int2 = 2617;
      BarRenderer barRenderer0 = new BarRenderer();
      Paint paint1 = barRenderer0.lookupSeriesPaint(1);
      int int3 = 48;
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = barRenderer0.getItemLabelGenerator(48, 2617, false);
      ganttRenderer0.setSeriesItemLabelGenerator(2617, (CategoryItemLabelGenerator) null, false);
      String string0 = null;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((String) null, statisticalLineAndShapeRenderer0.DEFAULT_VALUE_LABEL_FONT, (Plot) null, true);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      Shape shape0 = lineAndShapeRenderer0.lookupSeriesShape(0);
      boolean boolean0 = lineAndShapeRenderer0.getBaseLinesVisible();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      boolean boolean1 = lineAndShapeRenderer0.equals(shape0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      boolean boolean2 = stackedAreaRenderer0.equals(shape0);
      PiePlot piePlot0 = new PiePlot();
      Paint paint0 = piePlot0.getBaseSectionPaint();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(stackedBarRenderer0.DEFAULT_PAINT, stackedAreaRenderer0.DEFAULT_PAINT, paint0, piePlot0.DEFAULT_BACKGROUND_PAINT);
      Paint paint1 = waterfallBarRenderer0.getLastBarPaint();
      ItemLabelPosition itemLabelPosition0 = waterfallBarRenderer0.getPositiveItemLabelPositionFallback();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 0, (-65));
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(waterfallBarRenderer0, seriesChangeInfo0);
      taskSeriesCollection0.seriesChanged(seriesChangeEvent0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1303, 0);
      Range range0 = stackedAreaRenderer0.findRangeBounds(slidingGanttCategoryDataset0);
      int int0 = waterfallBarRenderer0.getColumnCount();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      boolean boolean0 = categoryStepRenderer0.equals(boxAndWhiskerToolTipGenerator0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryStepRenderer_State0.getEntityCollection();
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      GanttRenderer[] ganttRendererArray0 = new GanttRenderer[8];
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRendererArray0[0] = ganttRenderer0;
      GanttRenderer ganttRenderer1 = new GanttRenderer();
      ganttRendererArray0[1] = ganttRenderer1;
      GanttRenderer ganttRenderer2 = new GanttRenderer();
      ganttRendererArray0[2] = ganttRenderer2;
      GanttRenderer ganttRenderer3 = new GanttRenderer();
      ganttRendererArray0[3] = ganttRenderer3;
      GanttRenderer ganttRenderer4 = new GanttRenderer();
      ganttRendererArray0[4] = ganttRenderer4;
      GanttRenderer ganttRenderer5 = new GanttRenderer();
      ganttRendererArray0[5] = ganttRenderer5;
      GanttRenderer ganttRenderer6 = new GanttRenderer();
      ganttRendererArray0[6] = ganttRenderer6;
      GanttRenderer ganttRenderer7 = new GanttRenderer();
      ganttRendererArray0[7] = ganttRenderer7;
      JList<GanttRenderer> jList0 = new JList<GanttRenderer>(ganttRendererArray0);
      Rectangle rectangle0 = jList0.getCellBounds(5, 5);
      Rectangle2D rectangle2D0 = rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0);
      plotRenderingInfo0.setDataArea(rectangle2D0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo1);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean1 = lineRenderer3D0.getDrawOutlines();
      CategoryToolTipGenerator categoryToolTipGenerator0 = categoryStepRenderer0.getBaseToolTipGenerator();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.setBase((-2599.53));
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      AreaRendererEndType areaRendererEndType0 = stackedAreaRenderer0.getEndType();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      double double0 = levelRenderer0.getItemMargin();
      double double1 = stackedBarRenderer3D0.getBase();
      lineRenderer3D0.setBaseLinesVisible(true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DateAxis dateAxis0 = new DateAxis("");
      dateAxis0.setMinorTickMarksVisible(true);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis3D0, dateAxis0, stackedAreaRenderer0);
      CategoryAxis categoryAxis0 = stackedAreaRenderer0.getDomainAxis(categoryPlot0, defaultKeyedValues2DDataset0);
      dateAxis0.setLabelInsets(categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS, true);
      int int0 = stackedAreaRenderer0.getPassCount();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = null;
      try {
        standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator((String) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'format' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.drawAnnotations((Graphics2D) null, (Rectangle2D) null, categoryAxis3D0, (ValueAxis) null, (Layer) null, plotRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      lineRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      boolean boolean0 = intervalCategoryItemLabelGenerator0.equals(standardCategoryToolTipGenerator0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.setSeriesItemLabelGenerator((-4123), (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedAreaRenderer0.getLegendItemURLGenerator();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer();
      boolean boolean0 = minMaxCategoryRenderer0.equals(stackedAreaRenderer1);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      JPasswordField jPasswordField0 = new JPasswordField();
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jPasswordField0.new AccessibleJTextComponent();
      Rectangle rectangle0 = jTextComponent_AccessibleJTextComponent0.getTextBounds(304, 15);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis("");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer1.hitTest((double) stackedAreaRenderer0.ZERO, (double) minMaxCategoryRenderer0.ZERO, graphics2D0, (Rectangle2D) null, combinedDomainCategoryPlot0, categoryAxis3D0, logAxis0, (CategoryDataset) null, (-2382), (-2069), true, categoryItemRendererState0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getSeriesToolTipGenerator((-4714));
      levelRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null);
      levelRenderer0.setItemMargin(2854.31285123);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Paint paint0 = boxAndWhiskerRenderer0.getArtifactPaint();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      double[] doubleArray0 = stackedBarRenderer3D0.calculateBarL0L1(1225.47, 768.009946, 0.2);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setWallPaint(levelRenderer0.DEFAULT_OUTLINE_PAINT);
      CategoryPlot categoryPlot0 = levelRenderer0.getPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null);
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setAutoPopulateSeriesPaint(true);
      boolean boolean0 = defaultCategoryItemRenderer0.getBaseShapesVisible();
      CategoryToolTipGenerator categoryToolTipGenerator0 = defaultCategoryItemRenderer0.getToolTipGenerator((-308), (-308), false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setUseOutlinePaint(true);
      statisticalLineAndShapeRenderer0.setDrawOutlines(false);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getBaseItemLabelGenerator();
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, false);
      statisticalLineAndShapeRenderer0.setAutoPopulateSeriesOutlinePaint(true);
      Paint paint0 = statisticalLineAndShapeRenderer0.getErrorIndicatorPaint();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.isMedianVisible();
      boolean boolean1 = statisticalLineAndShapeRenderer0.getBaseShapesFilled();
      BarPainter barPainter0 = BarRenderer.getDefaultBarPainter();
      int int0 = statisticalLineAndShapeRenderer0.getRowCount();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean2 = scatterRenderer0.getUseSeriesOffset();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getBaseItemLabelGenerator();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(statisticalLineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT, statisticalLineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT, statisticalLineAndShapeRenderer0.DEFAULT_PAINT, statisticalLineAndShapeRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      Paint paint0 = waterfallBarRenderer0.getFirstBarPaint();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setAutoPopulateSeriesFillPaint(false);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      GradientBarPainter gradientBarPainter0 = new GradientBarPainter();
      ganttRenderer0.setBarPainter(gradientBarPainter0);
      ganttRenderer0.setIncludeBaseInRange(true);
      Paint paint0 = ganttRenderer0.getLegendTextPaint(1534);
      boolean boolean0 = ganttRenderer0.equals(levelRenderer0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Paint paint1 = scatterRenderer0.getLegendTextPaint(1534);
      boolean boolean1 = scatterRenderer0.getBaseShapesFilled();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.notifyListeners((RendererChangeEvent) null);
      boxAndWhiskerRenderer0.setMeanVisible(false);
      boxAndWhiskerRenderer0.setMeanVisible(true);
      LegendItemCollection legendItemCollection0 = boxAndWhiskerRenderer0.getLegendItems();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("", dateFormat0);
      scatterRenderer0.setSeriesToolTipGenerator(64, (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Paint paint0 = defaultCategoryItemRenderer0.lookupSeriesOutlinePaint((-128));
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("uOm^q+kGqX2S<");
      defaultCategoryItemRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = defaultCategoryItemRenderer0.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      defaultCategoryItemRenderer0.setSeriesLinesVisible(0, false);
      boolean boolean0 = defaultCategoryItemRenderer0.equals((Object) null);
      boolean boolean1 = defaultCategoryItemRenderer0.getBaseShapesFilled();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.setLegendShape((-128), groupedStackedBarRenderer0.DEFAULT_SHAPE);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      stackedBarRenderer3D0.setIgnoreZeroValues(false);
      stackedBarRenderer3D0.setRenderAsPercentages(false);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        layeredBarRenderer0.initialise((Graphics2D) null, rectangle2D_Double0, (CategoryPlot) null, defaultIntervalCategoryDataset0, plotRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean0 = lineRenderer3D0.equals((Object) null);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(3644.8619017, (double) minMaxCategoryRenderer0.ZERO);
      Stroke stroke0 = stackedBarRenderer3D0.lookupSeriesStroke(0);
      boolean boolean1 = stackedBarRenderer3D0.equals(minMaxCategoryRenderer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      double double0 = lineRenderer3D0.getYOffset();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("=/e2QzZ W9", numberFormat0);
      lineRenderer3D0.setSeriesToolTipGenerator(1478, (CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      AreaRendererEndType areaRendererEndType0 = AreaRendererEndType.TAPER;
      stackedAreaRenderer0.setEndType(areaRendererEndType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Boolean boolean0 = lineRenderer3D0.getSeriesItemLabelsVisible(0);
      lineRenderer3D0.setSeriesShapesVisible(0, (Boolean) null);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setMaximumBarWidth(12.0);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("l:eY", 8.0, (double) lineRenderer3D0.ZERO);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("ItemLabelAnchor.OUTSIDE12", (-3120.74698002), 1874.16720851, 300.12);
      xYPointerAnnotation0.setOutlinePaint(lineRenderer3D0.DEFAULT_PAINT);
      TextAnchor textAnchor0 = xYPointerAnnotation0.getTextAnchor();
      categoryTextAnnotation0.setRotationAnchor(textAnchor0);
      boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      boxAndWhiskerRenderer0.setMaximumBarWidth((-3120.74698002));
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-3120.74698002), (-2410.869828514801));
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      MultiListUI multiListUI0 = new MultiListUI();
      JList<BarRenderer3D> jList0 = new JList<BarRenderer3D>((Vector<? extends BarRenderer3D>) null);
      // Undeclared exception!
      try { 
        multiListUI0.indexToLocation(jList0, 10);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.removeAnnotations();
      Paint paint0 = statisticalLineAndShapeRenderer0.getErrorIndicatorPaint();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      String string0 = "";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      JScrollPane jScrollPane0 = null;
      try {
        jScrollPane0 = new JScrollPane(10, 1418);
      } catch(IllegalArgumentException e) {
         //
         // invalid verticalScrollBarPolicy
         //
         verifyException("javax.swing.JScrollPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      int int0 = (-2944);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setSeriesURLGenerator((-2944), (CategoryURLGenerator) null, false);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      int int0 = (-2585);
      Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, (-953.1374), 2.0);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      Object object0 = layeredBarRenderer0.clone();
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext(affineTransform0, object0, object0);
      } catch(IllegalArgumentException e) {
         //
         // AA hint:org.jfree.chart.renderer.category.LayeredBarRenderer@5f73a629
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(447.251172594, 0.0);
      double double0 = barRenderer3D0.getYOffset();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = groupedStackedBarRenderer0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      boolean boolean0 = statisticalLineAndShapeRenderer0.getItemShapeVisible((-79), 0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Paint paint0 = statisticalLineAndShapeRenderer0.lookupSeriesOutlinePaint(263);
      Paint paint1 = statisticalLineAndShapeRenderer0.lookupSeriesOutlinePaint(263);
      int int0 = 0;
      Stroke stroke0 = statisticalLineAndShapeRenderer0.lookupSeriesOutlineStroke(0);
      statisticalLineAndShapeRenderer0.setErrorIndicatorStroke(stroke0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Stroke stroke1 = minMaxCategoryRenderer0.getGroupStroke();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer0.getItemShapeFilled((-1), 0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean1 = boxAndWhiskerRenderer0.isMedianVisible();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      String string0 = "Null 'orientation' argument.";
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'orientation' argument.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      Button button0 = null;
      try {
        button0 = new Button();
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      int int0 = 48;
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      int int1 = 0;
      Object object0 = standardCategoryItemLabelGenerator0.clone();
      int int2 = 2040;
      // Undeclared exception!
      try { 
        standardCategoryItemLabelGenerator0.generateLabel(jDBCCategoryDataset0, 0, 2040);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-3507.6), (-1334.993));
      boolean boolean0 = barRenderer3D0.isDrawBarOutline();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      byte[][] byteArray0 = new byte[4][5];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte) (-111);
      byteArray1[2] = (byte)78;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)22;
      byteArray2[1] = (byte) (-83);
      byteArray2[2] = (byte)22;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)22;
      byteArray3[1] = (byte)22;
      byteArray3[2] = (byte) (-111);
      byteArray3[3] = (byte)111;
      byteArray3[4] = (byte)22;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)78;
      byteArray4[1] = (byte)22;
      byteArray4[2] = (byte)78;
      byteArray4[3] = (byte)78;
      byteArray4[4] = (byte) (-111);
      byteArray4[5] = (byte)22;
      byteArray4[6] = (byte)0;
      byteArray0[3] = byteArray4;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(0, byteArray0);
      String string0 = "Not implemented.";
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Not implemented.", spiderWebPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)111;
      floatArray0[2] = (float) (byte)78;
      floatArray0[3] = (float) (byte)111;
      floatArray0[4] = (float) (byte)78;
      floatArray0[5] = (float) (byte) (-111);
      floatArray0[6] = (float) 15;
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((byte) (-111), 721, 3);
      } catch(IllegalArgumentException e) {
         //
         // Width (-111) and height (721) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((double) groupedStackedBarRenderer0.ZERO);
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = DateFormat.getTimeInstance(2, locale0);
      StandardXYItemLabelGenerator standardXYItemLabelGenerator0 = new StandardXYItemLabelGenerator("qv;l-c>1A$", dateFormat0, dateFormat0);
      candlestickRenderer0.setSeriesItemLabelGenerator(11, (XYItemLabelGenerator) standardXYItemLabelGenerator0);
      ItemLabelPosition itemLabelPosition0 = candlestickRenderer0.getSeriesPositiveItemLabelPosition(93);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = groupedStackedBarRenderer0.createState(plotRenderingInfo0);
      groupedStackedBarRenderer0.setNegativeItemLabelPositionFallback(itemLabelPosition0);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = groupedStackedBarRenderer0.getLegendItemLabelGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", scatterRenderer0.ZERO, 4.0);
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      categoryTextAnnotation0.addChangeListener(windItemRenderer0);
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      scatterRenderer0.setDrawOutlines(false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = scatterRenderer0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Paint paint0 = ganttRenderer0.getCompletePaint();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[7];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) 0.2;
      numberArray1[2] = (Number) 2;
      numberArray1[3] = (Number) groupedStackedBarRenderer0.ZERO;
      numberArray1[4] = (Number) 0.2;
      numberArray1[5] = (Number) scatterRenderer0.ZERO;
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      numberArray1[6] = (Number) integer1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[7];
      numberArray3[0] = (Number) windItemRenderer0.ZERO;
      numberArray3[1] = (Number) candlestickRenderer0.ZERO;
      numberArray3[2] = (Number) 0.2;
      numberArray3[3] = (Number) statisticalLineAndShapeRenderer0.ZERO;
      numberArray3[4] = (Number) 0;
      numberArray3[5] = (Number) integer0;
      numberArray3[6] = (Number) groupedStackedBarRenderer0.ZERO;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }
}
