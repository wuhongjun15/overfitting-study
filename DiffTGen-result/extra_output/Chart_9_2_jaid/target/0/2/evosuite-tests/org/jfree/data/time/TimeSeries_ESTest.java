/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 14:01:42 GMT 2020
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.beans.PropertyChangeListener;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.JColorChooser;
import javax.swing.JLayeredPane;
import javax.swing.plaf.basic.BasicRootPaneUI;
import javax.swing.plaf.basic.BasicSplitPaneDivider;
import javax.swing.plaf.basic.BasicSplitPaneUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1764), (-1764), 352);
      TimeZone timeZone0 = null;
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.setMaximumItemAge(352);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(millisecond0);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXDate(352, (-2743));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Short short0 = new Short((short) (-1951));
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((int) (short) (-1951), (Number) short0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1435;
      MockDate mockDate0 = new MockDate((-255), Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 1435);
      Month month0 = new Month(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (-2.147483648E9));
      String string0 = "Sqhx/qz 76cE4I*{";
      Class<Minute> class0 = Minute.class;
      Class class1 = timeSeries0.getTimePeriodClass();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-51), "Sqhx/qz 76cE4I*{", 755, 755, Integer.MAX_VALUE, 150, (-676), 4004, 193, 1435, Integer.MAX_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 755
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-255), Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 1435);
      Month month0 = new Month(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (-2.147483648E9));
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      timeSeries0.removeAgedItems((long) 1435, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = 0L;
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries("", "TimeSeries.update(TimePeriod, Number):  period does not exist.", "the time period ", class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1306), (-1306));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1306
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week();
      Date date0 = week0.getStart();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      long long0 = week0.getMiddleMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(week0, class0);
      Number number0 = timeSeries0.getValue((RegularTimePeriod) week0);
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance(class0, date0, week0.DEFAULT_TIME_ZONE);
      Stack<Minute> stack0 = new Stack<Minute>();
      Minute minute0 = new Minute(date0);
      boolean boolean0 = stack0.add(minute0);
      timeSeries0.data = (List) stack0;
      BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI();
      Locale locale0 = Locale.JAPAN;
      Calendar calendar0 = MockCalendar.getInstance(regularTimePeriod0.DEFAULT_TIME_ZONE, locale0);
      long long1 = week0.getLastMillisecond(calendar0);
      JColorChooser jColorChooser0 = new JColorChooser();
      Dimension dimension0 = basicRootPaneUI0.getPreferredSize(jColorChooser0);
      timeSeries0.addPropertyChangeListener(basicRootPaneUI0);
      timeSeries0.setDomainDescription("dHUP}A~kD@Si9+");
      timeSeries0.setMaximumItemCount(1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Class<Second> class1 = Second.class;
      timeSeries0.timePeriodClass = class1;
      int int0 = timeSeries0.hashCode();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), 400, 121, 121, 400, (-1));
      long long0 = MockDate.UTC(400, (-2124), 104, 400, 121, 121);
      Quarter quarter0 = new Quarter(mockDate0);
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "", "", class0);
      String string0 = timeSeries0.getDomainDescription();
      int int0 = timeSeries0.getMaximumItemCount();
      boolean boolean0 = timeSeries0.equals("");
      long long1 = timeSeries0.getMaximumItemAge();
      String string1 = timeSeries0.getRangeDescription();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1438, (-21), (-1911), 1438, (-21), (-1911));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      Class<Integer> class0 = Integer.class;
      RegularTimePeriod regularTimePeriod1 = RegularTimePeriod.createInstance(class0, mockDate0, fixedMillisecond0.DEFAULT_TIME_ZONE);
      long long0 = MockDate.UTC(4, Integer.MAX_VALUE, 4, Integer.MAX_VALUE, 2202, (-21));
      Year year0 = new Year(2202);
      Date date0 = fixedMillisecond0.getStart();
      Class<Millisecond> class1 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", " for that time period. Duplicates are not ", class1);
      timeSeries0.fireSeriesChanged();
      Class<TimeSeries> class2 = TimeSeries.class;
      Class class3 = RegularTimePeriod.downsize(class2);
      TimeSeries timeSeries1 = new TimeSeries("", class1);
      Date date1 = fixedMillisecond0.getTime();
      timeSeries1.setDescription("DefaultIntervalCategoryDataset.setValue: series outside valid range.");
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      List list0 = timeSeries0.getItems();
      timeSeries1.removeAgedItems((long) 4, false);
      Float float0 = new Float((-440.2475F));
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) year0, (Number) float0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-1373), 2202);
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      int int0 = timeSeries0.getIndex(fixedMillisecond0);
      int int1 = (-561);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-561));
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Column keyUv (", "Column keyUv (", class0);
      int int0 = timeSeries0.getIndex(regularTimePeriod0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, 0.0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      RegularTimePeriod regularTimePeriod0 = millisecond0.previous();
      Class<TimeZone> class0 = TimeZone.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, class0);
      long long0 = 0L;
      timeSeries0.setMaximumItemAge(0L);
      Date date0 = millisecond0.getStart();
      // Undeclared exception!
      try { 
        timeSeries0.add(regularTimePeriod0, (Number) 0, true);
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of java.util.TimeZone.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(date0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(4333L, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Millisecond> class0 = Millisecond.class;
      Date date0 = minute0.getStart();
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      timeSeries0.removeAgedItems((-1479L), false);
      Object object0 = timeSeries0.clone();
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-1479L));
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      Class<Second> class1 = Second.class;
      timeSeries0.timePeriodClass = class1;
      Date date0 = fixedMillisecond0.getEnd();
      long long0 = (-2252L);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-2252L));
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0, false);
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 3359;
      MockDate mockDate0 = new MockDate(0, 0, 3359, 0, (-3808));
      Second second0 = new Second(mockDate0);
      RegularTimePeriod regularTimePeriod0 = second0.next();
      long long0 = regularTimePeriod0.getMiddleMillisecond();
      Class<Date> class0 = Date.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      Calendar calendar0 = MockCalendar.getInstance();
      long long1 = regularTimePeriod0.getFirstMillisecond(calendar0);
      Class<Hour> class2 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, class2);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) second0, (Number) 59);
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(quarter0, class0);
      String string0 = timeSeries0.getDomainDescription();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer1 = Integer.getInteger("", integer0);
      String string0 = "org.jfree.data.xy.XIntervalSeries";
      Class<String> class0 = String.class;
      Integer integer2 = Integer.getInteger("org.jfree.data.xy.XIntervalSeries", (Integer) null);
      TimeSeries timeSeries0 = new TimeSeries(integer1, "org.jfree.data.xy.XIntervalSeries", "", class0);
      int int0 = 243;
      int int1 = (-674);
      Week week0 = new Week(243, (-674));
      int int2 = Integer.remainderUnsigned(53, (-2922));
      int int3 = 0;
      int int4 = (-1106);
      int int5 = (-984);
      int int6 = 30;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Week week0 = new Week(date0);
      String string0 = "zg01";
      String string1 = "^{9 `WYnd_#Em_=0z?7";
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, "zg01", "^{9 `WYnd_#Em_=0z?7", class0);
      int int0 = (-2457);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-2457));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = 0L;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      String string0 = "Invalid day-of-the-week code.";
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "Invalid day-of-the-week code.", "Invalid day-of-the-week code.", class0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      int int0 = 846;
      timeSeries0.fireSeriesChanged();
      Locale locale0 = Locale.FRANCE;
      Calendar calendar0 = MockCalendar.getInstance(regularTimePeriod0.DEFAULT_TIME_ZONE, locale0);
      long long0 = year0.getMiddleMillisecond(calendar0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "#'WHWShg", 0, 0, 0, 0, 0, 0, 846, (-3558), 3);
      boolean boolean0 = timeSeries0.equals(simpleTimeZone0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(334);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 334, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1864, 2, 30, 1864, 726, 3187);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(121, 2245);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, 1.7976931348623157E308);
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      int int0 = timeSeries0.getIndex(fixedMillisecond0);
      int int1 = (-561);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-561));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, class0);
      timeSeries0.delete(regularTimePeriod0);
      int int0 = regularTimePeriod0.compareTo(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(year0, class0);
      double double0 = (-1687.7586467935917);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-1687.7586467935917));
      int int0 = 7;
      Integer integer0 = new Integer(7);
      Class<Date> class1 = Date.class;
      Class class2 = RegularTimePeriod.downsize(class1);
      Integer integer1 = Integer.getInteger("");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(7, 7);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Calendar calendar0 = MockCalendar.getInstance();
      long long0 = millisecond0.getLastMillisecond(calendar0);
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, class0);
      Date date0 = millisecond0.getStart();
      int int0 = timeSeries0.getItemCount();
      timeSeries0.clear();
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Week week0 = new Week((-337), (-337));
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Date date0 = minute0.getEnd();
      timeSeries0.removeAgedItems(false);
      // Undeclared exception!
      try { 
        timeSeries0.add(regularTimePeriod0, (double) 0, false);
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      String string0 = "8^.k%*g";
      Locale locale0 = Locale.ITALIAN;
      Set<Character> set0 = locale0.getExtensionKeys();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(quarter0.DEFAULT_TIME_ZONE, locale0);
      quarter0.peg(mockGregorianCalendar0);
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "8^.k%*g", "8^.k%*g", class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, 0.0);
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Second second0 = new Second();
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, class0);
      timeSeries0.setDomainDescription("org.jfree.data.time.Quarter");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "", "", class0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hour hour0 = new Hour();
      int int0 = hour0.getMonth();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) 23);
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Requires start on or before end.", "Requires start on or before end.", class0);
      timeSeries0.setRangeDescription("Requires start on or before end.");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, class0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hour hour0 = new Hour();
      Date date0 = hour0.getEnd();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      int int0 = timeSeries0.getItemCount();
      // Undeclared exception!
      try { 
        timeSeries0.update(3, (Number) 23);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Day day0 = new Day();
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
      Object object0 = timeSeries0.clone();
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(197);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 197, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      long long0 = timeSeries0.getMaximumItemAge();
      timeSeries0.setMaximumItemCount(552);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, 0.0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Millisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1438, (-21), (-1911), 1438, (-21), (-1911));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      Class<Integer> class0 = Integer.class;
      RegularTimePeriod regularTimePeriod1 = RegularTimePeriod.createInstance(class0, mockDate0, fixedMillisecond0.DEFAULT_TIME_ZONE);
      int int0 = 2202;
      long long0 = MockDate.UTC(4, Integer.MAX_VALUE, 4, Integer.MAX_VALUE, 2202, (-21));
      RegularTimePeriod regularTimePeriod2 = RegularTimePeriod.createInstance(class0, mockDate0, regularTimePeriod0.DEFAULT_TIME_ZONE);
      Date date0 = fixedMillisecond0.getStart();
      Class<Millisecond> class1 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", " for that time period. Duplicates are not ", class1);
      timeSeries0.fireSeriesChanged();
      Class<TimeSeries> class2 = TimeSeries.class;
      Class class3 = RegularTimePeriod.downsize(class2);
      TimeSeries timeSeries1 = new TimeSeries("", class1);
      Date date1 = fixedMillisecond0.getTime();
      timeSeries1.setDescription("DefaultIntervalCategoryDataset.setValue: series outside valid range.");
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      List list0 = timeSeries0.getItems();
      timeSeries1.removeAgedItems((long) 4, false);
      Float float0 = new Float((-440.2475F));
      // Undeclared exception!
      try { 
        timeSeries1.addOrUpdate((RegularTimePeriod) null, (Number) float0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Minute minute0 = new Minute();
      String string0 = minute0.toString();
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
      Hour hour0 = minute0.getHour();
      timeSeries0.setNotify(true);
      List list0 = timeSeries0.getItems();
      int int0 = timeSeries0.getMaximumItemCount();
      String string1 = minute0.toString();
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      int int0 = (-799);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-799), 1, (-18), 1);
      mockGregorianCalendar0.set((-799), 0, (-4), 2746, (-1), 1);
      quarter0.peg(mockGregorianCalendar0);
      Date date0 = regularTimePeriod0.getEnd();
      String string0 = timeSeries0.getRangeDescription();
      BasicSplitPaneUI basicSplitPaneUI0 = new BasicSplitPaneUI();
      BasicSplitPaneDivider basicSplitPaneDivider0 = basicSplitPaneUI0.getDivider();
      timeSeries0.addPropertyChangeListener((PropertyChangeListener) null);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-2715), 1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2715
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Month month0 = new Month();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(month0, "org.jfree.data.time.TimePeriodFormatException", "org.jfree.data.time.TimePeriodFormatException", class0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
      Object object0 = timeSeries0.clone();
      boolean boolean0 = timeSeries0.equals(object0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      long long0 = month0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1, 1);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getX((-1738), Integer.MAX_VALUE);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      int int0 = (-1306);
      MockDate mockDate1 = new MockDate(3, 3, (-1306), 3, (-1307), (-1307));
      boolean boolean0 = mockDate0.before(mockDate1);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.0, 1.0, 1.0, 1.0, 0.5);
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, "!k5}awj\"", "w<!&O>4t_H", class0);
      int int1 = Integer.MAX_VALUE;
      TimeSeries timeSeries1 = timeSeries0.createCopy(Integer.MAX_VALUE, Integer.MAX_VALUE);
      TimeSeriesDataItem timeSeriesDataItem0 = null;
      boolean boolean1 = true;
      Hour hour0 = null;
      try {
        hour0 = new Hour(mockDate0, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Hour", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, class0);
      int int0 = timeSeries0.hashCode();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1435;
      MockDate mockDate0 = new MockDate((-255), Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 1435);
      Month month0 = new Month(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (-2.147483648E9));
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries1 = null;
      try {
        timeSeries1 = new TimeSeries((Comparable) null, "Sqhx/qz 76cE4I*{", "Sqhx/qz 76cE4I*{", class0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2319, 2319, 2319, 2319, 2319, 2319);
      Week week0 = new Week(mockDate0);
      Date[] dateArray0 = new Date[0];
      Year year0 = new Year();
      Month month0 = new Month(1, year0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeries timeSeries1 = new TimeSeries(mockDate0);
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(week0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Year year1 = week0.getYear();
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXDate(0, 1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-1);
      MockDate mockDate0 = new MockDate((-1), (-1), 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      Float float0 = new Float((double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) float0);
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-2433);
      MockDate mockDate0 = new MockDate(2956, 2956, 2956, (-2433), 1503);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, class0);
      boolean boolean0 = timeSeries0.equals(hour0);
      Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
      RegularTimePeriod regularTimePeriod1 = hour0.previous();
      Date date0 = regularTimePeriod1.getStart();
      Date date1 = regularTimePeriod0.getEnd();
      long long0 = regularTimePeriod0.getSerialIndex();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(regularTimePeriod0.DEFAULT_TIME_ZONE);
      long long1 = regularTimePeriod1.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      Class<String> class1 = String.class;
      long long2 = regularTimePeriod1.getMiddleMillisecond();
      Class class2 = RegularTimePeriod.downsize(class1);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(regularTimePeriod1);
      long long3 = timeSeries0.getMaximumItemAge();
      // Undeclared exception!
      try { 
        timeSeries0.add(regularTimePeriod1, (double) 9223372036854775807L);
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of java.util.SimpleTimeZone.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0, true);
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }
}
