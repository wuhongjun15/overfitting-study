/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 08:11:26 GMT 2020
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.TextArea;
import java.awt.event.ItemListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.beans.VetoableChangeListener;
import java.sql.Connection;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.EventListener;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TreeSet;
import java.util.Vector;
import javax.accessibility.AccessibleContext;
import javax.swing.Icon;
import javax.swing.JEditorPane;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JTree;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.AreaRendererEndType;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GradientBarPainter;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Paint paint0 = scatterRenderer0.lookupSeriesFillPaint(3);
      scatterRenderer0.setAutoPopulateSeriesStroke(true);
      scatterRenderer0.clearSeriesStrokes(true);
      scatterRenderer0.setBaseShapesFilled(false);
      double double0 = scatterRenderer0.getItemMargin();
      boolean boolean0 = scatterRenderer0.getUseFillPaint();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      boolean boolean1 = stackedAreaRenderer0.equals(scatterRenderer0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      LayeredBarRenderer layeredBarRenderer1 = new LayeredBarRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        layeredBarRenderer1.getDomainAxis((CategoryPlot) null, defaultBoxAndWhiskerCategoryDataset0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      Paint paint0 = stackedAreaRenderer0.lookupSeriesFillPaint((-94));
      CategoryDataset categoryDataset0 = null;
      Range range0 = stackedAreaRenderer0.findRangeBounds((CategoryDataset) null, false);
      double double0 = 0.0;
      double double1 = (-3627.889230863273);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      stackedBarRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds(taskSeriesCollection0);
      boolean boolean0 = ganttRenderer0.equals(statisticalLineAndShapeRenderer0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0, true);
      TreeSet<LevelRenderer> treeSet0 = new TreeSet<LevelRenderer>();
      TreeSet<LevelRenderer> treeSet1 = new TreeSet<LevelRenderer>((Collection<? extends LevelRenderer>) treeSet0);
      ArrayList<LevelRenderer> arrayList0 = new ArrayList<LevelRenderer>(treeSet1);
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", compassPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2255, 1, 1, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-2282.9797F), 93.94991F, 10, 1.0F);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        levelRenderer0.initialise(graphics2D0, rectangle2D0, combinedDomainCategoryPlot0, taskSeriesCollection0, plotRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.getUseFillPaint();
      int int0 = (-3765);
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedBarRenderer3D0.getToolTipGenerator((-3765), (-3765), false);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesToolTipGenerator((-3765), (CategoryToolTipGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      double double0 = levelRenderer0.getItemMargin();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "The 'row' argument is out of bounds.";
      stringArray0[2] = "9VtcPuDbSuAN<=y";
      stringArray0[3] = "";
      String string0 = "Null 'plot' argument.";
      stringArray0[4] = "Null 'plot' argument.";
      stringArray0[5] = "";
      stringArray0[6] = "GgrlqTOY$ZY";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        levelRenderer0.getDomainAxis(combinedRangeCategoryPlot0, defaultIntervalCategoryDataset0);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      ValueAxis valueAxis0 = lineAndShapeRenderer0.getRangeAxis(combinedRangeCategoryPlot0, (-804));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1134.342064480727, 451.0256532728);
      stackedBarRenderer3D0.removeAnnotations();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals(stackedBarRenderer3D0);
      Range range0 = stackedBarRenderer3D0.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean1 = scatterRenderer0.getBaseShapesFilled();
      Object object0 = stackedBarRenderer3D0.clone();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel((JFreeChart) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      double double0 = barRenderer0.getItemMargin();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      int int0 = 1;
      String string0 = "";
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", numberFormat0, numberFormat0);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      boolean boolean0 = standardCategoryItemLabelGenerator0.equals((Object) null);
      boolean boolean1 = vector0.add((Locale.LanguageRange) null);
      String string1 = Locale.lookupTag(vector0, set0);
      barRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      numberFormat0.setGroupingUsed(false);
      String[] stringArray0 = Locale.getISOLanguages();
      NumberFormat numberFormat1 = NumberFormat.getIntegerInstance(locale0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setSeriesItemLabelGenerator((-2231), (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(";(.mNV");
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, dateAxis0, levelRenderer0);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(dateAxis0);
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      MultiListUI multiListUI0 = new MultiListUI();
      Vector<IntervalBarRenderer> vector0 = new Vector<IntervalBarRenderer>();
      JList<IntervalBarRenderer> jList0 = new JList<IntervalBarRenderer>(vector0);
      // Undeclared exception!
      try { 
        multiListUI0.getCellBounds(jList0, (-1), 768);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getSeriesToolTipGenerator((-6));
      Paint paint0 = stackedAreaRenderer0.lookupLegendTextPaint((-6));
      Shape shape0 = stackedAreaRenderer0.lookupSeriesShape(243);
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, false);
      Object object0 = stackedAreaRenderer0.clone();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      TextArea textArea0 = null;
      try {
        textArea0 = new TextArea("", (-6), (-1935), 2958428);
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryURLGenerator categoryURLGenerator0 = defaultCategoryItemRenderer0.getSeriesURLGenerator(928);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = (-1857.81066);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-1857.81066), (-1857.81066), true);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(stackedBarRenderer3D0);
      stackedBarRenderer3D0.notifyListeners(rendererChangeEvent0);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      stackedBarRenderer3D0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      stackedBarRenderer3D0.setDataBoundsIncludesVisibleSeriesOnly(true);
      boolean boolean0 = stackedBarRenderer3D0.isDrawBarOutline();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      int int0 = 82;
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      stackedAreaRenderer0.setSeriesURLGenerator(82, (CategoryURLGenerator) standardCategoryURLGenerator0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.setEndType((AreaRendererEndType) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'type' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      JTree jTree0 = new JTree();
      Rectangle rectangle0 = jTree0.getRowBounds(0);
      Rectangle2D rectangle2D0 = rectangle0.getFrame();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 3073, 0);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.addEntity(standardEntityCollection0, rectangle2D0, slidingCategoryDataset0, 0, 1, false, 3073, 1192.219414);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      double double0 = levelRenderer0.getItemMargin();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Graphics2D graphics2D0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JInternalFrame jInternalFrame0 = new JInternalFrame("W", false, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, defaultKeyedValues2DDataset0, plotRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("aC==", 0.2, 4.0, (-1.0));
      Layer layer0 = Layer.FOREGROUND;
      levelRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      boolean boolean0 = statisticalBarRenderer0.equals(levelRenderer0);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Boolean boolean1 = candlestickRenderer0.getSeriesItemLabelsVisible(938);
      lineAndShapeRenderer0.setSeriesShapesFilled(2319, (Boolean) null);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      stackedBarRenderer3D0.setRenderAsPercentages(true);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1, (-2315));
      } catch(IllegalArgumentException e) {
         //
         // Width (1) and height (-2315) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState1 = statisticalBarRenderer0.createState(plotRenderingInfo1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      LinkedList<CategoryTextAnnotation> linkedList0 = new LinkedList<CategoryTextAnnotation>();
      customCategoryURLGenerator0.addURLSeries(linkedList0);
      // Undeclared exception!
      try { 
        levelRenderer0.setSeriesURLGenerator((-2240), (CategoryURLGenerator) customCategoryURLGenerator0);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = groupedStackedBarRenderer0.getLegendItemLabelGenerator();
      groupedStackedBarRenderer0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      LinkedList<ValueMarker> linkedList0 = new LinkedList<ValueMarker>();
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(274, (-1356), (float[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = null;
      waterfallBarRenderer0.setSeriesURLGenerator(38, (CategoryURLGenerator) null, false);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      int int0 = 194;
      Object object0 = mockSimpleDateFormat0.clone();
      MockDate mockDate0 = new MockDate(60, 60, 194);
      ParsePosition parsePosition0 = new ParsePosition(194);
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      mockSimpleDateFormat0.set2DigitYearStart(mockDate0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("2Hq5@", mockSimpleDateFormat0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      int int1 = jDBCCategoryDataset0.getRowIndex(mockDate0);
      // Undeclared exception!
      try { 
        intervalCategoryItemLabelGenerator0.generateLabel(jDBCCategoryDataset0, 0, (-712));
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      Paint paint0 = lineAndShapeRenderer0.getLegendTextPaint(4);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      BarRenderer.setDefaultShadowsVisible(true);
      defaultPolarItemRenderer0.setAutoPopulateSeriesOutlineStroke(true);
      Boolean boolean0 = defaultPolarItemRenderer0.getSeriesVisibleInLegend(4);
      lineAndShapeRenderer0.setSeriesShapesFilled(4, (Boolean) null);
      stackedBarRenderer3D0.setMinimumBarLength(0.0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean1 = boxAndWhiskerRenderer0.isMedianVisible();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ItemLabelPosition itemLabelPosition0 = stackedBarRenderer3D0.getPositiveItemLabelPositionFallback();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("Not implemented.", "Requires alpha in the range 0 to 255.", "J");
      boxAndWhiskerRenderer0.setSeriesURLGenerator(4, (CategoryURLGenerator) standardCategoryURLGenerator0, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = false;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedBarRenderer0.getBaseToolTipGenerator();
      stackedBarRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null, false);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setMedianVisible(false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Paint paint0 = statisticalBarRenderer0.getErrorIndicatorPaint();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setUseOutlinePaint(false);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) 8.0;
      numberArray1[1] = (Number) 3.0;
      numberArray1[2] = (Number) lineRenderer3D0.ZERO;
      numberArray1[3] = (Number) 0.2;
      numberArray1[4] = (Number) 3.0;
      numberArray1[5] = (Number) 12.0;
      numberArray1[6] = (Number) 3.0;
      numberArray1[7] = (Number) 0.2;
      numberArray1[8] = (Number) 0.2;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      numberArray2[0] = (Number) statisticalBarRenderer0.ZERO;
      numberArray2[1] = (Number) 8.0;
      numberArray2[2] = (Number) 3.0;
      numberArray2[3] = (Number) 8.0;
      numberArray2[4] = (Number) stackedBarRenderer0.ZERO;
      numberArray2[5] = (Number) 0.2;
      numberArray2[6] = (Number) 8.0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 15, 0, 0, 3, 3, true, true, true, true, true, true, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      int int0 = (-609);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesURLGenerator((-609), (CategoryURLGenerator) null, false);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      layeredBarRenderer0.setShadowXOffset(2.0);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("AZa_{x.a=5#LK/", 0.2, 0.2);
      categoryTextAnnotation0.setCategory(3.0);
      // Undeclared exception!
      try { 
        layeredBarRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, (Layer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        intervalBarRenderer0.setSeriesURLGenerator((-4600), (CategoryURLGenerator) null, false);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.setDefaultEntityRadius(0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      groupedStackedBarRenderer0.setSeriesToGroupMap(keyToGroupMap0);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      boolean boolean0 = minMaxCategoryRenderer0.isDrawLines();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Paint paint0 = ganttRenderer0.getCompletePaint();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean1 = scatterRenderer0.getUseFillPaint();
      int int0 = minMaxCategoryRenderer0.getColumnCount();
      boolean boolean2 = groupedStackedBarRenderer0.equals(scatterRenderer0);
      double double0 = groupedStackedBarRenderer0.getMaximumBarWidth();
      ItemLabelPosition itemLabelPosition0 = statisticalBarRenderer0.getPositiveItemLabelPositionFallback();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 204);
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 204
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      categoryStepRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Range range0 = statisticalBarRenderer0.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("Null 'widthType' argument.", (String) null, "Null 'widthType' argument.", "Null 'widthType' argument.");
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = categoryStepRenderer0.getLegendItemToolTipGenerator();
      int int0 = (-1657);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        scatterRenderer0.setSeriesShapesFilled((-1657), true);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      int int0 = 900;
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = intervalBarRenderer0.getItemLabelGenerator(900, 900, true);
      intervalBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Wa;D*", 3.0, 0.2, 0.2);
      boolean boolean0 = intervalBarRenderer0.removeAnnotation(categoryPointerAnnotation0);
      CategoryURLGenerator categoryURLGenerator0 = intervalBarRenderer0.getBaseURLGenerator();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      BlockContainer blockContainer0 = new BlockContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      int int1 = 3;
      int int2 = 0;
      int int3 = 881;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-245), 881, (byte[]) null, (byte[]) null, (byte[]) null, 881);
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LegendItemCollection legendItemCollection0 = levelRenderer0.getLegendItems();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setDataBoundsIncludesVisibleSeriesOnly(true);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemToolTipGenerator();
      levelRenderer0.setLegendItemToolTipGenerator((CategorySeriesLabelGenerator) null);
      int int0 = levelRenderer0.getPassCount();
      levelRenderer0.setItemMargin(1);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      boolean boolean0 = waterfallBarRenderer0.equals((Object) null);
      LegendItem legendItem0 = statisticalBarRenderer0.getLegendItem(1, 1);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.2;
      doubleArray1[1] = (double) statisticalBarRenderer0.ZERO;
      doubleArray1[2] = 0.2;
      doubleArray1[3] = (double) levelRenderer0.ZERO;
      doubleArray1[4] = 3.0;
      doubleArray1[5] = 3.0;
      doubleArray1[6] = 2640.826265860464;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) waterfallBarRenderer0.ZERO;
      doubleArray2[1] = (double) statisticalBarRenderer0.ZERO;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) levelRenderer0.ZERO;
      doubleArray3[1] = (double) lineRenderer3D0.ZERO;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = 3.0;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, true);
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setBaseLinesVisible(true);
      Object object0 = statisticalLineAndShapeRenderer0.clone();
      stackedAreaRenderer0.removeAnnotations();
      statisticalLineAndShapeRenderer0.setDrawOutlines(true);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryURLGenerator categoryURLGenerator0 = levelRenderer0.getURLGenerator(244, 244, true);
      levelRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-95.15011));
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      levelRenderer0.setPlot(combinedRangeCategoryPlot0);
      levelRenderer0.setItemMargin(2353.6535);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(ganttRenderer0);
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel((JFreeChart) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setAutoPopulateSeriesShape(false);
      Boolean boolean0 = Boolean.TRUE;
      lineAndShapeRenderer0.setSeriesShapesVisible(593, boolean0);
      LegendItemCollection legendItemCollection0 = lineAndShapeRenderer0.getLegendItems();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemToolTipGenerator();
      lineAndShapeRenderer0.setLegendItemToolTipGenerator((CategorySeriesLabelGenerator) null);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 593, 593, 10, (-5), 593, 10, false, false, false, false, true, false, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      ItemListener itemListener0 = AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      boolean boolean0 = stackedBarRenderer3D0.hasListener((EventListener) null);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      boolean boolean1 = stackedBarRenderer3D0.equals(ganttRenderer0);
      int int0 = stackedBarRenderer3D0.getPassCount();
      stackedBarRenderer3D0.setDrawBarOutline(false);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      Range range0 = defaultXYItemRenderer0.findRangeBounds((XYDataset) null);
      Boolean boolean2 = defaultXYItemRenderer0.getSeriesShapesFilled((-2884));
      scatterRenderer0.setSeriesShapesFilled(1, (Boolean) null);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.jfree.chart.renderer.category.WaterfallBarRenderer";
      stringArray0[1] = "lOQ>u&flIN";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("org.jfree.chart.renderer.category.WaterfallBarRenderer");
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      String string0 = "L";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1, "", (-2299), 88, 0, 0, (-2884), 88, 85, (-2299), 2556);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2299
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      LegendItemCollection legendItemCollection0 = scatterRenderer0.getLegendItems();
      CategoryToolTipGenerator categoryToolTipGenerator0 = scatterRenderer0.getToolTipGenerator(0, 18, false);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.setMaximumBarWidth((-2113.8397716088));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = boxAndWhiskerRenderer0.getBaseItemLabelGenerator();
      boxAndWhiskerRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Stroke stroke0 = minMaxCategoryRenderer0.getGroupStroke();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      float[][] floatArray0 = new float[0][4];
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, dateAxis0, numberAxis3D0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      double double0 = ganttRenderer0.getEndPercent();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = minMaxCategoryRenderer0.hashCode();
      minMaxCategoryRenderer0.setGroupPaint(ganttRenderer0.DEFAULT_PAINT);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      boolean boolean0 = categoryStepRenderer0.equals(minMaxCategoryRenderer0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      boolean boolean1 = defaultCategoryItemRenderer0.getUseSeriesOffset();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setMaximumBarWidth(0);
      LegendItem legendItem0 = statisticalBarRenderer0.getLegendItem(0, 0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Paint paint0 = minMaxCategoryRenderer0.lookupSeriesPaint(20);
      minMaxCategoryRenderer0.setGroupPaint(statisticalBarRenderer0.DEFAULT_OUTLINE_PAINT);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      int int0 = 0;
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getSeriesItemLabelGenerator(0);
      statisticalBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, false);
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getBaseToolTipGenerator();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setSeriesToolTipGenerator((-1876), (CategoryToolTipGenerator) null, false);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = true;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      AreaRendererEndType areaRendererEndType0 = AreaRendererEndType.TAPER;
      stackedAreaRenderer0.setEndType(areaRendererEndType0);
      int int0 = 0;
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = stackedAreaRenderer0.getSeriesItemLabelGenerator(0);
      int int1 = (-1373);
      Color color0 = null;
      try {
        color0 = new Color((-1373), 0, 0);
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      GradientBarPainter gradientBarPainter0 = new GradientBarPainter();
      BarRenderer.setDefaultBarPainter(gradientBarPainter0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = new StatisticalLineAndShapeRenderer();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(statisticalLineAndShapeRenderer1, false);
      statisticalBarRenderer0.notifyListeners(rendererChangeEvent0);
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getToolTipGenerator((-219), 1317, false);
      statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null);
      Paint paint0 = statisticalLineAndShapeRenderer0.lookupLegendTextPaint((-219));
      Object object0 = statisticalLineAndShapeRenderer0.clone();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(color0, color0, color0, color0);
      Line2D.Double line2D_Double0 = new Line2D.Double((-1389.3505014803), 0.0, 3.0, 2120.193731);
      int int0 = 3;
      Paint paint0 = waterfallBarRenderer0.lookupLegendTextPaint(3);
      waterfallBarRenderer0.setLegendShape(0, line2D_Double0);
      waterfallBarRenderer0.setFirstBarPaint(color0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setDrawOutlines(false);
      Paint paint1 = waterfallBarRenderer0.getPositiveBarPaint();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-4883.185064472378), 3);
      int int1 = 2929;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getBaseItemLabelGenerator();
      stackedBarRenderer3D0.setSeriesItemLabelGenerator(2929, (CategoryItemLabelGenerator) null, false);
      boolean boolean0 = stackedBarRenderer3D0.getIgnoreZeroValues();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setMaximumBarWidth(0.0);
      waterfallBarRenderer0.setShadowPaint(stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_PAINT);
      Boolean boolean1 = lineRenderer3D0.getSeriesShapesFilled(0);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", 2120.193731, 3048.0, (-2065.37023256775));
      stackedBarRenderer3D0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      double double0 = 0.0;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("6^+];", fastScatterPlot0);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = false;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      int int0 = 0;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getBaseItemLabelGenerator();
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      Object object0 = statisticalBarRenderer0.clone();
      Object object1 = standardGradientPaintTransformer0.clone();
      statisticalBarRenderer0.setGradientPaintTransformer(standardGradientPaintTransformer0);
      stackedAreaRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null, false);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setGroupPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.MinMaxCategoryRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1689.3, 1689.3, false);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer3D0.getURLGenerator(3, 3, true);
      minMaxCategoryRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, true);
      boolean boolean0 = boxAndWhiskerRenderer0.isMeanVisible();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      int int0 = groupedStackedBarRenderer0.getPassCount();
      CategoryURLGenerator categoryURLGenerator1 = minMaxCategoryRenderer0.getBaseURLGenerator();
      groupedStackedBarRenderer0.setAutoPopulateSeriesPaint(true);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Boolean boolean1 = defaultCategoryItemRenderer0.getSeriesLinesVisible(3);
      boolean boolean2 = Boolean.logicalOr(false, false);
      lineAndShapeRenderer0.setSeriesLinesVisible(3, (Boolean) null);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      groupedStackedBarRenderer0.setSeriesItemLabelGenerator(3, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Color color0 = Color.white;
      statisticalBarRenderer0.setErrorIndicatorPaint(color0);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemURLGenerator();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(statisticalBarRenderer0.DEFAULT_PAINT, statisticalBarRenderer0.DEFAULT_OUTLINE_PAINT, color0, statisticalBarRenderer0.DEFAULT_OUTLINE_PAINT);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      boolean boolean0 = waterfallBarRenderer0.equals(defaultKeyedValues2DDataset0);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator1 = statisticalBarRenderer0.getLegendItemURLGenerator();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = waterfallBarRenderer0.getToolTipGenerator((-3281), (-4), false);
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null);
      boolean boolean1 = stackedAreaRenderer0.getRenderAsPercentages();
      Day day0 = Day.parseDay("ab");
      Color color1 = (Color)PiePlot.DEFAULT_LABEL_PAINT;
      CategoryLineAnnotation categoryLineAnnotation0 = null;
      try {
        categoryLineAnnotation0 = new CategoryLineAnnotation(stackedAreaRenderer0.ZERO, (-4), (Comparable) null, (double) stackedAreaRenderer0.ZERO, color1, stackedAreaRenderer0.DEFAULT_STROKE);
      } catch(IllegalArgumentException e) {
         //
         // Null 'category2' argument.
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-1498.18), 763.6);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemURLGenerator();
      // Undeclared exception!
      try { 
        barRenderer3D0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(boxAndWhiskerRenderer0.ZERO, (double) boxAndWhiskerRenderer0.ZERO, boxAndWhiskerRenderer0.ZERO, (double) boxAndWhiskerRenderer0.ZERO, boxAndWhiskerRenderer0.DEFAULT_OUTLINE_PAINT, boxAndWhiskerRenderer0.DEFAULT_OUTLINE_STROKE);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("qmh$&R}'`FpPtR;Wy?");
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Range range0 = xYSeriesCollection0.getDomainBounds(true);
      ModuloAxis moduloAxis0 = new ModuloAxis("Base tool tip generator not cloneable.", (Range) null);
      categoryLineAnnotation0.setValue1(2403.8967518293243);
      boolean boolean0 = boxAndWhiskerRenderer0.removeAnnotation(categoryLineAnnotation0);
      double double0 = boxAndWhiskerRenderer0.getMaximumBarWidth();
      double double1 = boxAndWhiskerRenderer0.getMaximumBarWidth();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("Roger Studner");
      boxAndWhiskerRenderer0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Range range0 = intervalBarRenderer0.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getItemLabelGenerator(246, 0, false);
      barRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null);
      // Undeclared exception!
      try { 
        barRenderer3D0.addEntity(standardEntityCollection0, rectangle2D_Double0, defaultBoxAndWhiskerCategoryDataset0, 127, 127, false, 0.0, 0.0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CategoryToolTipGenerator categoryToolTipGenerator0 = spiderWebPlot0.getToolTipGenerator();
      areaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, false);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      LegendItem legendItem0 = boxAndWhiskerRenderer0.getLegendItem(41, 41);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setBaseShapesVisible(false);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 10;
      doubleArray1[1] = 0.01;
      doubleArray1[2] = 90.0;
      doubleArray1[3] = 2292.673163411;
      doubleArray1[4] = 12.0;
      doubleArray1[5] = (double) areaRenderer0.ZERO;
      doubleArray1[6] = (double) areaRenderer0.ZERO;
      doubleArray1[7] = (double) 10;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 2292.673163411;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 1.0F;
      doubleArray3[2] = 90.0;
      doubleArray3[3] = 0.25;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryPlot categoryPlot0 = groupedStackedBarRenderer0.getPlot();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      boolean boolean0 = standardCategoryURLGenerator0.equals("");
      groupedStackedBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, false);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "\"T=&<RU;_";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      String string0 = "Null 'paint' argument.";
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'paint' argument.", levelRenderer0.DEFAULT_VALUE_LABEL_FONT, meterPlot0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.MeterPlot cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      JEditorPane jEditorPane0 = new JEditorPane();
      float float0 = jEditorPane0.getAlignmentX();
      AccessibleContext accessibleContext0 = jEditorPane0.getAccessibleContext();
      VetoableChangeListener[] vetoableChangeListenerArray0 = jEditorPane0.getVetoableChangeListeners();
      Color color0 = jEditorPane0.getSelectionColor();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        color0.getComponents(floatArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Object object0 = lineRenderer3D0.clone();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.calculateSeriesWidth(77.954, (CategoryAxis) null, 1, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.LevelRenderer", e);
      }
  }
}
