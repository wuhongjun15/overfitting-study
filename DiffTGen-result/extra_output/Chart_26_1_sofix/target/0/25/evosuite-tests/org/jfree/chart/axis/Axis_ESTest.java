/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:20:52 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.SimpleTimeZone;
import javax.swing.JInternalFrame;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.time.Second;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      categoryAxis3D0.notifyListeners((AxisChangeEvent) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.axis.Axis");
      String string0 = logarithmicAxis0.getLabel();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      String string0 = numberAxis3D0.getLabel();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("org.jfree.data.UnknownKeyException");
      Object object0 = categoryAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.configure();
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(",QJ:ccU$=aEu");
      Paint paint0 = logarithmicAxis0.getAxisLinePaint();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Font font0 = categoryAxis3D0.getTickLabelFont();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SymbolAxis symbolAxis0 = new SymbolAxis("}$?kih,cVZ.Oij~!", stringArray0);
      Plot plot0 = symbolAxis0.getPlot();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Paint paint0 = dateAxis0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("qSvVh}.YfbG");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      logarithmicAxis0.addChangeListener(combinedRangeXYPlot0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Up&Ijgpmv&=XZR{\"yw");
      extendedCategoryAxis0.setAxisLineVisible(true);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      String string0 = numberAxis0.getLabel();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.25, 0.25);
      boolean boolean0 = cyclicNumberAxis0.isAxisLineVisible();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      cyclicNumberAxis0.setPlot(waferMapPlot0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.25, 0.25);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      BorderArrangement borderArrangement0 = new BorderArrangement();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null, borderArrangement0, borderArrangement0);
      cyclicNumberAxis0.setTickLabelInsets(legendTitle0.DEFAULT_PADDING);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Second second0 = new Second();
      PeriodAxis periodAxis0 = new PeriodAxis("", second0, second0, second0.DEFAULT_TIME_ZONE);
      DefaultEditorKit.InsertContentAction defaultEditorKit_InsertContentAction0 = new DefaultEditorKit.InsertContentAction();
      boolean boolean0 = periodAxis0.hasListener(defaultEditorKit_InsertContentAction0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.setTickMarkPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("DomainOrder.NONE");
      SystemColor systemColor0 = SystemColor.windowBorder;
      subCategoryAxis0.setTickMarkPaint(systemColor0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.chart.renderer.xy.YIntervalRenderer");
      PeriodAxis periodAxis0 = new PeriodAxis("Requires start on or before end.");
      periodAxis0.setTickMarkStroke(subCategoryAxis0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      // Undeclared exception!
      try { 
        numberAxis0.setTickMarkStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      numberAxis3D0.setTickMarkStroke(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      numberAxis3D0.setTickMarksVisible(true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      periodAxis0.setTickLabelInsets(logarithmicAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      dateAxis0.setTickLabelFont(areaRenderer0.DEFAULT_VALUE_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setTickLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1784.71757723312, 0.0, ")T");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2000, "Null 'stroke' argument.");
      DateAxis dateAxis0 = new DateAxis("Null 'stroke' argument.", simpleTimeZone0);
      dateAxis0.setTickLabelFont(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SymbolAxis symbolAxis0 = new SymbolAxis("}$?kih,cVZ.Oij~!", stringArray0);
      symbolAxis0.setTickLabelsVisible(false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      numberAxis3D0.setTickLabelsVisible(true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("3%");
      PeriodAxis periodAxis0 = new PeriodAxis("3%");
      periodAxis0.setAxisLineStroke(subCategoryAxis0.DEFAULT_TICK_MARK_STROKE);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setAxisLinePaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("3%");
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_PAINT;
      subCategoryAxis0.setAxisLinePaint(color0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("@zZFi2");
      periodAxis0.setLabelInsets(periodAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      // Undeclared exception!
      try { 
        periodAxis0.setLabelPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("r!46J<SIoJcO/*8.bk");
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Paint paint0 = defaultDrawingSupplier0.getNextPaint();
      extendedCategoryAxis0.setLabelPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.setLabelFont(numberAxis0.DEFAULT_TICK_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.setLabelFont(categoryAxis0.DEFAULT_AXIS_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(",QJ:ccU$=aEu");
      logarithmicAxis0.setLabel(",QJ:ccU$=aEu");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'paint' argument.");
      subCategoryAxis0.setLabel("?TZIrC Za");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      extendedCategoryAxis0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setTickMarkInsideLength(10.0F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("BL3m/WtwL/<X/RMDa", stringArray0);
      String string0 = symbolAxis0.getLabelToolTip();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.chart.renderer.xy.YIntervalRenderer");
      float float0 = subCategoryAxis0.getTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.removeChangeListener((AxisChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      String string0 = categoryAxis0.getLabelURL();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "");
      cyclicNumberAxis0.setLabelToolTip("ye<lwM{1|7 sp");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      cyclicNumberAxis0.setLabelAngle(3078.8);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Requires start on or before end.");
      periodAxis0.setTickMarkOutsideLength(346.04468F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("r)zyjV`pFV%a))Z0");
      double double0 = logarithmicAxis0.getFixedDimension();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5.0E-4, 0.0, "Roger Studner");
      ModuloAxis moduloAxis0 = new ModuloAxis("*%UwdGu", cyclicNumberAxis0.DEFAULT_RANGE);
      RectangleInsets rectangleInsets0 = moduloAxis0.getLabelInsets();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("!EA_~Y(9X(X/=x)P");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 500);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("!EA_~Y(9X(X/=x)P", dateAxis0.DEFAULT_AXIS_LABEL_FONT, meterPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2601, 18);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(15, (-429.24), 70.0, 70.0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.75);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.drawTickMarksAndLabels(graphics2D0, 270, rectangle2D_Double0, rectangle2D_Double0, (RectangleEdge) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.setLabelURL("a_:L");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("qSvVh}.YfbG");
      Stroke stroke0 = categoryAxis0.getTickMarkStroke();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setFixedDimension((-2394.6174));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Paint paint0 = categoryAxis3D0.getTickMarkPaint();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      RectangleInsets rectangleInsets0 = numberAxis3D0.getTickLabelInsets();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("3%");
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      // Undeclared exception!
      try { 
        periodAxis0.drawAxisLine((Graphics2D) null, (-1948.9), rectangle0, (RectangleEdge) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.25, 0.25);
      float float0 = cyclicNumberAxis0.getTickMarkInsideLength();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(51, 51, 0.05, 0.05, chartRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Font font0 = categoryAxis3D0.getLabelFont();
  }
}
