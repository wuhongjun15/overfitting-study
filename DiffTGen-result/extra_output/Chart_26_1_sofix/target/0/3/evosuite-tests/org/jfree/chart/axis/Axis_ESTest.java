/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:09:09 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.SimpleTimeZone;
import javax.swing.plaf.ColorUIResource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.title.LegendTitle;
import org.jfree.data.Range;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(500, 500, 2.0F);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      logarithmicAxis0.setPlot(waferMapPlot0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(numberAxis3D0);
      numberAxis3D0.notifyListeners(axisChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      extendedCategoryAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("ItemLabelAnchor.OUTSIDE11");
      Class<LogarithmicAxis> class0 = LogarithmicAxis.class;
      boolean boolean0 = periodAxis0.equals(class0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("K+V+y,FKL!%f[Dil)cL");
      Font font0 = periodAxis0.getTickLabelFont();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("l)bC.7n");
      Plot plot0 = logarithmicAxis0.getPlot();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      categoryAxis3D0.setAxisLineVisible(false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      // Undeclared exception!
      try { 
        moduloAxis0.setPlot(combinedDomainCategoryPlot0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Year year0 = new Year(9999);
      PeriodAxis periodAxis0 = new PeriodAxis("X]-[Z(", year0, year0, year0.DEFAULT_TIME_ZONE);
      PeriodAxis periodAxis1 = new PeriodAxis("X]-[Z(", year0, year0);
      boolean boolean0 = periodAxis0.equals(periodAxis1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'font' argument.");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-100, "Null 'font' argument.");
      boolean boolean0 = logarithmicAxis0.equals(cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.setTickMarkStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2910.64474, (String) null);
      PolarPlot polarPlot0 = new PolarPlot();
      Stroke stroke0 = polarPlot0.getAngleGridlineStroke();
      cyclicNumberAxis0.setTickMarkStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("ItemLabelAnchor.OUTSIDE11");
      periodAxis0.setTickMarksVisible(true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1807.12679), (-1807.12679), "");
      cyclicNumberAxis0.setTickLabelInsets(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'font' argument.");
      ColorUIResource colorUIResource0 = (ColorUIResource)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      categoryAxis3D0.setTickLabelPaint(colorUIResource0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("\"");
      logarithmicAxis0.setTickLabelsVisible(true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.util.RectangleEdge");
      logarithmicAxis0.setAxisLineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      cyclicNumberAxis0.setLabelInsets(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'paint' argument.");
      // Undeclared exception!
      try { 
        categoryAxis3D0.setLabelPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      Color color0 = Color.getHSBColor(1447.0F, (-232.2F), (-951.0F));
      numberAxis0.setLabelPaint(color0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Unknown data");
      Font font0 = logarithmicAxis0.DEFAULT_AXIS_LABEL_FONT.deriveFont((-2814));
      logarithmicAxis0.setLabelFont(font0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Unknown data");
      logarithmicAxis0.setLabelFont(logarithmicAxis0.DEFAULT_TICK_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxis0.setLabel((String) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("f{V7^(YE7zC,#E7YPm");
      periodAxis0.setLabel("");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2910.64474, (String) null);
      cyclicNumberAxis0.setLabel("Ivtd");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("8)HPgX1qE_NuUA%:;R,");
      logarithmicAxis0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("PC:6swOH}zh0a%\"V5ZZ");
      numberAxis3D0.setTickMarkInsideLength((-555.2F));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0, 2.0, "");
      String string0 = cyclicNumberAxis0.getLabelToolTip();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      String string0 = dateAxis0.getLabelURL();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2910.64474, (String) null);
      cyclicNumberAxis0.setLabelToolTip((String) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("/drR=M.33:;@}::");
      subCategoryAxis0.setTickMarkOutsideLength(0.0F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.getLabelAngle();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("K+V+y,FKL!%f[Dil)cL");
      boolean boolean0 = periodAxis0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Object object0 = categoryAxis3D0.clone();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Stroke stroke0 = numberAxis3D0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelURL("");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LegendTitle legendTitle0 = new LegendTitle(multiplePiePlot0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("Null 'stroke' argument.", simpleTimeZone0);
      // Undeclared exception!
      try { 
        dateAxis0.reserveSpace(graphics2D0, multiplePiePlot0, (Rectangle2D) null, legendTitle0.DEFAULT_POSITION, (AxisSpace) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Paint paint0 = extendedCategoryAxis0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0, "");
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.estimateMaximumTickLabelHeight((Graphics2D) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis("Unrecognised rowKey: ", stringArray0);
      float float0 = symbolAxis0.getTickMarkInsideLength();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1807.12679), (-1807.12679), "");
      boolean boolean0 = cyclicNumberAxis0.isTickLabelsVisible();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'font' argument.");
      Font font0 = categoryAxis3D0.getLabelFont();
  }
}
