/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:12:52 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Stroke;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logarithmicAxis0);
      logarithmicAxis0.notifyListeners(axisChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("PYqRwo0ZVT;{V$4");
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      boolean boolean0 = extendedCategoryAxis0.equals(stackedAreaRenderer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-977.41));
      Object object0 = cyclicNumberAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-6, 1.0E-6);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, standardXYItemRenderer0);
      cyclicNumberAxis0.addChangeListener(xYPlot0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      PolarPlot polarPlot0 = new PolarPlot();
      logarithmicAxis0.setPlot(polarPlot0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("R-%G+0eB^");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      boolean boolean0 = categoryAxis3D0.hasListener(combinedRangeCategoryPlot0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'insets' argument.");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2.0F);
      Paint paint0 = candlestickRenderer0.getUpPaint();
      extendedCategoryAxis0.setTickMarkPaint(paint0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      Date date0 = segmentedTimeline0.getDate(2496L);
      Millisecond millisecond0 = new Millisecond(date0, segmentedTimeline0.NO_DST_TIME_ZONE);
      PeriodAxis periodAxis0 = new PeriodAxis("", millisecond0, millisecond0);
      periodAxis0.setTickLabelsVisible(true);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      logarithmicAxis0.setAxisLinePaint(extendedCategoryAxis0.DEFAULT_AXIS_LINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("PYqRwo0ZVT;{V$4");
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      extendedCategoryAxis0.setLabelFont(stackedAreaRenderer0.DEFAULT_VALUE_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("{p !Fb[k!'[+Z2'4");
      logarithmicAxis0.setLabel("n{C:p r[[QG+/;l");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      String string0 = logarithmicAxis0.getLabel();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("135");
      float float0 = logarithmicAxis0.getTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("!3?06c`E");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.0F);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      numberAxis3D0.removeChangeListener(compassPlot0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("PYqRwo0ZVT;{V$4");
      extendedCategoryAxis0.setLabelAngle(0.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Stroke stroke0 = dateAxis0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("R-%G+0eB^");
      Font font0 = categoryAxis3D0.getTickLabelFont();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("PYqRwo0ZVT;{V$4");
      extendedCategoryAxis0.setAxisLineVisible(false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'insets' argument.");
      extendedCategoryAxis0.setLabelURL("6I");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      boolean boolean0 = dateAxis0.hasListener(combinedDomainXYPlot0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("PYqRwo0ZVT;{V$4");
      Paint paint0 = extendedCategoryAxis0.getTickLabelPaint((Comparable) "PYqRwo0ZVT;{V$4");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, 7.2E7);
      RectangleInsets rectangleInsets0 = cyclicNumberAxis0.getTickLabelInsets();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("java.awt.GradientPaint");
      float float0 = periodAxis0.getTickMarkInsideLength();
  }
}
