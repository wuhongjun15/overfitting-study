/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:20:43 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.block.GridArrangement;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.WaferMapDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "qvd2HfkU7");
      float[][] floatArray0 = new float[6][0];
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      Stroke stroke0 = fastScatterPlot0.getDomainGridlineStroke();
      cyclicNumberAxis0.setAxisLineStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'annotation' argument.");
      periodAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      boolean boolean0 = logarithmicAxis0.isVisible();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis(").");
      Plot plot0 = categoryAxis0.getPlot();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      RectangleInsets rectangleInsets0 = logarithmicAxis0.getTickLabelInsets();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("TextBlockAnchor.CENTER_RIGHT");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      logarithmicAxis0.addChangeListener(combinedDomainXYPlot0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("H[qwOcfF[V<Nn");
      double double0 = logarithmicAxis0.getFixedDimension();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setAxisLineVisible(true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      boolean boolean0 = extendedCategoryAxis0.isAxisLineVisible();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      Color color0 = Color.white;
      GradientPaint gradientPaint0 = new GradientPaint(point2D_Float0, color0, point2D_Float0, color0);
      logarithmicAxis0.setTickMarkPaint(gradientPaint0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.05);
      Stroke stroke0 = candlestickRenderer0.getItemOutlineStroke(500, 500);
      numberAxis3D0.setTickMarkStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.setTickLabelInsets(symbolAxis0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Color color0 = new Color(0, false);
      categoryAxis3D0.setTickLabelPaint(color0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      dateAxis0.setTickLabelsVisible(true);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2000.0, "_pcg@G*;bck");
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setAxisLineStroke((Stroke) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.setAxisLinePaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      Color color0 = (Color)Axis.DEFAULT_AXIS_LABEL_PAINT;
      cyclicNumberAxis0.setAxisLinePaint(color0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("3Li %:Y2{@MSstp&8*");
      categoryAxis3D0.setLabelPaint(extendedCategoryAxis0.DEFAULT_TICK_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis("Couldn't clone XYDataItem!", stringArray0);
      symbolAxis0.setLabel("\"");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("resolveDomainAxisLocation()");
      categoryAxis0.setLabel("resolveDomainAxisLocation()");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis(").");
      categoryAxis0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("3Li %:Y2{@MSstp&8*");
      extendedCategoryAxis0.setTickMarkInsideLength((-1.0F));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      float float0 = periodAxis0.getTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("resolveDomainAxisLocation()");
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      categoryAxis0.removeChangeListener(piePlot3D0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1095.654101639182);
      String string0 = cyclicNumberAxis0.getLabelURL();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.setLabelToolTip("ZOOM_RESET_BOTH");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setLabelAngle(90.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("#4FiryE8TNa/\"mCpZ_");
      extendedCategoryAxis0.setTickMarkOutsideLength(674.6F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Paint paint0 = categoryAxis3D0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      RectangleInsets rectangleInsets0 = numberAxis3D0.getLabelInsets();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("Null 'percentFormatter' argument.");
      boolean boolean0 = dateAxis0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3759.5419641909034, (String) null);
      Stroke stroke0 = cyclicNumberAxis0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1830.6, 0.0);
      Object object0 = cyclicNumberAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setLabelURL("|9dgP");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("#4FiryE8TNa/\"mCpZ_");
      Stroke stroke0 = extendedCategoryAxis0.getTickMarkStroke();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'day' argument.");
      logarithmicAxis0.setFixedDimension((-1244.1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Requires 'size' > 0.");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, 2, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      GridArrangement gridArrangement0 = new GridArrangement(10, (-1));
      LegendTitle legendTitle0 = new LegendTitle(multiplePiePlot0, gridArrangement0, gridArrangement0);
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 10, rectangle2D0, rectangle2D0, legendTitle0.DEFAULT_POSITION, plotRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'state' argument.");
      Paint paint0 = categoryAxis0.getAxisLinePaint();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "");
      WaferMapPlot waferMapPlot0 = new WaferMapPlot((WaferMapDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, waferMapPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge();
      AxisSpace axisSpace0 = cyclicNumberAxis0.reserveSpace(graphics2D0, waferMapPlot0, rectangle0, rectangleEdge0, (AxisSpace) null);
  }
}
