/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:13:39 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Button;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorModel;
import java.awt.image.DataBufferFloat;
import java.awt.image.IndexColorModel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.PixelGrabber;
import java.sql.Connection;
import java.text.CharacterIterator;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.time.Instant;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JApplet;
import javax.swing.JColorChooser;
import javax.swing.JSpinner;
import javax.swing.JViewport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Rotation;
import org.jfree.data.Range;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Color color0 = Color.ORANGE;
      categoryAxis3D0.setTickLabelPaint(color0);
      categoryAxis3D0.setLowerMargin(0.0);
      TimeZone timeZone0 = TimeZone.getTimeZone("*VD");
      TickUnitSource tickUnitSource0 = DateAxis.createStandardDateTickUnits(timeZone0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (String) null);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      cyclicNumberAxis0.setNumberFormatOverride(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      dateAxis0.setPositiveArrowVisible(false);
      dateAxis0.setPositiveArrowVisible(false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      dateAxis0.removeChangeListener(combinedDomainXYPlot0);
      dateAxis0.zoomRange(0.0, 0.0);
      dateAxis0.setLabelToolTip("");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3305.964226309343), 284.4430145145936, "org.jfree.chart.labels.StandardPieToolTipGenerator");
      cyclicNumberAxis0.setUpperMargin(20000.0);
      boolean boolean0 = cyclicNumberAxis0.isVisible();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.labels.StandardPieToolTipGenerator");
      Image image0 = JFreeChart.DEFAULT_BACKGROUND_IMAGE;
      int int0 = 21;
      int[] intArray0 = new int[1];
      intArray0[0] = 500;
      PixelGrabber pixelGrabber0 = null;
      try {
        pixelGrabber0 = new PixelGrabber((Image) null, 500, 500, 21, 500, intArray0, 500, 500);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D0.setTickLabelFont((Font) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      ModuloAxis moduloAxis0 = new ModuloAxis("4]z>-p,aG*G", (Range) null);
      String string0 = moduloAxis0.getLabelToolTip();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-3.0));
      cyclicNumberAxis0.setNegativeArrowVisible(false);
      Paint paint0 = cyclicNumberAxis0.getAxisLinePaint();
      String string0 = "jDPq~C%+p_z";
      PeriodAxis periodAxis0 = new PeriodAxis("jDPq~C%+p_z");
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((double[][]) null, (double[][]) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.data.DataUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.renderer.xy.XYBubbleRenderer");
      double double0 = logarithmicAxis0.adjustedPow10(0.0);
      boolean boolean0 = logarithmicAxis0.equals("org.jfree.chart.renderer.xy.XYBubbleRenderer");
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.renderer.xy.XYBubbleRenderer");
      Hour hour0 = null;
      try {
        hour0 = new Hour(15, (-772), 500, 2);
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("X3B");
      String string0 = logarithmicAxis0.makeTickLabel(0.0, true);
      String string1 = "";
      MockDate mockDate0 = new MockDate(500, 500, 25, 500, (-1));
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Second second0 = new Second(mockDate0, zoneInfo0);
      Instant instant0 = mockDate0.toInstant();
      RegularTimePeriod regularTimePeriod0 = second0.previous();
      TimeZone timeZone0 = TimeZone.getDefault();
      Class<XYPlot> class0 = XYPlot.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      logarithmicAxis0.setTickMarkInsideLength(25);
      // Undeclared exception!
      try { 
        MockDate.parse("-5V,_*B4Z|D{+");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      cyclicNumberAxis0.setLabel("");
      Graphics2D graphics2D0 = null;
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, ringPlot0, true);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, false);
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("SansSerif");
      subCategoryAxis0.setLabel("");
      Font font0 = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
      subCategoryAxis0.setLabelAngle(0.0);
      int int0 = 75;
      // Undeclared exception!
      try { 
        font0.canDisplayUpTo((CharacterIterator) null, 75, (-1135));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'left' argument.");
      String string0 = logarithmicAxis0.getLabel();
      int int0 = 6026;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte)61;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(500, 6026, byteArray0, byteArray0, byteArray0, 500);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      Locale locale0 = Locale.GERMANY;
      TickUnitSource tickUnitSource0 = NumberAxis.createStandardTickUnits(locale0);
      Stroke stroke0 = numberAxis3D0.getTickMarkStroke();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("|1_NXFR");
      boolean boolean0 = logarithmicAxis0.getAutoRangeNextLogFlag();
      Object object0 = logarithmicAxis0.clone();
      double double0 = numberAxis3D0.calculateHighestVisibleTickValue();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("|1_NXFR");
      float float0 = 1464.0F;
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      PiePlot piePlot0 = new PiePlot(jDBCPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("|1_NXFR", piePlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(500, (-1875), chartRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Width (500) and height (-1875) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("O6cZ(xWU@i");
      RegularTimePeriod regularTimePeriod0 = periodAxis0.getFirst();
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(regularTimePeriod0.DEFAULT_TIME_ZONE, locale0);
      long long0 = regularTimePeriod0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      regularTimePeriod0.peg(mockGregorianCalendar0);
      ModuloAxis moduloAxis0 = new ModuloAxis("y", periodAxis0.DEFAULT_RANGE);
      double double0 = moduloAxis0.getDisplayEnd();
      long long1 = regularTimePeriod0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("O6cZ(xWU@i");
      boolean boolean0 = extendedCategoryAxis0.equals("y");
      DateAxis dateAxis0 = new DateAxis("", regularTimePeriod0.DEFAULT_TIME_ZONE);
      periodAxis0.setFixedAutoRange(0.2);
      extendedCategoryAxis0.setAxisLinePaint(moduloAxis0.DEFAULT_AXIS_LABEL_PAINT);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      periodAxis0.setLowerBound(281.25713339);
      periodAxis0.setTickMarkStroke(extendedCategoryAxis0.DEFAULT_AXIS_LINE_STROKE);
      boolean boolean1 = periodAxis0.hasListener(timeTableXYDataset0);
      dateAxis0.autoAdjustRange();
      DateFormat dateFormat0 = dateAxis0.getDateFormatOverride();
      Object object0 = moduloAxis0.clone();
      moduloAxis0.setFixedDimension(2.0F);
      Graphics2D graphics2D0 = null;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(moduloAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle rectangle0 = chartPanel0.getBounds();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(10);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ZOOM_RANGE_BOTH");
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, 0.0, rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis("");
      dateAxis0.setTickMarksVisible(false);
      int int0 = (-3496);
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit((-3496), 500);
      } catch(IllegalArgumentException e) {
         //
         // DateTickUnit.getMillisecondCount() : unit must be one of the constants YEAR, MONTH, DAY, HOUR, MINUTE, SECOND or MILLISECOND defined in the DateTickUnit class. Do *not* use the constants defined in java.util.Calendar.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      TickUnitSource tickUnitSource0 = DateAxis.createStandardDateTickUnits((TimeZone) zoneInfo0);
      Object object0 = dateAxis0.clone();
      Stroke stroke0 = dateAxis0.getAxisLineStroke();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        locale0.getExtension('}');
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: }
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      String string0 = "";
      SystemColor systemColor0 = SystemColor.textText;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 500;
      floatArray0[2] = 2.0F;
      floatArray0[3] = 2.0F;
      floatArray0[4] = 2.0F;
      float[] floatArray1 = systemColor0.getRGBComponents(floatArray0);
      dateAxis0.setAxisLinePaint(systemColor0);
      dateAxis0.setLabelToolTip("");
      // Undeclared exception!
      try { 
        dateAxis0.setTickMarkPaint((Paint) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4817.0, "ym");
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Rotation rotation0 = Rotation.ANTICLOCKWISE;
      piePlot3D0.setDirection(rotation0);
      cyclicNumberAxis0.addChangeListener(piePlot3D0);
      cyclicNumberAxis0.setLabelAngle(4817.0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ym";
      stringArray0[1] = "ym";
      stringArray0[2] = "ym";
      stringArray0[3] = "ym";
      stringArray0[4] = "ym";
      stringArray0[5] = "ym";
      SymbolAxis symbolAxis0 = new SymbolAxis("ym", stringArray0);
      Graphics2D graphics2D0 = null;
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.05, 0.0, 0.25, 0.0, 4817.0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      // Undeclared exception!
      try { 
        symbolAxis0.DEFAULT_TICK_LABEL_FONT.getStringBounds("ym", 10, 500, fontRenderContext0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'insets' argument.");
      extendedCategoryAxis0.setLabelURL("Null 'insets' argument.");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, "Null 'insets' argument.");
      boolean boolean0 = extendedCategoryAxis0.hasListener(jSpinner_NumberEditor0);
      extendedCategoryAxis0.setTickLabelPaint((Comparable) 2, candlestickRenderer0.DEFAULT_PAINT);
      int int0 = (-652);
      Paint paint0 = candlestickRenderer0.getItemOutlinePaint(0, (-652));
      extendedCategoryAxis0.setTickLabelPaint((Comparable) "Null 'insets' argument.", paint0);
      int int1 = extendedCategoryAxis0.getMaximumCategoryLabelLines();
      NumberAxis numberAxis0 = new NumberAxis("@`sY");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(2);
      JFreeChart jFreeChart0 = new JFreeChart("@`sY", combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-277), 0, chartRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Width (-277) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setCategoryLabelPositionOffset((-1581));
      categoryAxis0.setLabelURL("KhVhhs;WBa0@ZB-");
      PeriodAxis periodAxis0 = new PeriodAxis("KhVhhs;WBa0@ZB-");
      Paint paint0 = periodAxis0.getMinorTickMarkPaint();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Object object0 = numberAxis3D0.clone();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&{tk";
      stringArray0[1] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2590.7), (-2590.7));
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 33);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      byte[][] byteArray0 = new byte[4][6];
      byte[] byteArray1 = new byte[6];
      byte byte0 = (byte) (-11);
      byteArray1[0] = (byte) (-11);
      byteArray1[1] = (byte) (-78);
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte)50;
      byteArray1[4] = (byte) (-125);
      byteArray1[5] = (byte)105;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)50;
      byteArray2[1] = (byte)50;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-78);
      byteArray2[4] = (byte) (-78);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)77;
      byteArray3[2] = (byte)50;
      byteArray3[3] = (byte) (-78);
      byteArray3[4] = (byte)50;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)50;
      byteArray0[3] = byteArray4;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(0, byteArray0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      DataBufferFloat dataBufferFloat0 = null;
      try {
        dataBufferFloat0 = new DataBufferFloat((byte) (-78), (byte)50);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5.0E8, 5.0E8);
      cyclicNumberAxis0.setAutoRangeMinimumSize(988.5915465639085);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Font font0 = areaRenderer0.getBaseItemLabelFont();
      combinedDomainXYPlot0.setNoDataMessageFont(font0);
      boolean boolean0 = defaultValueDataset0.equals(combinedDomainXYPlot0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      defaultValueDataset0.validateObject();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      RectangleInsets rectangleInsets0 = valueAxis0.getTickLabelInsets();
      JColorChooser jColorChooser0 = new JColorChooser();
      boolean boolean1 = cyclicNumberAxis0.equals(jColorChooser0);
      String string0 = "Requires 'lower' < 'upper'.";
      CategoryAxis categoryAxis0 = new CategoryAxis("Requires 'lower' < 'upper'.");
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 500;
      floatArray0[4] = 2.0F;
      floatArray0[5] = (float) 2;
      AffineTransform affineTransform0 = new AffineTransform(floatArray0);
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, 2);
      int int0 = 6;
      IndexColorModel indexColorModel0 = null;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(6, 10, (-1458), (IndexColorModel) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      NumberFormat numberFormat0 = meterPlot0.getTickLabelFormat();
      thermometerPlot0.setValueFormat(numberFormat0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      boolean boolean0 = valueAxis0.isTickLabelsVisible();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.switchedPow10(1.0F);
      String string0 = "AcFxvAjWbe\"";
      Year year0 = null;
      try {
        year0 = new Year((-902));
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-902) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("/");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("/", combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 109);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      Image image0 = bufferedImage0.getScaledInstance(2571, 500, 10);
      PlotOrientation plotOrientation0 = combinedRangeCategoryPlot0.getOrientation();
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.clear();
      ColorModel colorModel0 = jViewport0.getColorModel();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      dateAxis0.draw(graphics2D0, 0.5F, rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "ZOgcdnC?';";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("ZOgcdnC?';");
      Color color0 = Color.WHITE;
      float[] floatArray0 = new float[3];
      double double0 = (-2353.0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2353.0), 0.2);
      BasicStroke basicStroke0 = (BasicStroke)cyclicNumberAxis0.advanceLineStroke;
      extendedCategoryAxis0.setAxisLineStroke(basicStroke0);
      // Undeclared exception!
      try { 
        color0.getRGBComponents(floatArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "org.jfree.chart.plot.PlotOrientation";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0, 0.0, "org.jfree.chart.plot.PlotOrientation");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      NumberFormat numberFormat1 = NumberFormat.getPercentInstance();
      cyclicNumberAxis0.setNumberFormatOverride(numberFormat0);
      cyclicNumberAxis0.setRangeAboutValue(0.0, 0.0);
      cyclicNumberAxis0.setAutoTickUnitSelection(false, false);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setTickLabelInsets((RectangleInsets) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1905, 1905, (-1500), 1905, 1905);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = millisecond0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("pq5Hy(EE3ccy", regularTimePeriod0, millisecond0);
      Object object0 = periodAxis0.clone();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      RectangleInsets rectangleInsets0 = thermometerPlot0.getPadding();
      periodAxis0.setTickLabelInsets(rectangleInsets0);
      Class class0 = periodAxis0.getMajorTickTimePeriodClass();
      DateAxis dateAxis0 = new DateAxis("pq5Hy(EE3ccy");
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Day day0 = Day.parseDay("M !5c%+/+lX");
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("M !5c%+/+lX", (RegularTimePeriod) null, (RegularTimePeriod) null, day0.DEFAULT_TIME_ZONE);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-816.264448457);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-816.264448457), "");
      Button button0 = null;
      try {
        button0 = new Button("org.jfree.chart.event.RendererChangeListener");
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "j9k.fiq${j;TbDEaK=n";
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("j9k.fiq${j;TbDEaK=n", fixedMillisecond0, fixedMillisecond0, fixedMillisecond0.DEFAULT_TIME_ZONE);
      periodAxis0.setUpperBound(270.0);
      periodAxis0.setTickLabelsVisible(false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      long long0 = fixedMillisecond0.getMiddleMillisecond((Calendar) gregorianCalendar0);
      periodAxis0.setLabelInsets(combinedDomainXYPlot0.DEFAULT_INSETS);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(500);
      } catch(IllegalArgumentException e) {
         //
         // The index should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.autoAdjustRange();
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateAxis0.DEFAULT_RANGE);
      dateAxis0.setVisible(true);
      moduloAxis0.resizeRange((double) 2.0F, 0.0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.removeCategoryLabelToolTip(dateAxis0.DEFAULT_DATE_TICK_UNIT);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.setRange(moduloAxis0.DEFAULT_RANGE);
      dateAxis0.setAxisLineVisible(true);
      logarithmicAxis0.setTickMarksVisible(true);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(dateAxis0);
      logarithmicAxis0.notifyListeners(axisChangeEvent0);
      boolean boolean0 = logarithmicAxis0.getLog10TickLabelsFlag();
      double double0 = logarithmicAxis0.getFixedDimension();
      extendedCategoryAxis0.setTickMarkOutsideLength(2.0F);
      extendedCategoryAxis0.notifyListeners(axisChangeEvent0);
      extendedCategoryAxis0.clearCategoryLabelToolTips();
      moduloAxis0.resizeRange((double) 500, (-624.9511));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      double double0 = 0.05;
      periodAxis0.setLabelAngle(0.05);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      boolean boolean0 = logarithmicAxis0.getExpTickLabelsFlag();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      logarithmicAxis0.setLabelToolTip("");
      categoryAxis0.addCategoryLabelToolTip(0.05, (String) null);
      NumberTickUnit numberTickUnit0 = logarithmicAxis0.getTickUnit();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      Font font0 = subCategoryAxis0.getTickLabelFont();
      String string0 = ")y2'UYi<V";
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point(10, 11);
      Point point1 = new Point(point0);
      CategoryPlot categoryPlot0 = combinedDomainCategoryPlot0.findSubplot(plotRenderingInfo0, point1);
      categoryAxis0.setPlot((Plot) null);
      int int0 = (-1614);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-3070), ")y2'UYi<V", 0, (-1614), 500, 500, (-3070), 0, 0, 0, (-1614), 500, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 500
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAnchor categoryAnchor0 = CategoryAnchor.START;
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Paint paint0 = categoryAxis3D0.getTickLabelPaint((Comparable) 0.0F);
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      int int0 = categoryPlot0.getDomainAxisCount();
      Paint paint1 = categoryAxis3D0.getTickLabelPaint((Comparable) 0.0F);
      RectangleEdge rectangleEdge0 = categoryPlot0.getRangeAxisEdge(0);
      // Undeclared exception!
      try { 
        categoryAxis3D0.getCategoryJava2DCoordinate(categoryAnchor0, 165, 0, rectangle2D0, rectangleEdge0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Day day0 = new Day();
      RegularTimePeriod regularTimePeriod0 = day0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("Y].C19q z/m/eE", regularTimePeriod0, regularTimePeriod0);
      float float0 = periodAxis0.getTickMarkOutsideLength();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("w[?%zK&@VyClm7&B)s");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = null;
      try {
        lookupOp0 = new LookupOp((LookupTable) null, renderingHints0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.LookupOp", e);
      }
  }
}
