/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 10:03:38 GMT 2020
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.color.ColorSpace;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.IndexColorModel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JTree;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.renderer.AreaRendererEndType;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.category.BarPainter;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, Double.NEGATIVE_INFINITY, false);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer3D0.getLegendItemURLGenerator();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)0;
      int int0 = (-4111);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-2911), (-2911), byteArray0, (-4111), false);
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-205.61329640120664), (-205.61329640120664));
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.setBase((double) stackedBarRenderer3D0.ZERO);
      groupedStackedBarRenderer0.setMaximumBarWidth(0.0);
      boolean boolean0 = groupedStackedBarRenderer0.equals(stackedBarRenderer3D0);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemURLGenerator();
      groupedStackedBarRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesShapesVisible((-2995), false);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.getFillBox();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds(defaultStatisticalCategoryDataset0);
      double double0 = 4285.374490350407;
      boxAndWhiskerRenderer0.setItemMargin(4285.374490350407);
      int int0 = 360;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(360, 360, 360);
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 360
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setAutoPopulateSeriesOutlineStroke(false);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", scatterRenderer0.ZERO, 0.0, (double) scatterRenderer0.ZERO);
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      scatterRenderer0.setBaseShapesFilled(true);
      int int0 = scatterRenderer0.getPassCount();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1653, (double) 1653, 2.0E7, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      JButton jButton0 = new JButton((Action) null);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Border border0 = chartPanel0.getBorder();
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jButton0, (Border) null, 0, 3, 472, 1);
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      Point2D point2D0 = ganttRenderer0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle0, rectangle0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
      Paint paint0 = ganttRenderer0.getCompletePaint();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Range range0 = scatterRenderer0.findRangeBounds((CategoryDataset) null);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setLegendTextFont(8, scatterRenderer0.DEFAULT_VALUE_LABEL_FONT);
      statisticalBarRenderer0.setBaseLegendTextPaint(scatterRenderer0.DEFAULT_OUTLINE_PAINT);
      Range range1 = statisticalBarRenderer0.findRangeBounds((CategoryDataset) null);
      statisticalBarRenderer0.setShadowXOffset((double) scatterRenderer0.ZERO);
      statisticalBarRenderer0.setErrorIndicatorPaint(scatterRenderer0.DEFAULT_PAINT);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 6084, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode();
      JTree jTree0 = new JTree(defaultMutableTreeNode0);
      TreePath treePath0 = jTree0.getClosestPathForLocation(8, 10);
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      TreePath treePath1 = treePath0.pathByAddingChild(standardGradientPaintTransformer0);
      Rectangle rectangle0 = basicTreeUI0.getPathBounds(jTree0, treePath1);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.drawBackground(graphics2D0, (CategoryPlot) null, (Rectangle2D) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      Object object0 = lineAndShapeRenderer0.clone();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = lineAndShapeRenderer0.getBaseItemLabelGenerator();
      CategoryURLGenerator categoryURLGenerator0 = lineAndShapeRenderer0.getSeriesURLGenerator(90);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      AreaRendererEndType areaRendererEndType0 = stackedAreaRenderer0.getEndType();
      stackedAreaRenderer0.setEndType(areaRendererEndType0);
      int int0 = 3722;
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(3722);
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      boolean boolean0 = boxAndWhiskerToolTipGenerator0.equals(intervalBarRenderer0);
      scatterRenderer0.setSeriesToolTipGenerator(2361, (CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, false);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      boolean boolean1 = scatterRenderer0.equals(minMaxCategoryRenderer0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setFirstBarPaint(minMaxCategoryRenderer0.DEFAULT_PAINT);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Paint paint0 = boxAndWhiskerRenderer0.getArtifactPaint();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      boxAndWhiskerRenderer0.setLegendTextFont(0, lineAndShapeRenderer0.DEFAULT_VALUE_LABEL_FONT);
      Boolean boolean0 = Boolean.valueOf(false);
      lineAndShapeRenderer0.removeAnnotations();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setLegendShape(34, boxAndWhiskerRenderer0.DEFAULT_SHAPE);
      Boolean boolean1 = defaultCategoryItemRenderer0.getSeriesLinesVisible(0);
      boolean boolean2 = Boolean.logicalOr(false, false);
      lineAndShapeRenderer0.setSeriesShapesFilled(34, (Boolean) null);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesShapesVisible((-818), boolean0);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, (-720.6));
      barRenderer3D0.setBaseLegendShape((Shape) null);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      barRenderer3D0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.setShadowPaint(barRenderer3D0.DEFAULT_WALL_PAINT);
      boolean boolean0 = groupedStackedBarRenderer0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = false;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      Range range0 = ValueAxis.DEFAULT_RANGE;
      Range range1 = Range.combine(range0, range0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Null 'edge' argument.", range1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(moduloAxis0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      Range range2 = Range.scale(range0, 10);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      // Undeclared exception!
      try { 
        stackedBarRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, moduloAxis0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.setSeriesItemLabelGenerator((-1), (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      stackedBarRenderer0.setSeriesItemLabelGenerator(97, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean0 = statisticalLineAndShapeRenderer0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.setDataBoundsIncludesVisibleSeriesOnly(false);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      categoryStepRenderer0.setBaseLegendTextPaint(stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_PAINT);
      boolean boolean0 = stackedBarRenderer3D0.equals(categoryStepRenderer0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.addValue(1.0, (Comparable) waterfallBarRenderer0.ZERO, (Comparable) 3.0);
      Range range0 = waterfallBarRenderer0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(21.2113342);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis3D0, cyclicNumberAxis0, waterfallBarRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      waterfallBarRenderer0.setItemLabelAnchorOffset(0.2);
      cyclicNumberAxis0.setLabelInsets(categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      Rectangle rectangle1 = chartPanel0.getBounds(rectangle0);
      waterfallBarRenderer0.setLegendShape(0, rectangle1);
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedBarRenderer3D0.getToolTipGenerator(5, 0, false);
      Paint paint0 = waterfallBarRenderer0.getFirstBarPaint();
      double double0 = stackedBarRenderer3D0.getShadowXOffset();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      Boolean boolean1 = lineAndShapeRenderer0.getSeriesShapesVisible(0);
      categoryStepRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, false);
      lineAndShapeRenderer0.setUseFillPaint(true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      int int0 = 68;
      Paint paint0 = layeredBarRenderer0.lookupSeriesFillPaint(68);
      CategoryToolTipGenerator categoryToolTipGenerator0 = layeredBarRenderer0.getBaseToolTipGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      NumberFormat numberFormat0 = mockSimpleDateFormat0.getNumberFormat();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("", numberFormat0);
      Object object0 = standardCategoryToolTipGenerator0.clone();
      statisticalBarRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      TextBox textBox0 = new TextBox("");
      Stroke stroke0 = textBox0.getOutlineStroke();
      statisticalBarRenderer0.setErrorIndicatorStroke(stroke0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      boolean boolean0 = stackedAreaRenderer0.equals("");
      BarPainter barPainter0 = statisticalBarRenderer0.getBarPainter();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)0;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(3, byteArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(32, (int) (byte)0, chartRenderingInfo0);
      } catch(IllegalArgumentException e) {
         //
         // Width (32) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryItemRendererState categoryItemRendererState0 = stackedBarRenderer3D0.createState((PlotRenderingInfo) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getURLGenerator(0, (-1726), false);
      lineAndShapeRenderer0.setSeriesURLGenerator(0, (CategoryURLGenerator) null, false);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("wQ+*i~}JXtMq&nU@", numberFormat0, numberFormat0, numberFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((double) statisticalBarRenderer0.ZERO, false, standardXYZToolTipGenerator0);
      Boolean boolean0 = candlestickRenderer0.getSeriesVisible(2598);
      lineAndShapeRenderer0.setSeriesShapesFilled(2598, (Boolean) null);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, false);
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_GRIDLINE_STROKE;
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(3.0, 3.0, 3.0, 0.2, layeredBarRenderer0.DEFAULT_OUTLINE_PAINT, basicStroke0);
      categoryLineAnnotation0.setNotify(false);
      categoryLineAnnotation0.setStroke(layeredBarRenderer0.DEFAULT_OUTLINE_STROKE);
      boolean boolean0 = layeredBarRenderer0.equals(categoryLineAnnotation0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, (-3167));
      taskSeriesCollection0.removeChangeListener(categoryToPieDataset0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-3167), 431);
      List list0 = slidingGanttCategoryDataset0.getRowKeys();
      Range range0 = layeredBarRenderer0.findRangeBounds(slidingGanttCategoryDataset0);
      Range range1 = layeredBarRenderer0.findRangeBounds(slidingGanttCategoryDataset0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      statisticalLineAndShapeRenderer0.setDrawOutlines(true);
      statisticalLineAndShapeRenderer0.setUseSeriesOffset(false);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      boolean boolean1 = groupedStackedBarRenderer0.equals(taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.setWallPaint(lineRenderer3D0.DEFAULT_VALUE_LABEL_PAINT);
      CategoryURLGenerator categoryURLGenerator0 = lineRenderer3D0.getSeriesURLGenerator(5);
      barRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) null);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(lineRenderer3D0.DEFAULT_OUTLINE_PAINT, barRenderer3D0.DEFAULT_WALL_PAINT, categoryStepRenderer0.DEFAULT_VALUE_LABEL_PAINT, categoryStepRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale((-3879.249153), 8.0, waterfallBarRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, logarithmicAxis0);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.calculateBarWidth((CategoryPlot) null, rectangle2D0, defaultMultiValueCategoryDataset0, (CategoryItemRendererState) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("");
      barRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-3342.168), (-1.0));
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setStartPercent((-1.0));
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setArtifactPaint(ganttRenderer0.DEFAULT_OUTLINE_PAINT);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Paint paint0 = minMaxCategoryRenderer0.getGroupPaint();
      boolean boolean0 = true;
      ganttRenderer0.setShadowVisible(true);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Object object0 = scatterRenderer0.clone();
      boolean boolean1 = false;
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getSeriesURLGenerator((-653));
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesURLGenerator((-910), (CategoryURLGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      double double0 = scatterRenderer0.getItemMargin();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(6.0, 0.2);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = stackedBarRenderer3D0.getBaseItemLabelGenerator();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(8.0, (-985.0), 12.0, 0.7853981633974483, stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_PAINT, scatterRenderer0.DEFAULT_STROKE);
      boolean boolean0 = scatterRenderer0.removeAnnotation(categoryLineAnnotation0);
      stackedBarRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, true);
      Number[][] numberArray0 = new Number[9][8];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) stackedBarRenderer3D0.ZERO;
      numberArray1[1] = (Number) 0.2;
      numberArray1[2] = (Number) 0.2;
      numberArray1[3] = (Number) 0.2;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      numberArray2[0] = (Number) 12.0;
      numberArray2[1] = (Number) scatterRenderer0.ZERO;
      numberArray2[2] = (Number) stackedBarRenderer3D0.ZERO;
      numberArray2[3] = (Number) scatterRenderer0.ZERO;
      numberArray2[4] = (Number) 3.0;
      numberArray2[5] = (Number) 12.0;
      numberArray2[6] = (Number) 8.0;
      numberArray2[7] = (Number) 0.2;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      numberArray3[0] = (Number) 8.0;
      int int0 = stackedBarRenderer3D0.getDefaultEntityRadius();
      numberArray3[1] = (Number) 3;
      numberArray3[2] = (Number) stackedBarRenderer3D0.ZERO;
      numberArray3[3] = (Number) stackedBarRenderer3D0.ZERO;
      numberArray3[4] = (Number) 12.0;
      numberArray3[5] = (Number) 0.2;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[6];
      numberArray5[0] = (Number) 3.0;
      numberArray5[1] = (Number) 3.0;
      numberArray5[2] = (Number) 0.2;
      numberArray5[3] = (Number) stackedBarRenderer3D0.ZERO;
      numberArray5[4] = (Number) stackedBarRenderer3D0.ZERO;
      numberArray5[5] = (Number) scatterRenderer0.ZERO;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[6];
      numberArray6[0] = (Number) stackedBarRenderer3D0.ZERO;
      numberArray6[1] = (Number) stackedBarRenderer3D0.ZERO;
      numberArray6[2] = (Number) stackedBarRenderer3D0.ZERO;
      numberArray6[3] = (Number) 12.0;
      numberArray6[4] = (Number) 0.2;
      numberArray6[5] = (Number) scatterRenderer0.ZERO;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[1];
      numberArray7[0] = (Number) scatterRenderer0.ZERO;
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[5];
      numberArray8[0] = (Number) 8.0;
      numberArray8[1] = (Number) scatterRenderer0.ZERO;
      numberArray8[2] = (Number) 0.2;
      numberArray8[3] = (Number) scatterRenderer0.ZERO;
      numberArray8[4] = (Number) 12.0;
      numberArray0[7] = numberArray8;
      Number[] numberArray9 = new Number[2];
      numberArray9[0] = (Number) stackedBarRenderer3D0.ZERO;
      numberArray9[1] = (Number) 8.0;
      numberArray0[8] = numberArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.createStackedValueList(defaultIntervalCategoryDataset0, scatterRenderer0.ZERO, (int[]) null, 0.0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.DataUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setAutoPopulateSeriesFillPaint(false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getItemLabelGenerator(1, 56, false);
      waterfallBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, false);
      double[] doubleArray0 = waterfallBarRenderer0.calculateBarL0L1(0.0, 135.0, 0.0);
      waterfallBarRenderer0.setIncludeBaseInRange(false);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getBaseItemLabelGenerator();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.YEAR;
      DateFormat dateFormat0 = DateFormat.getInstance();
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 0, dateFormat0);
      } catch(IllegalArgumentException e) {
         //
         // Requires 'multiple' > 0.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DrawingSupplier drawingSupplier0 = lineRenderer3D0.getDrawingSupplier();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      int int0 = stackedBarRenderer0.hashCode();
      ItemLabelPosition itemLabelPosition0 = stackedBarRenderer0.getPositiveItemLabelPosition((-3370), (-3370), true);
      stackedBarRenderer0.setPositiveItemLabelPositionFallback(itemLabelPosition0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-1.0), 0.0, false);
      Paint paint0 = stackedBarRenderer3D0.getWallPaint();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      layeredBarRenderer0.setPlot(categoryPlot0);
      boolean boolean0 = layeredBarRenderer0.hasListener(categoryPlot0);
      double double0 = layeredBarRenderer0.getSeriesBarWidth(0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2399.9, (-625.88657), false);
      CategoryPlot categoryPlot0 = stackedBarRenderer3D0.getPlot();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setPlot((CategoryPlot) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      int int0 = 0;
      Locale locale0 = Locale.KOREA;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("org.jfree.data.xy.MatrixSeries", numberFormat0);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesToolTipGenerator((-1147), (CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.setSeriesToolTipGenerator(9, (CategoryToolTipGenerator) null);
      Boolean boolean0 = lineAndShapeRenderer0.getSeriesVisibleInLegend(680);
      boolean boolean1 = Boolean.getBoolean("");
      boolean boolean2 = Boolean.logicalXor(false, false);
      lineAndShapeRenderer0.setSeriesShapesVisible(680, (Boolean) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      int int0 = (-292);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getSeriesToolTipGenerator(29);
      // Undeclared exception!
      try { 
        stackedBarRenderer0.setSeriesToolTipGenerator((-292), (CategoryToolTipGenerator) null, false);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Locale locale0 = Locale.CANADA;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0, locale0);
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("Null 'direction' argument.", dateFormat0);
      boxAndWhiskerRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
      boolean boolean0 = boxAndWhiskerRenderer0.isMedianVisible();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = stackedAreaRenderer0.findRangeBounds(defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", lineRenderer3D0.ZERO, 0.0);
      Layer layer0 = Layer.BACKGROUND;
      lineRenderer3D0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      lineRenderer3D0.setXOffset(1.8243820060207);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, true, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      boolean boolean0 = scatterRenderer0.hasListener(combinedRangeXYPlot0);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("\";H!.&#W", 1.0F, 1.0F, 10);
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      boolean boolean1 = scatterRenderer0.getSeriesShapesFilled((-867));
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Paint paint0 = statisticalBarRenderer0.lookupSeriesFillPaint(10);
      double double0 = statisticalBarRenderer0.getItemMargin();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      double double1 = levelRenderer0.getMaximumItemWidth();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Icon icon0 = minMaxCategoryRenderer0.getObjectIcon();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean2 = boxAndWhiskerRenderer0.isMeanVisible();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(boxAndWhiskerRenderer0.DEFAULT_PAINT, minMaxCategoryRenderer0.DEFAULT_PAINT, minMaxCategoryRenderer0.DEFAULT_PAINT, statisticalBarRenderer0.DEFAULT_OUTLINE_PAINT);
      Paint paint1 = waterfallBarRenderer0.getNegativeBarPaint();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int0 = 1847;
      Paint paint0 = scatterRenderer0.lookupSeriesPaint(1847);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setShadowPaint(scatterRenderer0.DEFAULT_PAINT);
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getURLGenerator(1847, 1847, true);
      scatterRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, true);
      scatterRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      boolean boolean0 = false;
      scatterRenderer0.setDrawOutlines(false);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean1 = statisticalLineAndShapeRenderer0.getBaseShapesFilled();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-661.4870803), 3.4028234663852886E38);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setIncompletePaint(statisticalLineAndShapeRenderer0.DEFAULT_PAINT);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      int int1 = 1;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D_Double0, rectangleAnchor0);
      Line2D.Float line2D_Float0 = new Line2D.Float(point2D0, point2D0);
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'annotation' argument.");
      NumberAxis numberAxis0 = new NumberAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, extendedCategoryAxis0, numberAxis0, ganttRenderer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.initialise(graphics2D0, rectangle2D0, categoryPlot0, defaultBoxAndWhiskerCategoryDataset0, plotRenderingInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = null;
      try {
        bufferedImageRenderingSource0 = new BufferedImageRenderingSource((BufferedImage) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.BufferedImageRenderingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-261);
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 5;
      floatArray0[3] = (float) 5;
      floatArray0[4] = (float) 5;
      floatArray0[5] = (-546.2004F);
      floatArray0[6] = (float) 5;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("]QwvPV", combinedRangeCategoryPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1240, 1790, (ChartRenderingInfo) null);
      Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.setLegendShape((-261), rectangle2D0);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }
}
