/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 27 06:30:15 GMT 2020
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.sql.Connection;
import java.sql.Statement;
import java.text.AttributedCharacterIterator;
import java.text.CharacterIterator;
import java.text.ChoiceFormat;
import java.text.NumberFormat;
import java.util.Map;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.JFormattedTextField;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.plaf.multi.MultiTextUI;
import javax.swing.table.TableColumnModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.JTextComponent;
import javax.swing.text.Position;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.ChartChangeEventType;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.category.BarPainter;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.GradientPaintTransformer;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Second;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      stackedBarRenderer0.removeAnnotations();
      MeterPlot meterPlot0 = new MeterPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      PlotOrientation plotOrientation0 = combinedRangeCategoryPlot0.getOrientation();
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      boolean boolean0 = stackedBarRenderer0.hasListener(meterPlot0);
      stackedBarRenderer0.setIncludeBaseInRange(false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getBaseToolTipGenerator();
      // Undeclared exception!
      try { 
        stackedBarRenderer0.setSeriesToolTipGenerator((-2157), (CategoryToolTipGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Paint paint0 = waterfallBarRenderer0.getPositiveBarPaint();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode(paint0, true);
      JTree jTree0 = new JTree(defaultMutableTreeNode0, true);
      TreePath treePath0 = jTree0.getLeadSelectionPath();
      Rectangle rectangle0 = jTree0.getPathBounds((TreePath) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryStepRenderer_State0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, defaultKeyedValues2DDataset0, plotRenderingInfo1);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Object object0 = boxAndWhiskerRenderer0.clone();
      boxAndWhiskerRenderer0.setFillBox(true);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray1[1] = (double) scatterRenderer0.ZERO;
      doubleArray1[2] = (double) scatterRenderer0.ZERO;
      doubleArray1[3] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray1[4] = (double) scatterRenderer0.ZERO;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray2[1] = (double) scatterRenderer0.ZERO;
      doubleArray2[2] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray2[3] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray2[4] = (double) scatterRenderer0.ZERO;
      doubleArray2[5] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray4[1] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray4[2] = (double) scatterRenderer0.ZERO;
      doubleArray4[3] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray4[4] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray5[1] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray5[2] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray5[3] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray5[4] = (-1593.37);
      doubleArray5[5] = (double) scatterRenderer0.ZERO;
      doubleArray5[6] = (double) scatterRenderer0.ZERO;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray6[1] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray6[2] = (double) scatterRenderer0.ZERO;
      doubleArray6[3] = (double) scatterRenderer0.ZERO;
      doubleArray6[4] = (-1593.37);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (double) scatterRenderer0.ZERO;
      doubleArray7[1] = (-1593.37);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (double) scatterRenderer0.ZERO;
      doubleArray8[1] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray8[2] = (double) scatterRenderer0.ZERO;
      doubleArray8[3] = (double) scatterRenderer0.ZERO;
      doubleArray8[4] = (double) scatterRenderer0.ZERO;
      doubleArray8[5] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray8[6] = (double) scatterRenderer0.ZERO;
      doubleArray8[7] = (double) scatterRenderer0.ZERO;
      doubleArray8[8] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        scatterRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = null;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.getDomainAxis((CategoryPlot) null, defaultCategoryDataset0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean0 = layeredBarRenderer0.equals(statisticalLineAndShapeRenderer0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueAxis valueAxis0 = statisticalLineAndShapeRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 10);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 0.0F;
      Kernel kernel0 = new Kernel(0, 0, floatArray0);
      String string0 = "$ 8Gw3%I}m>";
      JFreeChart jFreeChart0 = new JFreeChart("$ 8Gw3%I}m>", combinedRangeCategoryPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0, 0, renderingHints0);
      AffineTransform affineTransform0 = AffineTransform.getShearInstance(1773.905316417128, 4107.569514722015);
      RenderingHints renderingHints1 = jFreeChart0.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints1);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(86, 0, 10);
      } catch(IllegalArgumentException e) {
         //
         // Width (86) and height (0) must be > 0
         //
         verifyException("java.awt.image.SampleModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = lineRenderer3D0.getItemLabelGenerator(1, (-1512), false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      boolean boolean0 = true;
      boxAndWhiskerRenderer0.setMeanVisible(true);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      boolean boolean1 = categoryStepRenderer0.getStagger();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      String string0 = "";
      // Undeclared exception!
      try { 
        Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setStartPercent((-3364.35));
      ganttRenderer0.setEndPercent(1.5707963267948966);
      double[] doubleArray0 = ganttRenderer0.calculateBarL0L1(1.5707963267948966, 1.5707963267948966, 1.5707963267948966);
      ganttRenderer0.setAutoPopulateSeriesPaint(false);
      Paint paint0 = ganttRenderer0.getIncompletePaint();
      double double0 = ganttRenderer0.getBase();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      categoryCrosshairState0.updateCrosshairY(3486.670289045);
      Second second0 = new Second();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      // Undeclared exception!
      try { 
        ganttRenderer0.updateCrosshairValues(categoryCrosshairState0, second0, second0, 1.0E-9, 59, 0, 59, plotOrientation0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", categoryStepRenderer0.ZERO, (-2231.5140502634), (double) categoryStepRenderer0.ZERO);
      Layer layer0 = Layer.FOREGROUND;
      categoryStepRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      int[] intArray0 = new int[4];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(5, 5, intArray0, 5, false, 5, 5);
      } catch(IllegalArgumentException e) {
         //
         // transferType must be eitherDataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 1205.8371041907;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-902.632421642613), 1205.8371041907, false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean0 = false;
      CategoryURLGenerator categoryURLGenerator0 = lineRenderer3D0.getURLGenerator(2353, 2353, false);
      stackedBarRenderer3D0.setSeriesURLGenerator(2353, (CategoryURLGenerator) null, false);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(boxAndWhiskerRenderer0);
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      boolean boolean0 = true;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.2, true);
      double double0 = 4.0;
      double double1 = 0.0;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        stackedBarRenderer0.addEntity(standardEntityCollection0, stackedBarRenderer3D0.DEFAULT_SHAPE, defaultStatisticalCategoryDataset0, (-4382), (-4382), true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      int int0 = (-522);
      CategoryURLGenerator categoryURLGenerator0 = defaultCategoryItemRenderer0.getURLGenerator(2474, (-522), true);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.setSeriesURLGenerator((-522), (CategoryURLGenerator) null);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = ganttRenderer0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("");
      ganttRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      double double0 = ganttRenderer0.calculateSeriesWidth(1778.0, categoryAxis0, (-2413), (-2413));
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setBaseShapesVisible(true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(boxAndWhiskerRenderer0.ZERO, (double) boxAndWhiskerRenderer0.ZERO, boxAndWhiskerRenderer0.ZERO, 1.0, boxAndWhiskerRenderer0.DEFAULT_OUTLINE_PAINT, boxAndWhiskerRenderer0.DEFAULT_OUTLINE_STROKE);
      boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      scatterRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, true);
      boolean boolean0 = scatterRenderer0.getBaseShapesFilled();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setValuePaint(waterfallBarRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      Paint paint0 = meterPlot0.getValuePaint();
      waterfallBarRenderer0.setPositiveBarPaint(paint0);
      waterfallBarRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null);
      CategoryURLGenerator categoryURLGenerator0 = waterfallBarRenderer0.getSeriesURLGenerator(10);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("JCa`.'6", waterfallBarRenderer0.DEFAULT_VALUE_LABEL_FONT, meterPlot0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.MeterPlot cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getSeriesItemLabelGenerator(0);
      ganttRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null);
      ganttRenderer0.setEndPercent((-2951.87228));
      Paint paint0 = ganttRenderer0.getCompletePaint();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setSeriesShapesFilled(3310, true);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = ganttRenderer0.getLegendItemURLGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setUseSeriesOffset(false);
      lineRenderer3D0.setDrawOutlines(true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      int int0 = 0;
      defaultCategoryItemRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("d@/M{I~qy*-8=");
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("_EsQk7clz/:u7", choiceFormat0);
      defaultCategoryItemRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      double double0 = layeredBarRenderer0.getShadowYOffset();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Icon icon0 = minMaxCategoryRenderer0.getObjectIcon();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "<p");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Paint paint0 = waterfallBarRenderer0.getFirstBarPaint();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      waterfallBarRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2132.7, 3.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      MultiTextUI multiTextUI0 = new MultiTextUI();
      DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory((JFormattedTextField.AbstractFormatter) null, (JFormattedTextField.AbstractFormatter) null, (JFormattedTextField.AbstractFormatter) null);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField(defaultFormatterFactory0, statisticalLineAndShapeRenderer0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Position.Bias position_Bias0 = defaultCaret0.getMarkBias();
      // Undeclared exception!
      try { 
        multiTextUI0.modelToView((JTextComponent) jFormattedTextField0, 0, (Position.Bias) null);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      int int0 = 1265;
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      Vector<IntervalBarRenderer> vector0 = new Vector<IntervalBarRenderer>();
      Object object0 = customCategoryURLGenerator0.clone();
      customCategoryURLGenerator0.addURLSeries(vector0);
      customCategoryURLGenerator0.addURLSeries(vector0);
      Object object1 = customCategoryURLGenerator0.clone();
      statisticalLineAndShapeRenderer0.setSeriesURLGenerator(1265, (CategoryURLGenerator) customCategoryURLGenerator0, true);
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      intervalBarRenderer0.setShadowYOffset(1265);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = intervalBarRenderer0.getPlot();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, false);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.DEFAULT_VALUE_LABEL_FONT.getStringBounds((CharacterIterator) null, 10, 14, fontRenderContext0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BarRenderer.setDefaultShadowsVisible(false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      BarRenderer barRenderer0 = new BarRenderer();
      double double0 = barRenderer0.getBase();
      CategoryToolTipGenerator categoryToolTipGenerator0 = barRenderer0.getSeriesToolTipGenerator(0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(barRenderer0);
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      int int0 = (-912);
      int int1 = 200;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getURLGenerator((-401), (-401), false);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.setSeriesURLGenerator((-912), (CategoryURLGenerator) null, false);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      categoryStepRenderer0.setDataBoundsIncludesVisibleSeriesOnly(true);
      boolean boolean0 = categoryStepRenderer0.equals(statisticalBarRenderer0);
      int int0 = 719;
      LegendItem legendItem0 = categoryStepRenderer0.getLegendItem(719, 719);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemURLGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setLegendItemToolTipGenerator((CategorySeriesLabelGenerator) null);
      boolean boolean1 = scatterRenderer0.getUseFillPaint();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator1 = scatterRenderer0.getLegendItemToolTipGenerator();
      double double0 = statisticalBarRenderer0.getItemMargin();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, false);
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      layeredBarRenderer0.removeAnnotations();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(0.2, 3.0, 0.2, (-4073.326), layeredBarRenderer0.DEFAULT_PAINT, layeredBarRenderer0.DEFAULT_OUTLINE_STROKE);
      categoryLineAnnotation0.setCategory1(3.0);
      categoryLineAnnotation0.setCategory2(layeredBarRenderer0.ZERO);
      layeredBarRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      layeredBarRenderer0.setDrawBarOutline(false);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = layeredBarRenderer0.getLegendItemURLGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer0.getUseFillPaint();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Paint paint0 = boxAndWhiskerRenderer0.getArtifactPaint();
      int int0 = boxAndWhiskerRenderer0.getColumnCount();
      boxAndWhiskerRenderer0.setMedianVisible(false);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      double double0 = ganttRenderer0.getEndPercent();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setAutoPopulateSeriesStroke(false);
      CategoryToolTipGenerator categoryToolTipGenerator0 = ganttRenderer0.getToolTipGenerator(0, (-2991), false);
      // Undeclared exception!
      try { 
        scatterRenderer0.setSeriesToolTipGenerator((-2841), (CategoryToolTipGenerator) null, false);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      GeneralPath generalPath0 = new GeneralPath();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity(standardEntityCollection0, generalPath0, defaultKeyedValues2DDataset0, 2976, 1698, true, 1698, 1698);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2976, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setUseSeriesOffset(false);
      double double0 = lineRenderer3D0.getYOffset();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Graphics2D graphics2D0 = null;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(categoryTableXYDataset0);
      JTable jTable0 = new JTable(xYDatasetTableModel0, (TableColumnModel) null);
      Rectangle rectangle0 = jTable0.getCellRect(0, 0, false);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 12.0;
      numberArray1[1] = (Number) 10;
      numberArray1[2] = (Number) 12.0;
      numberArray1[3] = combinedDomainCategoryPlot0.ZERO;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.initialise((Graphics2D) null, rectangle0, combinedDomainCategoryPlot0, defaultIntervalCategoryDataset0, (PlotRenderingInfo) null);
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      int int0 = waterfallBarRenderer0.hashCode();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CategoryToolTipGenerator categoryToolTipGenerator0 = spiderWebPlot0.getToolTipGenerator();
      waterfallBarRenderer0.setSeriesToolTipGenerator(398, (CategoryToolTipGenerator) null);
      waterfallBarRenderer0.setDrawBarOutline(true);
      Stroke stroke0 = waterfallBarRenderer0.lookupSeriesStroke(1068);
      double double0 = waterfallBarRenderer0.getShadowXOffset();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.isMedianVisible();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      boolean boolean0 = barRenderer3D0.getIncludeBaseInRange();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      barRenderer3D0.setDefaultEntityRadius(1794);
      stackedBarRenderer3D0.setRenderAsPercentages(true);
      barRenderer3D0.setAutoPopulateSeriesShape(true);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      boolean boolean1 = stackedBarRenderer3D0.equals(layeredBarRenderer0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = layeredBarRenderer0.getSeriesItemLabelGenerator(1144);
      GradientPaintTransformer gradientPaintTransformer0 = layeredBarRenderer0.getGradientPaintTransformer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      LegendItem legendItem0 = categoryStepRenderer0.getLegendItem(1794, 1144);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      barRenderer3D0.setNegativeItemLabelPositionFallback((ItemLabelPosition) null);
      Range range0 = scatterRenderer0.findRangeBounds((CategoryDataset) null);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Range range1 = lineRenderer3D0.findRangeBounds((CategoryDataset) null);
      lineRenderer3D0.setXOffset(12.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = layeredBarRenderer0.createState(plotRenderingInfo0);
      CategoryCrosshairState categoryCrosshairState0 = categoryItemRendererState0.getCrosshairState();
      String string0 = null;
      // Undeclared exception!
      try { 
        Minute.parseMinute((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      GradientPaintTransformer gradientPaintTransformer0 = stackedBarRenderer3D0.getGradientPaintTransformer();
      stackedBarRenderer3D0.setGradientPaintTransformer(gradientPaintTransformer0);
      CategoryPlot categoryPlot0 = null;
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setPlot((CategoryPlot) null);
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      DrawingSupplier drawingSupplier0 = stackedBarRenderer3D0.getDrawingSupplier();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = true;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      int int0 = (-377);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      stackedAreaRenderer0.setAutoPopulateSeriesPaint(true);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setArtifactPaint(stackedAreaRenderer0.DEFAULT_PAINT);
      boolean boolean1 = intervalCategoryItemLabelGenerator0.equals(boxAndWhiskerRenderer0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.setSeriesItemLabelGenerator((-377), (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      Shape shape0 = stackedBarRenderer0.lookupSeriesShape((-1131));
      stackedBarRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null, true);
      int int0 = 0;
      int int1 = 1345;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-13);
      int int2 = 0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-1131), 0, byteArray0, 0, true, 0);
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      double[] doubleArray0 = stackedBarRenderer0.calculateBarL0L1((-3649.0), (-3596.7803555), 0.0);
      MeterPlot meterPlot0 = new MeterPlot();
      NumberFormat numberFormat0 = meterPlot0.getTickLabelFormat();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("", numberFormat0);
      stackedBarRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer0.getLegendItemLabelGenerator();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getBaseItemLabelGenerator();
      scatterRenderer0.setSeriesItemLabelGenerator(5, (CategoryItemLabelGenerator) null, false);
      boolean boolean0 = scatterRenderer0.getDrawOutlines();
      Object object0 = scatterRenderer0.clone();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(lineRenderer3D0);
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.GENERAL;
      rendererChangeEvent0.setType(chartChangeEventType0);
      stackedAreaRenderer0.notifyListeners(rendererChangeEvent0);
      lineRenderer3D0.setBaseShapesFilled(true);
      Paint paint0 = stackedAreaRenderer0.lookupLegendTextPaint(628);
      LegendItem legendItem0 = stackedAreaRenderer0.getLegendItem(19, 19);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemURLGenerator();
      lineRenderer3D0.setLegendItemToolTipGenerator((CategorySeriesLabelGenerator) null);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.2);
      groupedStackedBarRenderer0.setSeriesToGroupMap(keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      boolean boolean0 = true;
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 684, (-447));
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setBaseLegendTextPaint((Paint) null);
      LegendItemCollection legendItemCollection0 = levelRenderer0.getLegendItems();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      Object object0 = standardCategoryItemLabelGenerator0.clone();
      levelRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("D!KfqDr6MQ' U$n", "4<]}d%", "Unknown layer.");
      lineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, false);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = levelRenderer0.getItemLabelGenerator(0, (-3444), true);
      lineAndShapeRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0, false);
      boolean boolean0 = lineAndShapeRenderer0.equals(object0);
      Boolean boolean1 = lineAndShapeRenderer0.getSeriesShapesVisible(0);
      int int0 = lineAndShapeRenderer0.getRowCount();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.drawOutline((Graphics2D) null, (CategoryPlot) null, (Rectangle2D) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      boolean boolean0 = stackedBarRenderer3D0.equals((Object) null);
      String string0 = "";
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", 3.0, (-797.15), 0.2);
      boolean boolean1 = stackedBarRenderer3D0.removeAnnotation(categoryPointerAnnotation0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int0 = 885;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(885, byteArray0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", waferMapPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 699.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      float[] floatArray1 = new float[0];
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray1, renderingHints0);
      IndexColorModel indexColorModel0 = null;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-3274), 0, 181, (IndexColorModel) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ValueMarker valueMarker0 = new ValueMarker((double) groupedStackedBarRenderer0.ZERO);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainCategoryPlot0.addRangeMarker((Marker) valueMarker0, layer0);
      groupedStackedBarRenderer0.setPlot(combinedDomainCategoryPlot0);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(3.0, 0.2, groupedStackedBarRenderer0.ZERO, 5.0E9, groupedStackedBarRenderer0.DEFAULT_PAINT, groupedStackedBarRenderer0.DEFAULT_OUTLINE_STROKE);
      boolean boolean0 = groupedStackedBarRenderer0.equals(categoryLineAnnotation0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = scatterRenderer0.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      boolean boolean1 = scatterRenderer0.getBaseShapesFilled();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setDrawOutlines(false);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      int int0 = stackedAreaRenderer0.getPassCount();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setDrawLines(false);
      defaultCategoryItemRenderer0.setDrawOutlines(true);
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 10);
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 10
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BarRenderer.setDefaultShadowsVisible(true);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      Stroke stroke0 = statisticalLineAndShapeRenderer0.getErrorIndicatorStroke();
      boolean boolean0 = statisticalLineAndShapeRenderer0.getItemShapeVisible((-642), 1561);
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getURLGenerator(0, 0, true);
      CategoryURLGenerator categoryURLGenerator1 = statisticalLineAndShapeRenderer0.getURLGenerator(0, 360, false);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      LegendItem legendItem0 = scatterRenderer0.getLegendItem((-642), 1);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setXOffset((-2783.0));
      Range range0 = scatterRenderer0.findRangeBounds((CategoryDataset) null);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Paint paint0 = boxAndWhiskerRenderer0.getArtifactPaint();
      boolean boolean0 = BarRenderer.getDefaultShadowsVisible();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setCompletePaint(boxAndWhiskerRenderer0.DEFAULT_PAINT);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      BarPainter barPainter0 = BarRenderer.getDefaultBarPainter();
      BarRenderer.setDefaultBarPainter(barPainter0);
      boolean boolean1 = lineRenderer3D0.equals(intervalBarRenderer0);
      lineRenderer3D0.setBaseLinesVisible(false);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean0 = false;
      lineRenderer3D0.setDataBoundsIncludesVisibleSeriesOnly(false);
      double double0 = lineRenderer3D0.getXOffset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("X)TG;@J~J>u3", lineRenderer3D0.DEFAULT_VALUE_LABEL_FONT, multiplePiePlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CategoryPlot categoryPlot0 = null;
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        lineRenderer3D0.drawBackground(graphics2D0, (CategoryPlot) null, (Rectangle2D) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.LineRenderer3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Paint paint0 = combinedDomainXYPlot0.getRangeGridlinePaint();
      minMaxCategoryRenderer0.setGroupPaint(paint0);
      Shape shape0 = minMaxCategoryRenderer0.lookupLegendShape(10);
      minMaxCategoryRenderer0.setSeriesURLGenerator(10, (CategoryURLGenerator) null);
      int int0 = minMaxCategoryRenderer0.getRowCount();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(681.0, 0.0);
      double double0 = stackedBarRenderer3D0.getBase();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      groupedStackedBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      Object object0 = groupedStackedBarRenderer0.clone();
      boolean boolean0 = stackedBarRenderer3D0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp((RenderingHints) null);
      int int0 = 768;
      int int1 = 1742;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-75);
      byte byte0 = (byte)3;
      byteArray0[5] = (byte)3;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1742, 1742, byteArray0, 42, false);
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.getUseSeriesOffset();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }
}
